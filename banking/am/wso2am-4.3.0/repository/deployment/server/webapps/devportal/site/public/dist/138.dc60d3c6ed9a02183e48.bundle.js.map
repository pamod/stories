{"version":3,"file":"138.dc60d3c6ed9a02183e48.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://@wso2apim/devportal/./node_modules/unist-util-stringify-position/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile-message/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/bail/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/trough/index.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/content.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/document.js","webpack://@wso2apim/devportal/./node_modules/micromark-util-subtokenize/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/content.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/flow.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/text.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/create-tokenizer.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/list.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-destination/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-label/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-title/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-whitespace/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://@wso2apim/devportal/./node_modules/micromark-util-html-tag-name/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/constructs.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/preprocess.js","webpack://@wso2apim/devportal/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/postprocess.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/parse.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/remark-parse/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/traverse.js","webpack://@wso2apim/devportal/./node_modules/micromark-util-sanitize-uri/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/wrap.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://@wso2apim/devportal/./node_modules/trim-lines/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/unist-util-visit/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/unist-util-visit/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/rehype-filter.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/ast-to-react.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/react-markdown.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/uri-transformer.js"],"sourcesContent":["/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|NodeLike|Position|Point|null} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point|undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position|undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number|undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Reason for message.\n   *   Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place at which the message occurred in a file.\n   * @param {string} [origin]\n   *   Place in code the message originates from (example `'my-package:my-rule-name'`)\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    /** @type {string} */\n    this.message = typeof reason === 'object' ? reason.message : reason\n    /** @type {string} */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Whether this is a fatal problem that marks an associated file as no\n     * longer processable.\n     * If `true`, marks associated file as no longer processable.\n     * If `false`, necessitates a (potential) change.\n     * The value can also be `null` or `undefined`, for things that might not\n     * need changing.\n     *\n     * @type {boolean?}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number?}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number?}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full range information, when available.\n     * Has `start` and `end` fields, both set to an object with `line` and\n     * `column`, set to `number?`.\n     *\n     * @type {Position?}\n     */\n    this.position = position\n\n    /**\n     * Namespace of warning (example: `'my-package'`).\n     *\n     * @type {string?}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule-name'`).\n     *\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the VFile ecosystem).\n     *\n     * @type {string?}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string?}\n     */\n    this.actual\n\n    /**\n     * Suggest values that should be used instead of `actual`, one or more\n     * values that are deemed as acceptable.\n     *\n     * @type {Array<string>?}\n     */\n    this.expected\n\n    /**\n     * Link to documentation for the message.\n     *\n     * @type {string?}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (supported by `vfile-reporter`).\n     *\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Value|Options|VFile|URL} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {Value} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Data} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.\n   * If `options` is a `URL`, it’s treated as `{path: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All fields in `options` are set on the newly created `VFile`.\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {Compatible} [value]\n   */\n  constructor(value) {\n    /** @type {Options} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     * The first is the original path and the last is the current path.\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string, compiled, representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\n     * type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8']\n   *   When `value` is a `Buffer`, `encoding` is a character encoding to\n   *   understand it as (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\n   * associates it with the file by adding it to `vfile.messages` and setting\n   * `message.file` to the current filepath.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates an informational message where\n   * `fatal` is set to `null`.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates a fatal message where `fatal` is\n   * set to `true`, and then immediately throws it.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {never}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} MdastNode\n * @typedef {Extract<MdastNode, import('mdast').Parent>} MdastParent\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n *\n * @param {H} h\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} node\n * @param {MdastParent | null} parent\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @template {MdastNode} Node\n * @param {H} h\n * @param {Node} node\n * @returns {Node}\n */\nfunction returnNode(h, node) {\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const id = String(node.identifier)\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = h.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    h.footnoteOrder.push(id)\n    h.footnoteCounts[id] = 1\n    counter = h.footnoteOrder.length\n  } else {\n    h.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = h.footnoteCounts[id]\n\n  return h(node, 'sup', [\n    h(\n      node.position,\n      'a',\n      {\n        href: '#' + h.clobberPrefix + 'fn-' + safeId,\n        id:\n          h.clobberPrefix +\n          'fnref-' +\n          safeId +\n          (reuseCounter > 1 ? '-' + reuseCounter : ''),\n        dataFootnoteRef: true,\n        ariaDescribedBy: 'footnote-label'\n      },\n      [u('text', String(counter))]\n    )\n  ])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {H} h\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').H} H\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').H} H\n\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').H} H\n *\n * @todo\n *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @param {H} h\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @param {H} h\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * @param {H} h\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * @param {H} h\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalizeUri(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n * @typedef {import('mdast').Parent} Parent\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {List} node\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @param {H} h\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    /** @type {Array<Content>} */\n    const out = []\n    let cellIndex = -1\n    const length = node.align ? align.length : row.length\n\n    while (++cellIndex < length) {\n      const cell = row[cellIndex]\n      out.push(\n        h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])\n      )\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').H} H\n */\n\nimport {trimLines} from 'trim-lines'\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(node, u('text', trimLines(String(node.value))))\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {ThematicBreak} [node]\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName]\n *   Defines the tag name of an element.\n * @property {Properties} [hProperties]\n *   Defines the properties of an element.\n * @property {Array<Content>} [hChildren]\n *   Defines the (hast) children of an element.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data\n *   unist data with embedded hast fields.\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData\n *   unist node with embedded hast data.\n *\n * @callback Handler\n *   Handle a node.\n * @param {H} h\n *   Handle context.\n * @param {any} node\n *   mdast node to handle.\n * @param {Parent|null} parent\n *   Parent of `node`.\n * @returns {Content|Array<Content>|null|undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Properties} props\n *   Properties.\n * @param {Array<Content>?} [children]\n *   hast content.\n * @returns {Element}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<Content>?} [children]\n *   hast content\n * @returns {Element}\n *   Compiled element.\n *\n * @typedef HFields\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {Properties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use to go back to a footnote call from the footnote section.\n * @property {(identifier: string) => Definition|null} definition\n *   Definition cache.\n * @property {Record<string, FootnoteDefinition>} footnoteById\n *   Footnote cache.\n * @property {Array<string>} footnoteOrder\n *   Order in which footnotes occur.\n * @property {Record<string, number>} footnoteCounts\n *   Counts the same footnote was used.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment\n *   Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteLabelTagName='h2']\n *   HTML tag to use for the footnote label.\n *   Can be changed to match your document structure and play well with your choice of css.\n * @property {Properties} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label.\n *   A 'sr-only' class is added by default to hide this from sighted users.\n *   Change it to make the label visible, or add classes for other purposes.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Turn mdast into hast.\n *\n * @param {MdastNode} tree\n *   mdast node.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {H}\n *   `h` function.\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  h.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @returns {Element|null}\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: h.footnoteLabelTagName,\n        properties: {\n          ...JSON.parse(JSON.stringify(h.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n"],"names":["u","b","Symbol","for","c","d","e","f","g","h","k","l","m","n","p","q","t","v","a","r","$$typeof","type","exports","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","module","stringifyPosition","value","position","point","index","line","column","pos","start","end","VFileMessage","Error","constructor","reason","place","origin","parts","super","undefined","indexOf","slice","this","name","message","stack","fatal","source","ruleId","file","actual","expected","url","note","prototype","path","ext","TypeError","assertPath","seenNonSlash","length","charCodeAt","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","code","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","JSON","stringify","proc","isUrl","fileURLOrPath","href","order","VFile","options","data","messages","history","cwd","stored","map","prop","includes","URL","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","assertNonEmpty","push","dirname","basename","assertPart","extname","stem","toString","encoding","info","fail","part","bail","isPlainObject","Object","getPrototypeOf","toStringTag","iterator","unified","base","transformers","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","parameters","fnExpectsCallback","done","apply","Promise","then","wrap","use","middelware","trough","attachers","frozen","namespace","freezeIndex","processor","key","arguments","assertUnfrozen","own","call","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","Array","isArray","addList","addPreset","assign","add","plugin","plugins","entry","extend","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","hasOwnProperty","keys","asyncName","Boolean","looksLikeAVFile","content","tokenize","effects","contentStart","attempt","parser","constructs","contentInitial","enter","consume","exit","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","ok","nok","document","disable","null","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","partial","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","splice","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","fromCharCode","join","serializeChunks","chunkIndex","go","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","all","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","titleConstruct","defined","before","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","toLowerCase","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","characterReference","test","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","codeText","gap","tailExitIndex","headEnterIndex","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","search","fromMarkdown","config","configure","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","children","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","alt","listItem","spread","_spread","checked","listItemValue","getData","parseInt","setData","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","resume","replace","codeFencedFence","lang","onexithardbreak","referenceType","fragment","labelText","ancestor","resource","setextHeadingLineSequence","setextHeadingText","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","parent","ordered","compiler","postprocess","concat","extensions","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","combined","extension","left","right","unknown","augment","one","handlers","passThrough","returnNode","unknownHandler","nodes","head","normalizeUri","skip","encodeURIComponent","loose","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","clobberPrefix","dataFootnoteRef","ariaDescribedBy","revert","subtype","suffix","contents","listItemLoose","trimLine","codePointAt","blockquote","break","props","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","listLoose","wrapped","disabled","child","items","properties","root","table","rows","align","row","out","cellIndex","cell","last","lines","trimLines","toml","ignore","yaml","footnoteDefinition","toHast","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","visitor","reverse","parents","visit","toUpperCase","hName","hProperties","hChildren","ctx","factory","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","remove","unwrapDisallowed","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transform","transformLinkUri","parentSchema","schema","property","space","addProperty","listDepth","component","components","basic","linkTarget","target","inline","level","charAt","transformImageUri","input","getInputElement","getElementsBeforeCount","style","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","find","commaSeparated","styleReplacer","parseStyle","attribute","$1","changelog","deprecated","to","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","protocols","uriTransformer","uri","trim","first","colon"],"sourceRoot":""}