{"version":3,"file":"APIConsole.4e9daa5ea115db5cbb73.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiConsole/CustomPadLock.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiConsole/SwaggerUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiConsole/ApiConsole.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo } from 'react';\nimport 'swagger-ui-react/swagger-ui.css';\nimport LockIcon from '@mui/icons-material/Lock';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport Grid from '@mui/material/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\n/**\n *\n *\n * @export\n * @param {*} spec\n * @param {*} resourcePath\n * @returns\n */\nfunction isSecurityEnabled(spec, resourcePath) {\n    const operation = resourcePath.reduce((a, v) => a[v], spec);\n    return operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none';\n}\n\n/**\n *\n * Handles the resource level lock icon\n * @export\n * @param {*} BaseLayout\n * @param {*} props\n * @param {*} spec\n * @returns\n */\nfunction CustomPadLock(props) {\n    const {\n        BaseLayout, oldProps, spec,\n    } = props;\n    const securityEnabled = useMemo(() => isSecurityEnabled(spec, oldProps.specPath), []);\n\n    return (\n        <div>\n            <Grid container direction='row' justifyContent='space-between' alignItems='center'>\n                <Grid item md={11}>\n                    <BaseLayout {...oldProps} />\n                </Grid>\n                <Grid item justifyContent='flex-end' alignItems='right'>\n                    <Tooltip\n                        title={\n                            (securityEnabled)\n                                ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.Operation.disable.security'\n                                            + '.when.used.in.api.products'}\n                                        defaultMessage='Security enabled'\n                                    />\n                                )\n                                : (\n                                    <FormattedMessage\n                                        id='Apis.Details.Resources.components.enabled.security'\n                                        defaultMessage='No security'\n                                    />\n                                )\n                        }\n                        aria-label={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.security.operation'\n                                defaultMessage='Security '\n                            />\n                        )}\n                    >\n                        <IconButton aria-label='Security' size='large'>\n                            {(securityEnabled)\n                                ? <LockIcon fontSize='small' />\n                                : <LockOpenIcon fontSize='small' />}\n                        </IconButton>\n                    </Tooltip>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default React.memo(CustomPadLock);\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport SwaggerUILib from 'swagger-ui-react';\nimport CustomPadLock from './CustomPadLock';\n\nconst disableAuthorizeAndInfoPlugin = function (spec) {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n            authorizeOperationBtn: () => () => null,\n            OperationSummary: (original) => (props) => {\n                return <CustomPadLock BaseLayout={original} oldProps={props} spec={spec} />;\n            },\n        },\n    };\n};\n\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api,\n    } = props;\n\n    const securitySchemeRef = useRef(props.securitySchemeType);\n    const authorizationHeaderRef = useRef(props.authorizationHeader);\n\n    useEffect(() => {\n        securitySchemeRef.current = props.securitySchemeType;\n    }, [props.securitySchemeType]);\n\n    useEffect(() => {\n        authorizationHeaderRef.current = props.authorizationHeader;\n    }, [props.authorizationHeader]);\n\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const currentSecuritySchemeType = securitySchemeRef.current;\n            const currentAuthHeader = authorizationHeaderRef.current;\n            const patternToCheck = `${context}/*`;\n            if (currentSecuritySchemeType === 'API-KEY') {\n                req.headers[currentAuthHeader] = accessTokenProvider();\n            } else if (currentSecuritySchemeType === 'BASIC') {\n                req.headers[currentAuthHeader] = 'Basic ' + accessTokenProvider();\n            } else if (currentSecuritySchemeType === 'TEST') {\n                req.headers[currentAuthHeader] = accessTokenProvider();\n            } else if (api.advertiseInfo && api.advertiseInfo.advertised && authorizationHeader !== '') {\n                req.headers[currentAuthHeader] = accessTokenProvider();\n            } else {\n                req.headers[currentAuthHeader] = 'Bearer ' + accessTokenProvider();\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin(spec)],\n    };\n    const [render, setRender] = useState();\n    const [layoutRender, setlayoutRender] = useState();\n\n    useEffect(() => {\n        if (!layoutRender) return;\n        const len = document.querySelectorAll('.opblock .authorization__btn');\n        for (let i = 0; i < len.length; i++) {\n            len[i].remove();\n        }\n        document.querySelector('.schemes select').setAttribute('id', 'schemes');\n        document.getElementById('unlocked').parentNode.parentNode.remove();\n        setlayoutRender(false);\n    }, [layoutRender]);\n\n    useEffect(() => {\n        setlayoutRender(true);\n    }, [render]);\n\n    return (\n        <>\n            <SwaggerUILib {...componentProps} />\n            {setRender}\n        </>\n    );\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    securitySchemeType: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport Icon from '@mui/material/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport postmanIcon from '@iconify/icons-simple-icons/postman';\nimport { Icon as Icons } from '@iconify/react';\nimport fileDownload from 'js-file-download';\nimport openapiToPostman from 'openapi-to-postmanv2';\nimport swaggerToPostman from 'swagger2-postman2-converter';\nimport FileCopyIcon from '@mui/icons-material/FileCopy';\nimport Tooltip from '@mui/material/Tooltip';\nimport CloudDownloadRounded from '@mui/icons-material/CloudDownloadRounded';\nimport queryString from 'query-string';\nimport Settings from 'Settings';\nimport Utils from 'AppData/Utils';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport SwaggerUI from './SwaggerUI';\nimport TryOutController from '../../../Shared/ApiTryOut/TryOutController';\nimport Application from '../../../../data/Application';\n\nconst PREFIX = 'ApiConsole';\n\nconst classes = {\n    iconify: `${PREFIX}-iconify`,\n    buttonIcon: `${PREFIX}-buttonIcon`,\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    userNotificationPaper: `${PREFIX}-userNotificationPaper`,\n    titleSub: `${PREFIX}-titleSub`,\n    swaggerUIPaper: `${PREFIX}-swaggerUIPaper`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.iconify}`]: {\n        marginRight: 10,\n        font: 24,\n    },\n\n    [`& .${classes.buttonIcon}`]: {\n        marginRight: 10,\n    },\n\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.userNotificationPaper}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.titleSub}`]: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n\n    [`& .${classes.swaggerUIPaper}`]: {\n        backgroundColor: theme.custom.apiDetailPages.swaggerUIBackground,\n    },\n}));\n\n/**\n *\n *\n * @class ApiConsole\n * @extends {React.Component}\n */\nclass ApiConsole extends React.Component {\n    /**\n     *Creates an instance of ApiConsole.\n     * @param {*} props properties\n     * @memberof ApiConsole\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            securitySchemeType: 'OAUTH',\n            username: '',\n            password: '',\n            scopes: [],\n            selectedKeyType: 'PRODUCTION',\n            keys: [],\n            productionApiKey: '',\n            sandboxApiKey: '',\n            selectedKeyManager: 'Resident Key Manager',\n            urlCopied: false,\n            accessTokenPart: Utils.getCookieWithoutEnvironment('WSO2_AM_TOKEN_1_Default'),\n            tenant: '',\n            selectedAttribute: null,\n            advAuthHeader: 'Authorization',\n            advAuthHeaderValue: '',\n            selectedEndpoint: 'PRODUCTION',\n        };\n        this.accessTokenProvider = this.accessTokenProvider.bind(this);\n        this.updateSwagger = this.updateSwagger.bind(this);\n        this.setSecurityScheme = this.setSecurityScheme.bind(this);\n        this.setSelectedEnvironment = this.setSelectedEnvironment.bind(this);\n        this.setProductionAccessToken = this.setProductionAccessToken.bind(this);\n        this.setSandboxAccessToken = this.setSandboxAccessToken.bind(this);\n        this.setUsername = this.setUsername.bind(this);\n        this.setPassword = this.setPassword.bind(this);\n        this.setSelectedKeyType = this.setSelectedKeyType.bind(this);\n        this.setSectedKeyManager = this.setSelectedKeyManager.bind(this);\n        this.setKeys = this.setKeys.bind(this);\n        this.updateAccessToken = this.updateAccessToken.bind(this);\n        this.setProductionApiKey = this.setProductionApiKey.bind(this);\n        this.setSandboxApiKey = this.setSandboxApiKey.bind(this);\n        this.converttopostman = this.convertToPostman.bind(this);\n        this.setAdvAuthHeader = this.setAdvAuthHeader.bind(this);\n        this.setAdvAuthHeaderValue = this.setAdvAuthHeaderValue.bind(this);\n        this.setSelectedEndpoint = this.setSelectedEndpoint.bind(this);\n        this.onCopy = this.onCopy.bind(this);\n    }\n\n    /**\n     * @memberof ApiConsole\n     */\n    componentDidMount() {\n        const { api } = this.context;\n        const apiID = api.id;\n        const user = AuthManager.getUser();\n        let apiData;\n        let environments;\n        let selectedEnvironment;\n        let swagger;\n        let productionAccessToken;\n        let sandboxAccessToken;\n        const { app: { customUrl: { tenantDomain: customUrlEnabledDomain } } } = Settings;\n        let tenantDomain = '';\n        if (customUrlEnabledDomain !== 'null') {\n            tenantDomain = customUrlEnabledDomain;\n        } else {\n            const { location } = window;\n            if (location) {\n                const { tenant } = queryString.parse(location.search);\n                if (tenant) {\n                    tenantDomain = tenant;\n                }\n            }\n        }\n        this.setState({ tenant: tenantDomain });\n        this.apiClient = new Api();\n        const promiseAPI = this.apiClient.getAPIById(apiID);\n        let selectedAttribute = null;\n\n        promiseAPI\n            .then((apiResponse) => {\n                apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    environments = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => { return scope.key; });\n                    this.setState({ scopes: scopeList });\n                }\n                if (environments && environments.length > 0) {\n                    selectedEnvironment = environments[0].name;\n                    selectedAttribute = 'environmentName';\n                    return this.apiClient.getSwaggerByAPIIdAndEnvironment(apiID, selectedEnvironment);\n                } else {\n                    selectedAttribute = '';\n                    return this.apiClient.getSwaggerByAPIId(apiID);\n                }\n            })\n            .then((swaggerResponse) => {\n                swagger = swaggerResponse.obj;\n\n                let defaultSecurityScheme = 'OAUTH';\n                if (!apiData.securityScheme.includes('oauth2')) {\n                    defaultSecurityScheme = apiData.securityScheme.includes('api_key') ? 'API-KEY' : 'BASIC';\n                }\n\n                this.setState({\n                    api: apiData,\n                    swagger,\n                    environments,\n                    productionAccessToken,\n                    sandboxAccessToken,\n                    selectedEnvironment,\n                    securitySchemeType: defaultSecurityScheme,\n                    selectedAttribute,\n                });\n                if (user != null) {\n                    return this.apiClient.getSubscriptions(apiID);\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Set SecurityScheme value\n     * @memberof ApiConsole\n     */\n    setSecurityScheme(securityScheme) {\n        this.setState({ securitySchemeType: securityScheme });\n    }\n\n    /**\n     * Set Selected Environment\n     * @memberof ApiConsole\n     */\n    setSelectedEnvironment(selectedEnvironment) {\n        this.setState({ selectedEnvironment });\n    }\n\n    /**\n     * Set Production Access Token\n     * @memberof ApiConsole\n     */\n    setProductionAccessToken(productionAccessToken) {\n        this.setState({ productionAccessToken });\n    }\n\n    /**\n     * Set Sandbox Access Token\n     * @memberof ApiConsole\n     */\n    setSandboxAccessToken(sandboxAccessToken) {\n        this.setState({ sandboxAccessToken });\n    }\n\n    /**\n     * Set Production API Key\n     * @memberof ApiConsole\n     */\n    setProductionApiKey(productionApiKey) {\n        this.setState({ productionApiKey });\n    }\n\n    /**\n     * Set Sandbox API Key\n     * @memberof ApiConsole\n     */\n    setSandboxApiKey(sandboxApiKey) {\n        this.setState({ sandboxApiKey });\n    }\n\n    /**\n     * Set Username\n     * @memberof ApiConsole\n     */\n    setUsername(username) {\n        this.setState({ username });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setPassword(password) {\n        this.setState({ password });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyType(selectedKeyType, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyType }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyType });\n        }\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyManager(selectedKeyManager, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyManager }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyManager });\n        }\n    }\n\n    setKeys(keys) {\n        this.setState({ keys });\n    }\n\n    /**\n     * Set authorization header of third party APIs\n     * @param advAuthHeader authorization header\n     */\n    setAdvAuthHeader(advAuthHeader) {\n        this.setState({ advAuthHeader });\n    }\n\n    /**\n     * Set authorization header value of third party APIs\n     * @param advAuthHeaderValue authorization header value\n     */\n    setAdvAuthHeaderValue(advAuthHeaderValue) {\n        this.setState({ advAuthHeaderValue });\n    }\n\n    /**\n     * Set selected endpoint type of third party APIs\n     * @param selectedEndpoint selected endpoint type\n     */\n    setSelectedEndpoint(selectedEndpoint) {\n        this.setState({ selectedEndpoint });\n    }\n\n    /**\n     * Update swagger for properties for Swagger 2.0 third party APIs\n     * @param spec api definition\n     * @param serverUrl server url\n     * @returns {*}\n     */\n    setServersSpec(spec, serverUrl) {\n        let schemes;\n        const [protocol, host] = serverUrl.split('://');\n        if (protocol === 'http') {\n            schemes = ['http'];\n        } else if (protocol === 'https') {\n            schemes = ['https'];\n        }\n        return {\n            ...spec,\n            schemes,\n            host,\n        };\n    }\n\n    /**\n     * Converting an OpenAPI file to a postman collection\n     * @memberof ApiConsole\n   */\n    convertToPostman(fr) {\n        openapiToPostman.convert({ type: 'string', data: fr },\n            {}, (err, conversionResult) => {\n                if (!conversionResult.result) {\n                    const collection = swaggerToPostman.convert(fr);\n                    if (!collection) {\n                        console.log('Could not convert');\n                    } else {\n                        fileDownload(\n                            JSON.stringify(collection),\n                            'postman collection',\n                        );\n                    }\n                } else {\n                    fileDownload(\n                        JSON.stringify(conversionResult.output[0].data),\n                        'postman collection',\n                    );\n                }\n            });\n    }\n\n    /**\n     * Load the access token for given key type\n     * @memberof TryOutController\n     */\n    updateAccessToken(selectedApplication) {\n        const {\n            selectedKeyType, selectedKeyManager, keys,\n        } = this.state;\n        let accessToken;\n        if (keys.get(selectedKeyManager) && keys.get(selectedKeyManager).keyType === selectedKeyType) {\n            ({ accessToken } = keys.get(selectedKeyManager).token);\n            if (selectedKeyType === 'PRODUCTION') {\n                this.setProductionAccessToken(accessToken);\n            } else {\n                this.setSandboxAccessToken(accessToken);\n            }\n        } else {\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(selectedKeyType);\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(selectedKeyManager)\n                    && appKeys.get(selectedKeyManager).keyType === selectedKeyType) {\n                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                    }\n                    if (appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                        this.setProductionAccessToken(accessToken);\n                    } else {\n                        this.setSandboxAccessToken(accessToken);\n                    }\n                    this.setKeys(appKeys);\n                });\n        }\n    }\n\n    /**\n     *\n     * Provids the access token to the Swagger UI\n     * @returns {*} access token\n     * @memberof ApiConsole\n     */\n    accessTokenProvider() {\n        const {\n            securitySchemeType, username, password, productionAccessToken, sandboxAccessToken, selectedKeyType,\n            productionApiKey, sandboxApiKey, api, advAuthHeaderValue,\n        } = this.state;\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    /**\n     * Load the swagger file of the given environment\n     * @memberof ApiConsole\n     */\n    updateSwagger(environment) {\n        const {\n            api, environments,\n        } = this.state;\n        let promiseSwagger;\n\n        if (environment && environments.find((e) => e.name === environment)) {\n            promiseSwagger = this.apiClient.getSwaggerByAPIIdAndEnvironment(api.id, environment);\n        } else {\n            promiseSwagger = this.apiClient.getSwaggerByAPIId(api.id);\n        }\n        promiseSwagger.then((swaggerResponse) => {\n            this.setState({ swagger: swaggerResponse.obj });\n        });\n    }\n\n    onCopy = () => {\n        this.setState({\n            urlCopied: true,\n        });\n        const caller = function () {\n            this.setState({ urlCopied: false });\n        };\n        setTimeout(caller, 2000);\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof ApiConsole\n     */\n    render() {\n        const {\n            api, notFound, swagger, securitySchemeType, selectedEnvironment, environments, scopes,\n            username, password, productionAccessToken, sandboxAccessToken, selectedKeyType, accessTokenPart,\n            sandboxApiKey, productionApiKey, selectedKeyManager, advAuthHeader, advAuthHeaderValue, selectedEndpoint,\n            urlCopied, tenant, selectedAttribute,\n        } = this.state;\n        const { location } = window;\n        const user = AuthManager.getUser();\n        const downloadSwagger = JSON.stringify({ ...swagger });\n        const downloadLink = 'data:text/json;charset=utf-8, ' + encodeURIComponent(downloadSwagger);\n        const fileName = 'swagger.json';\n\n        if (api == null || swagger == null) {\n            return <Progress />;\n        }\n        if (notFound) {\n            return 'API Not found !';\n        }\n        let isApiKeyEnabled = false;\n        let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n        if (api && api.securityScheme) {\n            isApiKeyEnabled = api.securityScheme.includes('api_key');\n            if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n                authorizationHeader = api.apiKeyHeader ? api.apiKeyHeader : 'ApiKey';\n            }\n        }\n        let swaggerSpec = swagger;\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            authorizationHeader = advAuthHeader;\n            if (swaggerSpec.openapi) {\n                if (selectedEndpoint === 'PRODUCTION') {\n                    swaggerSpec = {\n                        ...swagger,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalProductionEndpoint },\n                        ],\n                    };\n                } else {\n                    swaggerSpec = {\n                        ...swagger,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalSandboxEndpoint },\n                        ],\n                    };\n                }\n            } else if (selectedEndpoint === 'PRODUCTION') {\n                swaggerSpec = this.setServersSpec(swaggerSpec, api.advertiseInfo.apiExternalProductionEndpoint);\n            } else {\n                swaggerSpec = this.setServersSpec(swaggerSpec, api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return (\n            <Root>\n                <Paper className={classes.paper}>\n                    <Grid container className={classes.grid}>\n                        {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                            <Grid item md={6}>\n                                <Paper className={classes.userNotificationPaper}>\n                                    <Typography variant='h5' component='h3'>\n                                        <Icon>info</Icon>\n                                        {' '}\n                                        <FormattedMessage id='notice' defaultMessage='Notice' />\n                                    </Typography>\n                                    <Typography component='p'>\n                                        <FormattedMessage\n                                            id='api.console.require.access.token'\n                                            defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                        />\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        )}\n                    </Grid>\n                    <Grid container className={classes.grid}>\n                        <TryOutController\n                            setSecurityScheme={this.setSecurityScheme}\n                            securitySchemeType={securitySchemeType}\n                            setSelectedEnvironment={this.setSelectedEnvironment}\n                            selectedEnvironment={selectedEnvironment}\n                            productionAccessToken={productionAccessToken}\n                            setProductionAccessToken={this.setProductionAccessToken}\n                            sandboxAccessToken={sandboxAccessToken}\n                            setSandboxAccessToken={this.setSandboxAccessToken}\n                            swagger={swaggerSpec}\n                            environments={environments}\n                            scopes={scopes}\n                            setUsername={this.setUsername}\n                            setPassword={this.setPassword}\n                            username={username}\n                            password={password}\n                            setSelectedKeyType={this.setSelectedKeyType}\n                            selectedKeyType={selectedKeyType}\n                            setSelectedKeyManager={this.setSelectedKeyManager}\n                            selectedKeyManager={selectedKeyManager}\n                            updateSwagger={this.updateSwagger}\n                            setKeys={this.setKeys}\n                            setProductionApiKey={this.setProductionApiKey}\n                            setSandboxApiKey={this.setSandboxApiKey}\n                            productionApiKey={productionApiKey}\n                            sandboxApiKey={sandboxApiKey}\n                            setAdvAuthHeader={this.setAdvAuthHeader}\n                            setAdvAuthHeaderValue={this.setAdvAuthHeaderValue}\n                            advAuthHeader={advAuthHeader}\n                            advAuthHeaderValue={advAuthHeaderValue}\n                            setSelectedEndpoint={this.setSelectedEndpoint}\n                            selectedEndpoint={selectedEndpoint}\n                            api={this.state.api}\n                            URLs={null}\n                        />\n                    </Grid>\n\n                    {api.type !== 'SOAP' && (\n                        <Grid container>\n                            <Grid xs={7} item />\n                            <Grid xs={2} item>\n                                <Button size='small' color='grey' onClick={() => this.convertToPostman(downloadSwagger)}>\n                                    <Icons icon={postmanIcon} width={30} height={30} className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIConsole.APIConsole.download.postman'\n                                        defaultMessage='Postman collection'\n                                    />\n                                </Button>\n                            </Grid>\n                            <Grid xs={3} item>\n                                <a href={downloadLink} download={fileName}>\n                                    <Button size='small' color='grey'>\n                                        <CloudDownloadRounded className={classes.buttonIcon} />\n                                        <FormattedMessage\n                                            id='Apis.Details.APIConsole.APIConsole.download.swagger'\n                                            defaultMessage='Swagger ( /swagger.json )'\n                                        />\n                                    </Button>\n                                </a>\n                                <Tooltip\n                                    title={urlCopied\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Swagger.URL.copied'\n                                                defaultMessage='Copied'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Swagger.URL.copy.to.clipboard'\n                                                defaultMessage='Copy to clipboard'\n                                            />\n                                        )}\n                                    placement='top'\n                                >\n                                    <Button\n                                        aria-label='Copy to clipboard'\n                                        className={classes.button}\n                                        color='grey'\n                                        onClick={() => {\n                                            navigator.clipboard.writeText(location.origin\n                                                + '/api/am/devportal/v3/apis/' + api.id + '/swagger?accessToken='\n                                                + accessTokenPart + '&X-WSO2-Tenant-Q=' + tenant + '&'\n                                                + selectedAttribute + '=' + selectedEnvironment).then(this.onCopy());\n                                        }}\n                                    >\n                                        <FileCopyIcon className={classes.buttonIcon} />\n                                    </Button>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Paper>\n                <Paper className={classes.swaggerUIPaper}>\n                    <SwaggerUI\n                        api={this.state.api}\n                        accessTokenProvider={this.accessTokenProvider}\n                        spec={swaggerSpec}\n                        authorizationHeader={authorizationHeader}\n                        securitySchemeType={securitySchemeType}\n                    />\n                </Paper>\n            </Root>\n        );\n    }\n}\n\nApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        iconify: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nApiConsole.contextType = ApiContext;\n\nexport default (ApiConsole);\n"],"names":["CustomPadLock","props","BaseLayout","oldProps","spec","securityEnabled","useMemo","resourcePath","operation","reduce","a","v","toLowerCase","isSecurityEnabled","specPath","React","Grid","container","direction","justifyContent","alignItems","item","md","Tooltip","title","FormattedMessage","id","defaultMessage","IconButton","size","LockIcon","fontSize","LockOpenIcon","disableAuthorizeAndInfoPlugin","wrapComponents","info","authorizeBtn","authorizeOperationBtn","OperationSummary","original","SwaggerUI","accessTokenProvider","authorizationHeader","api","securitySchemeRef","useRef","securitySchemeType","authorizationHeaderRef","useEffect","current","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","url","context","currentSecuritySchemeType","currentAuthHeader","patternToCheck","headers","advertiseInfo","advertised","endsWith","substring","length","includes","splitTokens","split","defaultModelExpandDepth","plugins","render","setRender","useState","layoutRender","setlayoutRender","len","document","querySelectorAll","i","remove","querySelector","setAttribute","getElementById","parentNode","SwaggerUILib","propTypes","PropTypes","isRequired","PREFIX","classes","iconify","buttonIcon","paper","grid","userNotificationPaper","titleSub","swaggerUIPaper","Root","styled","_ref","theme","marginRight","font","margin","spacing","padding","marginTop","marginBottom","paddingRight","marginLeft","paddingTop","paddingBottom","color","palette","getContrastText","background","default","backgroundColor","custom","apiDetailPages","swaggerUIBackground","ApiConsole","constructor","super","_defineProperty","this","setState","urlCopied","setTimeout","state","username","password","scopes","selectedKeyType","keys","productionApiKey","sandboxApiKey","selectedKeyManager","accessTokenPart","Utils","getCookieWithoutEnvironment","tenant","selectedAttribute","advAuthHeader","advAuthHeaderValue","selectedEndpoint","bind","updateSwagger","setSecurityScheme","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","setUsername","setPassword","setSelectedKeyType","setSectedKeyManager","setSelectedKeyManager","setKeys","updateAccessToken","setProductionApiKey","setSandboxApiKey","converttopostman","convertToPostman","setAdvAuthHeader","setAdvAuthHeaderValue","setSelectedEndpoint","onCopy","componentDidMount","apiID","user","AuthManager","getUser","apiData","environments","selectedEnvironment","swagger","app","customUrl","tenantDomain","customUrlEnabledDomain","Settings","location","window","queryString","search","apiClient","Api","promiseAPI","getAPIById","then","apiResponse","obj","endpointURLs","map","endpoint","name","environmentName","displayName","environmentDisplayName","scopeList","scope","key","getSwaggerByAPIIdAndEnvironment","getSwaggerByAPIId","swaggerResponse","defaultSecurityScheme","securityScheme","productionAccessToken","sandboxAccessToken","getSubscriptions","catch","error","status","notFound","isUpdateToken","selectedApplication","setServersSpec","serverUrl","schemes","protocol","host","_objectSpread","fr","openapiToPostman","type","data","err","conversionResult","result","fileDownload","JSON","stringify","output","collection","swaggerToPostman","console","log","accessToken","get","keyType","token","Application","application","getKeys","appKeys","btoa","environment","promiseSwagger","find","e","downloadSwagger","downloadLink","encodeURIComponent","Progress","isApiKeyEnabled","apiKeyHeader","swaggerSpec","openapi","servers","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","Paper","className","Typography","variant","component","Icon","TryOutController","URLs","xs","Button","onClick","Icons","icon","postmanIcon","width","height","href","download","CloudDownloadRounded","placement","button","navigator","clipboard","writeText","origin","FileCopyIcon","contextType","ApiContext"],"sourceRoot":""}