{"version":3,"file":"4856.e823fd55b0d313c63b54.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/TokenExchangeKeyConfiguration.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/RemoveKeys.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/CleanKeys.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ScopeValidation.jsx","webpack://@wso2apim/devportal/./source/src/app/data/Subscription.jsx","webpack://@wso2apim/devportal/./source/src/app/data/Validation.jsx"],"sourcesContent":["/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport Typography from '@mui/material/Typography';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport PlayForWorkIcon from '@mui/icons-material/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControl from '@mui/material/FormControl';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl variant=\"standard\">\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl variant=\"standard\">\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\nimport FileCopy from '@mui/icons-material/FileCopy';\nimport Tooltip from '@mui/material/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport IconButton from \"@mui/material/IconButton\";\n\nconst PREFIX = 'ViewCurl';\n\nconst classes = {\n    code: `${PREFIX}-code`,\n    command: `${PREFIX}-command`,\n    encodeVisible: `${PREFIX}-encodeVisible`,\n    contentWrapper: `${PREFIX}-contentWrapper`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.code}`]: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n\n    [`& .${classes.command}`]: {\n        color: '#2b62b0',\n    },\n\n    [`& .${classes.encodeVisible}`]: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n\n    [`& .${classes.contentWrapper}`]: {\n        display: 'flex',\n    }\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyManagerConfig,\n        jwtToken,\n        defaultTokenEndpoint,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    if (keyManagerConfig.alias === null ) {\n        return (\n            <Root>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help'\n                        defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                    />\n                </Typography>\n\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=password&username=Username&password=Password\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <IconButton\n                                id = 'copy-to-clipbord-icon'\n                                aria-label='Copy to clipboard'\n                                size=\"large\"\n                                onClick={() => {navigator.clipboard.writeText(`curl -k -X POST ${tokenEndpoint} -d ` +\n                                    '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`).then(onCopy())}}\n                            >\n                                <FileCopy color='secondary'/>\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                        defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                    />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=client_credentials\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <IconButton\n                                id = 'copy-to-clipbord-icon'\n                                aria-label='Copy to clipboard'\n                                size=\"large\"\n                                onClick={() => {navigator.clipboard.writeText(`curl -k -X POST ${tokenEndpoint} -d ` +\n                                    '\"grant_type=client_credentials\" -H ' +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`).then(onCopy())}}\n                            >\n                                <FileCopy color='secondary'/>\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            </Root>\n        );\n    } else {\n        if (consumerKey === false) {\n            return (\n                <Root>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.error'\n                            defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                             order to use the token Exchange Approach. '\n                        />\n                    </Typography>\n                </Root>\n                )\n        } else {\n            return (\n                <Root>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.TokenExchange.help'\n                            defaultMessage='The following cURL command shows how to generate an access token using the\n                        token exchange grant type'\n                        />\n                    </Typography>\n\n                    <div className={classes.contentWrapper}>\n                        <div className={classes.code}>\n                            <div>\n                                <span className={classes.command}>curl -k -X POST </span> {defaultTokenEndpoint}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" '}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token=\"'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + jwtToken : 'jwtToken'}\n                                </a>\n                            </div>\n                            <div>\n                                <span className={classes.command}> -H </span>\n                                {'\"Authorization: Basic'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                                </a>\n                                {'\"'}\n                            </div>\n                        </div>\n                        <div>\n                            <Tooltip\n                                title={\n                                    tokenCopied\n                                        ? intl.formatMessage({\n                                            defaultMessage: 'Copied',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                        })\n                                        : intl.formatMessage({\n                                            defaultMessage: 'Copy to clipboard',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                        })\n                                }\n                                placement='right'\n                            >\n                                <IconButton\n                                    id = 'copy-to-clipbord-icon'\n                                    aria-label='Copy to clipboard'\n                                    size=\"large\"\n                                    onClick={() => {navigator.clipboard.writeText(`curl -k -X POST ${defaultTokenEndpoint} -d ` +\n                                        '\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\" -d ' +\n                                        '\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                        '\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                        `\"subject_token=${jwtToken}\"  -H ` +\n                                        `\"Authorization: Basic ${bas64Encoded}\"`).then(onCopy())}}\n                                >\n                                    <FileCopy color='secondary'/>\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </Root>\n            );\n        }\n    }\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n    jwtToken: PropTypes.string,\n    defaultTokenEndpoint: PropTypes.string,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {useReducer, useState} from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport ViewCurl from \"AppComponents/Shared/AppsAndKeys/ViewCurl\";\nimport ViewToken from \"AppComponents/Shared/AppsAndKeys/ViewToken\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport Application from \"AppData/Application\";\nimport Loading from \"AppComponents/Base/Loading/Loading\";\nimport Alert from \"AppComponents/Shared/Alert\";\nimport Tokens from \"AppComponents/Shared/AppsAndKeys/Tokens\";\nimport {TableBody, TableCell, TableRow} from \"@mui/material\";\nimport Table from \"@mui/material/Table\";\n\nconst PREFIX = 'TokenExchangeKeyConfiguration';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`,\n    FormControlOdd: `${PREFIX}-FormControlOdd`,\n    button: `${PREFIX}-button`,\n    quotaHelp: `${PREFIX}-quotaHelp`,\n    checkboxWrapper: `${PREFIX}-checkboxWrapper`,\n    generateWrapper: `${PREFIX}-generateWrapper`,\n    checkboxWrapperColumn: `${PREFIX}-checkboxWrapperColumn`,\n    group: `${PREFIX}-group`,\n    removeHelperPadding: `${PREFIX}-removeHelperPadding`,\n    iconStyle: `${PREFIX}-iconStyle`,\n    iconButton: `${PREFIX}-iconButton`,\n    titleColumn: `${PREFIX}-titleColumn`,\n    keyInfoTable: `${PREFIX}-keyInfoTable`,\n    leftCol: `${PREFIX}-leftCol`,\n    stepLabel: `${PREFIX}-stepLabel`,\n    stepContent: `${PREFIX}-stepContent`,\n    keyLabel: `${PREFIX}-keyLabel`,\n    idpGrid: `${PREFIX}-idpGrid`,\n    helperTextError: `${PREFIX}-helperTextError`,\n    input: `${PREFIX}-input`,\n    avatar: `${PREFIX}-avatar`,\n    copyIconStyle: `${PREFIX}-copyIconStyle`,\n    hr: `${PREFIX}-hr`,\n    divCenter: `${PREFIX}-divCenter`,\n    tableHeader: `${PREFIX}-tableHeader`,\n    helperText: `${PREFIX}-helperText`,\n    dialogWrapper: `${PREFIX}-dialogWrapper`,\n    margin: `${PREFIX}-margin`,\n    tokenSection: `${PREFIX}-tokenSection`,\n    inputWrapper: `${PREFIX}-inputWrapper`,\n    bottomInfo: `${PREFIX}-bottomInfo`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.FormControl}`]: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n\n    [`& .${classes.FormControlOdd}`]: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n\n    [`& .${classes.button}`]: {\n        marginLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.quotaHelp}`]: {\n        position: 'relative',\n    },\n\n    [`& .${classes.checkboxWrapper}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.generateWrapper}`]: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n\n    [`& .${classes.checkboxWrapperColumn}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n\n    [`& .${classes.group}`]: {\n        flexDirection: 'row',\n    },\n\n    [`& .${classes.removeHelperPadding}`]: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n\n    [`& .${classes.iconStyle}`]: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n\n    [`& .${classes.titleColumn}`]: {\n        width: 150,\n        fontWeight: 500,\n    },\n\n    [`& .${classes.keyInfoTable}`]: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 180,\n    },\n\n    [`& .${classes.stepLabel}`]: {\n        color: \"#5567d5\",\n        alignSelf: 'center',\n    },\n\n    [`& .${classes.stepContent}`]: {\n        color: '#1D2028',\n        fontSize: '0.75rem',\n    },\n\n    [`& .${classes.keyLabel}`]: {\n        color: '#222228',\n        fontSize: '0.75rem',\n        marginLeft: theme.spacing(1)\n    },\n\n    [`& .${classes.idpGrid}`]: {\n        textAlign: 'left',\n        margin: theme.spacing(0),\n        alignSelf: 'center',\n    },\n\n    [`& .${classes.helperTextError}`]: {\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: 10.5\n    },\n\n    [`& .${classes.input}`]: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n\n    [`& .${classes.avatar}`]: {\n        width: 30,\n        height: 30,\n        background: 'transparent',\n        border: `solid 1px ${theme.palette.grey[300]}`\n    },\n\n    [`& .${classes.copyIconStyle}`]: {\n        cursor: 'pointer',\n        margin: '-10px 0',\n        padding: '0 0 0 5px',\n        '& .material-icons': {\n            fontSize: 18,\n            color: '#9c9c9c',\n        },\n    },\n\n    [`& .${classes.hr}`]: {\n        border: 'solid 1px #efefef',\n    },\n\n    [`& .${classes.divCenter}`]: {\n        alignSelf: 'center',\n        width: 180\n    },\n\n    [`& .${classes.tableHeader}`]: {\n        borderBottom: 'none',\n\n    },\n\n    [`& .${classes.helperText}`]: {\n        marginLeft: 0,\n        color: '#8D91A3',\n        lineHeight: 1.6,\n        maxWidth: 410\n    },\n\n    [`& .${classes.dialogWrapper}`]: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.margin}`]: {\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.tokenSection}`]: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n\n    [`& .${classes.inputWrapper}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.bottomInfo}`]: {\n        fontSize: 12,\n        marginBottom: '10px',\n    }\n}));\n\nfunction reducer(state, newValue) {\n    const {field, value} = newValue;\n    switch (field) {\n        case 'tokenResponse':\n        case 'token':\n        case 'tokenScopes':\n        case 'tokenValidityTime':\n        case 'accessTokenRequest':\n        case 'subscriptionScopes':\n        case 'externalIDPToken':\n        case 'externalIDPTokenError':\n        case 'isKeyJWT':\n        case 'initialExecution':\n            return {...state, [field]: value};\n        case 'all':\n            return value;\n        default:\n            return newValue;\n    }\n}\n\n\n/**\n *\n *\n * @class TokenExchangeKeyConfiguration\n * @extends {React.Component}\n */\nconst TokenExchangeKeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [showCS, setShowCS] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [showToken, setShowToken] = useState(false);\n    const [showCurl, setShowCurl] = useState(false);\n    const [showSecretGen, setShowSecretGen] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [isResidenceTokenAvailable, setIsResidenceTokenAvailable] = useState(true);\n\n\n    const [initialState] = useState({\n        tokenResponse: '',\n        token: '',\n        tokenScope: '',\n        tokenValidityTime: '',\n        accessTokenRequest: {\n            timeout: 3600,\n            scopesSelected: [],\n            keyType: '',\n        },\n        subscriptionScopes: [],\n        externalIDPToken: '',\n        externalIDPTokenError: '',\n        isKeyJWT: false,\n        initialExecution: true,\n    });\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const {\n        tokenResponse, accessTokenRequest, externalIDPToken, externalIDPTokenError, subscriptionScopes,\n        tokenValidityTime, token, isKeyJWT, initialExecution\n    } = state\n\n    const intl = useIntl();\n\n    const {\n        keyManagerConfig, defaultTokenEndpoint, selectedApp, selectedTab, selectedApp: {hashEnabled}, keys, fullScreen, keyType\n    } = props;\n\n    let appId;\n    if (selectedApp) {\n        appId = selectedApp.appId || selectedApp.value;\n    }\n\n    const applicationPromise = Application.get(appId);\n\n    if (initialExecution) {\n        applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = {...accessTokenRequest, keyType};\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => {\n                            return scope.key;\n                        });\n                    dispatch({field: 'accessTokenRequest', value: newRequest});\n                    dispatch({field: 'subscriptionScopes', value: subscriptionScopes});\n                    dispatch({field: 'initialExecution', value: false});\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                }\n                dispatch({field: 'initialExecution', value: false});\n            });\n    }\n\n    const generateAccessToken = () => {\n        setIsUpdating(true);\n        applicationPromise.then((application) => application.generateToken(\n            selectedTab,\n            accessTokenRequest.keyType,\n            accessTokenRequest.timeout,\n            accessTokenRequest.scopesSelected,\n            true,\n            externalIDPToken,\n        ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                setShowToken(true);\n                dispatch({field: 'tokenResponse', value: response});\n                dispatch({field: 'token', value: response.accessToken});\n                dispatch({field: 'tokenScopes', value: response.tokenScopes})\n                dispatch({field: 'tokenValidityTime', value: response.validityTime})\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                setIsUpdating(false);\n                const {response} = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    let dialogHead;\n    if (showCurl) {\n        dialogHead = 'Get CURL to Generate Access Token';\n    } else if (showSecretGen) {\n        dialogHead = 'Generate Consumer Secret';\n    } else {\n        dialogHead = 'Generate Access Token';\n    }\n\n    const validateExternalIDPToken = (token) => {\n        if (token === \"\") {\n            return (\n                <FormattedMessage\n                    id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.empty.helperText'\n                    defaultMessage={`{selectedIdPType} token cannot be empty`}\n                    values={{selectedIdPType: keyManagerConfig.type}}\n\n                />\n            );\n        }\n        {\n            return \"\";\n        }\n    };\n\n    const onExternalIDPTokenChange = (event) => {\n        const externalIDPToken = event.target.value;\n        dispatch({field: 'externalIDPTokenError', value: validateExternalIDPToken(externalIDPToken)})\n        dispatch({field: 'externalIDPToken', value: externalIDPToken})\n    };\n\n\n    if (notFound) {\n        return <ResourceNotFound/>;\n    }\n    if (!keys) {\n        return <Loading/>;\n    }\n\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    const updateAccessTokenRequest = (accessTokenRequest) => {\n        dispatch({field: 'accessTokenRequest', value: accessTokenRequest})\n    }\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    const handleClose = () => {\n        setOpen(false);\n        setShowCurl(false);\n        setShowSecretGen(false);\n        dispatch({field: \"isKeyJWT\", value: false})\n\n    };\n\n    /**\n     * Handle on open of dialog for generating access token\n     * */\n    const handleClickOpen = () => {\n            setOpen(true);\n    };\n    /**\n     * Handle on open of dialog for generating access token and get curl\n     * */\n    const handleClickOpenCurl = () => {\n        setOpen(true);\n        setShowCurl(true)\n    };\n\n\n    const csCkKeys = keys.size > 0 && keys.get(\"Resident Key Manager\") && (keys.get(\"Resident Key Manager\").keyType === keyType)\n        && keys.get(\"Resident Key Manager\") || false;\n    const consumerKey = csCkKeys && csCkKeys.consumerKey;\n    const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n    return (\n        <Root>\n                    <Box display='flex' alignItems='center'>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.externalIdp.tokenGeneration.step1\"\n                                            defaultMessage=\"Step 1:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.step1.description'\n                                            defaultMessage={`Obtain an access token from {selectedIdpType}. `}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.audience'\n                                            defaultMessage='Use the audience value \"{allowedAudience}\", '\n                                            values={{allowedAudience: <b>{keyManagerConfig.alias}</b>}}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint'\n                                            defaultMessage='Token Endpoint'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint.value'\n                                            defaultMessage={'{tokenEndpoint}'}\n                                            values={{tokenEndpoint: keyManagerConfig.tokenEndpoint}}\n                                        />\n\n                                        <Tooltip\n                                            title={\n                                                urlCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copy.to.clipboard',\n                                                    })\n                                            }\n                                            placement='right'\n                                            className={classes.iconStyle}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{root: classes.iconButton}}\n                                                size=\"large\"\n                                                onClick={() => {navigator.clipboard.writeText(keyManagerConfig.tokenEndpoint).then(onCopy())}}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.tokenGeneration.step2\"\n                                            defaultMessage=\"Step 2:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenGeneration.step2.description'\n                                            defaultMessage='Obtain test token'\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token'\n                                            defaultMessage={`{selectedIdpType} Token`}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n                                        <span className={classes.error}> *</span>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Box maxWidth={600}>\n                                            <TextField\n                                                id='external-idp-token'\n                                                onChange={onExternalIDPTokenChange}\n                                                size=\"small\"\n                                                fullWidth\n                                                rows={1}\n                                                value={externalIDPToken}\n                                                variant=\"outlined\"\n                                                error={externalIDPTokenError !== \"\"}\n                                                FormHelperTextProps={{\n                                                    className: classes.helperText\n                                                }}\n                                                helperText={externalIDPTokenError === \"\" ?\n                                                    externalIDPTokenError :\n                                                    <div className={classes.helperTextError}>\n                                                        <p> {externalIDPTokenError} </p>\n                                                    </div>\n                                                }\n                                                className={classes.textField}\n                                                data-testid='external-idp-token'\n                                            />\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Box>\n                    <Box>\n                        <div className={classes.inputWrapper}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Dialog\n                                        fullScreen={fullScreen}\n                                        open={open}\n                                        onClose={handleClose}\n                                        aria-labelledby='responsive-dialog-title'\n                                        className={classes.dialogWrapper}\n                                    >\n                                        <DialogTitle id='responsive-dialog-title'>\n                                            {dialogHead}\n                                        </DialogTitle>\n                                        <DialogContent>\n                                            {(!showCurl && !isKeyJWT && !showSecretGen) && (\n                                                <DialogContentText>\n                                                    {(!showToken && isResidenceTokenAvailable) && (\n                                                        <Tokens\n                                                            updateAccessTokenRequest={updateAccessTokenRequest}\n                                                            accessTokenRequest={accessTokenRequest}\n                                                            subscriptionScopes={subscriptionScopes}\n                                                        />\n                                                    )}\n                                                    {(!showToken && !isResidenceTokenAvailable) && (\n                                                        <React.Fragment>\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                                />\n                                                            </Typography>\n                                                        </React.Fragment>\n                                                    )}\n                                                    {showToken &&\n                                                    <ViewToken token={{...tokenResponse, isOauth: true}} isResidenceTokenAvailable={isResidenceTokenAvailable} isTokenExchange />}\n                                                </DialogContentText>\n                                            )}\n                                            {showCurl && (\n                                                <DialogContentText>\n                                                    <ViewCurl\n                                                        keys={{consumerKey, consumerSecret}}\n                                                        keyType={keyType}\n                                                        jwtToken={externalIDPToken}\n                                                        keyManagerConfig={keyManagerConfig}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </DialogContentText>\n                                            )}\n                                        </DialogContent>\n                                        <DialogActions>\n                                            {isUpdating && <CircularProgress size={24}/>}\n                                            {(!showToken && !showCurl && !showSecretGen && isResidenceTokenAvailable) && (\n                                                <Button onClick={generateAccessToken} color='primary'\n                                                        disabled={isUpdating}>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                                        defaultMessage='Generate'\n                                                    />\n                                                </Button>\n                                            )}\n                                            <Button onClick={handleClose} color='primary' autoFocus>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                    defaultMessage='Close'\n                                                />\n                                            </Button>\n                                        </DialogActions>\n                                    </Dialog>\n                                    <div className={classes.generateWrapper}>\n                                        <Grid className={classes.bottomInfo}>\n                                            <FormattedMessage\n                                                id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.description'\n                                                defaultMessage={`In Exchange token flow, A JWT token has to be generated from the {selectedIdpType}\n                                             idp and then exchange for a token with the Resident Key Manager which can used to invoke APIs`}\n                                                values={{selectedIdpType: keyManagerConfig.type}}\n                                            />\n                                        </Grid>\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpen}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                        <Button\n                                            id='curl-to-generate-access-token-btn'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpenCurl}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                                defaultMessage='CURL to Generate Access Token'\n                                            />\n                                        </Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Box>\n        </Root>\n    );\n}\nTokenExchangeKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    fullScreen: false,\n    summary: false,\n};\nTokenExchangeKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    defaultTokenEndpoint: PropTypes.string,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }),\n};\n\n\nexport default (TokenExchangeKeyConfiguration);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nimport Chip from '@mui/material/Chip';\nimport MenuItem from '@mui/material/MenuItem';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@mui/material/Select';\nimport Input from '@mui/material/Input';\nimport Box from '@mui/material/Box';\nimport ChipInput from 'AppComponents/Shared/ChipInput';\n\n\nconst PREFIX = 'AppConfiguration';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`,\n    FormControlOdd: `${PREFIX}-FormControlOdd`,\n    button: `${PREFIX}-button`,\n    quotaHelp: `${PREFIX}-quotaHelp`,\n    checkboxWrapper: `${PREFIX}-checkboxWrapper`,\n    checkboxWrapperColumn: `${PREFIX}-checkboxWrapperColumn`,\n    group: `${PREFIX}-group`,\n    removeHelperPadding: `${PREFIX}-removeHelperPadding`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')(\n    ({ theme }) => ({\n        display: 'contents',\n        [`& .${classes.FormControl}`]: {\n            paddingTop: theme.spacing(2),\n            paddingBottom: theme.spacing(2),\n            paddingLeft: 0,\n            width: '100%',\n        },\n\n        [`& .${classes.FormControlOdd}`]: {\n            padding: theme.spacing(2),\n            width: '100%',\n        },\n\n        [`& .${classes.button}`]: {\n            marginLeft: theme.spacing(1),\n        },\n\n        [`& .${classes.quotaHelp}`]: {\n            position: 'relative',\n        },\n\n        [`& .${classes.checkboxWrapper}`]: {\n            display: 'flex',\n        },\n\n        [`& .${classes.checkboxWrapperColumn}`]: {\n            display: 'flex',\n            flexDirection: 'row',\n        },\n\n        [`& .${classes.group}`]: {\n            flexDirection: 'row',\n        },\n\n        [`& .${classes.removeHelperPadding}`]: {\n            '& p': {\n                margin: '8px 0px',\n            },\n        }\n    })\n);\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain',\n            defaultMessage: 'Support PKCE Plain text',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials',\n            defaultMessage: 'Public client',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory.tooltip',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain.tooltip',\n            defaultMessage: 'S256 is recommended, plain text too can be used.',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials.tooltip',\n            defaultMessage: 'Allow authentication without the client secret.',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n\n    const setCheckboxValue = () => {\n        return ( typeof selectedValue === 'string' && selectedValue === 'true' )\n            || ( typeof selectedValue !== 'string' && selectedValue === true );\n    }\n\n    return (\n        <Root>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n\n                        {config.type === 'select' && config.multiple === false ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                select\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                size='small'\n                                disabled={!isUserOwner}\n                            >\n                                {config.values.map(key => (\n                                    <MenuItem key={key} value={key}>\n                                        {key}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                            <>\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                    <Select\n                                        variant=\"standard\"\n                                        labelId=\"multi-select-label\"\n                                        id=\"multi-select-outlined\"\n                                        margin='dense'\n                                        displayEmpty\n                                        name={config.name}\n                                        multiple\n                                        value={selectedValue}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        input={<Input id='multi-select-outlined'/>}\n                                        renderValue={selected => (\n                                            <div className={classes.chips}>\n                                                {selected.map(value => (\n                                                    <Chip key={value} label={value} className={classes.chip}/>\n                                                ))}\n                                            </div>\n                                        )}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        label={getAppConfigLabel()}\n                                    >\n                                        {config.values.map(key => (\n                                            <MenuItem key={key} value={key}>\n                                                <Checkbox checked={selectedValue.indexOf(key) > -1}/>\n                                                <ListItemText primary={key}/>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n\n                                <Typography variant='caption'>\n                                    {getAppConfigToolTip()}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input' && config.multiple === true) ? (\n                            <>\n                            <ChipInput\n                                value={selectedValue}\n                                fullWidth\n                                variant='outlined'\n                                id=\"multi-input-outlined\"\n                                label={config.label}\n                                onAdd={(tag) => {\n                                    const e = { target: { name:config.name, value: [...selectedValue, tag] } }\n                                    handleAppRequestChange(e)\n                                }\n                                }\n                                chipRenderer={({ value }, key) => (\n                                    <Chip\n                                        key={key}\n                                        size='small'\n                                        label={value}\n                                        onDelete={() => {\n                                            const e = { target: { name:config.name, value:selectedValue.filter (\n                                            (oldScope)=> oldScope !== value) } }\n                                            handleAppRequestChange(e);\n                                        }}\n                                        style={{\n                                            margin: '0 8px 12px 0',\n                                            float: 'left',\n                                        }}\n                                    />\n                                )}\n                                style={{ display: 'flex' }}\n                            />\n                            <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input') ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                size='small'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (config.type === 'checkbox') ? (\n                            <Checkbox\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                checked={setCheckboxValue()}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n        </Root>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl((AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport TextField from '@mui/material/TextField';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst PREFIX = 'KeyConfiguration';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`,\n    FormControlOdd: `${PREFIX}-FormControlOdd`,\n    button: `${PREFIX}-button`,\n    quotaHelp: `${PREFIX}-quotaHelp`,\n    checkboxWrapper: `${PREFIX}-checkboxWrapper`,\n    checkboxWrapperColumn: `${PREFIX}-checkboxWrapperColumn`,\n    group: `${PREFIX}-group`,\n    removeHelperPadding: `${PREFIX}-removeHelperPadding`,\n    iconStyle: `${PREFIX}-iconStyle`,\n    iconButton: `${PREFIX}-iconButton`,\n    titleColumn: `${PREFIX}-titleColumn`,\n    keyInfoTable: `${PREFIX}-keyInfoTable`,\n    leftCol: `${PREFIX}-leftCol`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.FormControl}`]: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n\n    [`& .${classes.FormControlOdd}`]: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n\n    [`& .${classes.button}`]: {\n        marginLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.quotaHelp}`]: {\n        position: 'relative',\n    },\n\n    [`& .${classes.checkboxWrapper}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.checkboxWrapperColumn}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n\n    [`& .${classes.group}`]: {\n        flexDirection: 'row',\n    },\n\n    [`& .${classes.removeHelperPadding}`]: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n\n    [`& .${classes.iconStyle}`]: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n\n    [`& .${classes.titleColumn}`]: {\n        width: 150,\n        fontWeight: 500,\n    },\n\n    [`& .${classes.keyInfoTable}`]: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 180,\n    }\n}));\n\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,mode,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else if (Validation.url.validate(callbackUrl).error) {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.url.error.text',\n            }));\n        }else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                if(currentTarget.type === 'checkbox') {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.checked + \"\";\n                } else {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                }\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <Root>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <IconButton\n                                            aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}\n                                            size=\"large\"\n                                            onClick={() => {navigator.clipboard.writeText(tokenEndpoint).then(onCopy())}}\n                                        >\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <IconButton\n                                            aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}\n                                            size=\"large\"\n                                            onClick={() => {navigator.clipboard.writeText(revokeEndpoint).then(onCopy())}}\n                                        >\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <IconButton\n                                            aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}\n                                            size=\"large\"\n                                            onClick={() => {navigator.clipboard.writeText(userInfoEndpoint).then(onCopy())}}\n                                        >\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {mode !== 'MAPPED' && (<><TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn} id='grant-types'>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='grey'\n                                                        data-testid={key}\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        size='small'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                        </>)}\n                    </TableBody>\n                </Table>\n            </Box>\n        </Root>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    mode: null,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\n\nexport default (KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControl from '@mui/material/FormControl';\nimport Icon from '@mui/material/Icon';\nimport Grid from '@mui/material/Grid';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Tooltip from '@mui/material/Tooltip';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst PREFIX = 'ViewKeys';\n\nconst classes = {\n    button: `${PREFIX}-button`,\n    inputWrapper: `${PREFIX}-inputWrapper`,\n    copyWrapper: `${PREFIX}-copyWrapper`,\n    tokenSection: `${PREFIX}-tokenSection`,\n    margin: `${PREFIX}-margin`,\n    dialogWrapper: `${PREFIX}-dialogWrapper`,\n    iconButton: `${PREFIX}-iconButton`\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.inputWrapper}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`&.${classes.copyWrapper}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n\n    [`& .${classes.tokenSection}`]: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n\n    [`& .${classes.margin}`]: {\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.dialogWrapper}`]: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    }\n}));\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        this.getGeneratedKeys();\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    getGeneratedKeys = () => {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of remove keys\n     * */\n    handleClickRemove = (keyMappingId) => {\n        const {\n            selectedTab, keyType, intl, loadApplication,\n        } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                return application.removeKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then((result) => {\n                if (result) {\n                    loadApplication();\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.cleanupall.success',\n                        defaultMessage: 'Application keys removed successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                throw (error);\n            });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (error.response.body.code === 900905) {\n                    Alert.error(error.response.body.description);\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                } \n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body && response.body.code !== 900905) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <Root className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            size='small'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                                size='large'\n                                                onClick={() => {\n                                                    navigator.clipboard.writeText(consumerKey)\n                                                        .then(() => this.onCopy('keyCopied'));\n                                                }}\n                                            >\n                                                <Icon color='secondary'>\n                                                    file_copy\n                                                </Icon>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Root>\n                    <FormControl variant='standard'>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <Root className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                size='small'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                                id='visibility-toggle-btn'\n                                                size='large'\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <IconButton\n                                                    aria-label='Copy to clipboard'\n                                                    classes={{ root: classes.iconButton }}\n                                                    size='large'\n                                                    onClick={() => {\n                                                        navigator.clipboard\n                                                            .writeText(consumerSecret).then(() => this.onCopy('secretCopied'));\n                                                    }}\n                                                >\n                                                    <Icon color='secondary'>file_copy</Icon>\n                                                </IconButton>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                sx={{ mt: 1 }}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </Root>\n                    {!hashEnabled && (\n                        <FormControl variant='standard'>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes, mode,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead;\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n        return consumerKey && (\n            <Root className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button\n                                        onClick={this.generateAccessToken}\n                                        color='primary'\n                                        id='generate-access-token-generate-btn'\n                                        disabled={isUpdating}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button\n                                    onClick={this.handleClose}\n                                    id='generate-access-token-close-btn'\n                                    color='primary'\n                                    autoFocus\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {(keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials')))\n                                    && mode !== 'MAPPED'\n                                    && (\n                                        <Button\n                                            id='generate-access-token-oauth2'\n                                            variant='outlined'\n                                            size='small'\n                                            color='grey'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='grey'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </Root>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n    mode: null,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\nexport default injectIntl(withRouter(ViewKeys));\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { injectIntl } from 'react-intl';\n\nconst PREFIX = 'WaitingForApproval';\n\nconst classes = {\n    root: `${PREFIX}-root`\n};\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.root}`]: {\n        padding: theme.spacing(3),\n    }\n}));\n\nconst waitingForApproval = (props) => {\n    const {\n        keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <Root className={classes.root}>{message}</Root>;\n};\n\nexport default injectIntl((waitingForApproval));\n","\nimport React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={{\n                background: '#ffffff55',\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n                border: 'solid 1px #fff',\n                padding: theme.spacing(2),\n                width: '100%',\n            }}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={{\n                background: '#ffffff55',\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n                border: 'solid 1px #fff',\n                padding: theme.spacing(2),\n                width: '100%',\n            }}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nfunction RemoveKeys(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        keyMappingId, handleClickRemove,\n    } = props;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleRemove = () => {\n        handleClickRemove(keyMappingId);\n    };\n\n    return (\n        <div>\n            <Button\n                id='remove-generated-keys'\n                variant='outlined'\n                color='secondary'\n                startIcon={<DeleteIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewKeys.remove.keys'\n                    defaultMessage='Remove Keys'\n                />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.title'\n                        defaultMessage='Do you really want to remove keys?'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.content'\n                            defaultMessage='This will remove the key entries stored in devportal,\n                            gateway as well as in the service provider.'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={handleRemove} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default RemoveKeys;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nfunction CleanKeys(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        keyMappingId, handleClickRemove,\n    } = props;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleClean = () => {\n        handleClickRemove(keyMappingId);\n    };\n\n    return (\n        <div>\n            <Button\n                id='remove-generated-keys'\n                variant='outlined'\n                color='secondary'\n                startIcon={<DeleteIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewKeys.remove.keys'\n                    defaultMessage='Remove Keys'\n                />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.title'\n                        defaultMessage='Do you really want to remove keys?'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.clean.keys.dialog.content'\n                            defaultMessage='This will remove only the key entries stored in devportal,\n                            gateway and will not remove the service proveder keys.'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={handleClean} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default CleanKeys;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport AppBar from '@mui/material/AppBar';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport API from 'AppData/api';\nimport Table from '@mui/material/Table';\nimport TokenExchangeKeyConfiguration from 'AppComponents/Shared/AppsAndKeys/TokenExchangeKeyConfiguration';\nimport TableRow from '@mui/material/TableRow';\nimport {\n    Dialog,\n    DialogActions, DialogContent,\n    DialogContentText,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TableCell,\n} from '@mui/material';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Grid from '@mui/material/Grid';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\nimport RemoveKeys from './RemoveKeys';\nimport CleanKeys from './CleanKeys';\n\nconst PREFIX = 'TokenManager';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    button: `${PREFIX}-button`,\n    cleanUpButton: `${PREFIX}-cleanUpButton`,\n    cleanUpInfoText: `${PREFIX}-cleanUpInfoText`,\n    tokenSection: `${PREFIX}-tokenSection`,\n    margin: `${PREFIX}-margin`,\n    keyConfigWrapper: `${PREFIX}-keyConfigWrapper`,\n    generateWrapper: `${PREFIX}-generateWrapper`,\n    paper: `${PREFIX}-paper`,\n    muiFormGroupRoot: `${PREFIX}-muiFormGroupRoot`,\n    formControl: `${PREFIX}-formControl`,\n    subTitle: `${PREFIX}-subTitle`,\n    tabPanel: `${PREFIX}-tabPanel`,\n    warningIcon: `${PREFIX}-warningIcon`,\n    leftCol: `${PREFIX}-leftCol`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n\n    [`& .${classes.button}`]: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.cleanUpButton}`]: {\n        marginLeft: 15,\n    },\n\n    [`& .${classes.cleanUpInfoText}`]: {\n        padding: '10px 0px 10px 15px',\n    },\n\n    [`& .${classes.tokenSection}`]: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n\n    [`& .${classes.margin}`]: {\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.keyConfigWrapper}`]: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n\n    [`& .${classes.generateWrapper}`]: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n\n    [`& .${classes.paper}`]: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n\n    [`& .${classes.muiFormGroupRoot}`]: {\n        flexDirection: 'row',\n    },\n\n    [`& .${classes.formControl}`]: {\n    },\n\n    [`& .${classes.subTitle}`]: {\n        fontWeight: 400,\n    },\n\n    [`& .${classes.tabPanel}`]: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n\n    [`& .${classes.warningIcon}`]: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 180,\n    },\n}));\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n            tokenType: 'DIRECT',\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    /**\n     * Handle onCLick of remove keys\n     * */\n    handleClickRemove = (keyMappingId) => {\n        const {\n            selectedTab, keyType, intl,\n        } = this.props;\n        this.application\n            .then((application) => {\n                return application.removeKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then((result) => {\n                if (result) {\n                    this.loadApplication();\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.cleanupall.success',\n                        defaultMessage: 'Application keys removed successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                throw (error);\n            });\n    };\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    isTokenExchangeEnabled() {\n        const { keyManagers } = this.state;\n        let isEnabled = false;\n        if (keyManagers && keyManagers.length > 1) {\n            keyManagers.map((keymanager) => {\n                if (keymanager.tokenType === 'EXCHANGED' || keymanager.tokenType === 'BOTH') {\n                    isEnabled = true;\n                }\n            });\n        }\n        return isEnabled;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n        const selectedGrantsByDefault = [];\n        if (availableGrantTypes.find((gt) => gt === 'password')) {\n            selectedGrantsByDefault.push('password');\n        }\n        if (availableGrantTypes.find((gt) => gt === 'client_credentials')) {\n            selectedGrantsByDefault.push('client_credentials');\n        }\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const {\n                callbackUrl, supportedGrantTypes, additionalProperties, mode,\n            } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                    || selectedGrantsByDefault,\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({\n                keyRequest: newRequest,\n                selectedTab: newSelectedTab,\n                mode,\n                importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n            });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: selectedGrantsByDefault,\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n                importDisabled: false,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType, intl } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const {\n                            callbackUrl, supportedGrantTypes, additionalProperties, mode,\n                        } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys,\n                            keyRequest: newRequest,\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectedGrantTypes = [];\n                        if (selectdKM.availableGrantTypes.find((gt) => gt === 'password')) {\n                            selectedGrantTypes.push('password');\n                        }\n                        if (selectdKM.availableGrantTypes.find((gt) => gt === 'client_credentials')) {\n                            selectedGrantTypes.push('client_credentials');\n                        }\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes,\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    } else {\n                        Alert.error(error.description\n                            || intl.formatMessage({\n                                id: 'Shared.AppsAndKeys.TokenManager.get.keys.request.error',\n                                defaultMessage: 'Error while retrieving the keys',\n                            }));\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({\n                    keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes,\n                });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(error.description\n                    || `${intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                        defaultMessage: 'Error occurred when generating application keys',\n                    })}, ${error.response.body.message}`);\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body && response.body.message && response.body.description) {\n                    Alert.error(`${response.body.message}: ${response.body.description}`);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(error.description || intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status, response } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                if (response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(error.description || intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                        defaultMessage: 'Error occurred when providing application keys',\n                    }));\n                }\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    handleChange = (e) => {\n        this.setState({ tokenType: e.target.defaultValue });\n    }\n\n    handleClose=() => {\n        this.setState({ tokenType: 'DIRECT' });\n    }\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            selectedApp, keyType, summary, selectedApp: { hashEnabled }, isKeyManagerAllowed,\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode, tokenType,\n        } = this.state;\n\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <Root>\n                    <div className={classes.root}>\n                        <Box mb={1}>\n                            <Typography variant='h5' className={classes.keyTitle}>\n                                {this.toTitleCase(keyType)}\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeyhandleCloses.TokenManager.oauth2.keys.main.title'\n                                    defaultMessage=' OAuth2 Keys'\n                                />\n                            </Typography>\n                        </Box>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography variant='h5' component='h3'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.TokenManager.no.km'\n                                    defaultMessage='No Key Managers'\n                                />\n                            </Typography>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                    defaultMessage='No Key Managers active to generate keys.'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </div>\n                </Root>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Root><Loading /></Root>;\n        }\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab)\n            && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <Root>\n                        <TokenMangerSummary\n                            keys={keys}\n                            key={key}\n                            keyStates={this.keyStates}\n                            selectedApp={selectedApp}\n                            selectedTab={selectedTab}\n                            keyType={keyType}\n                            isKeyJWT={isKeyJWT}\n                            isUserOwner={isUserOwner}\n                        />\n                    </Root>\n                );\n            } else {\n                return (<Root><Progress /></Root>);\n            }\n        }\n\n        let isResidentKeyManagerTokensAvailable = false;\n        if (keys.has('Resident Key Manager')\n            && keys.get('Resident Key Manager').supportedGrantTypes\n            && keys.get('Resident Key Manager').supportedGrantTypes\n                .includes('urn:ietf:params:oauth:grant-type:token-exchange')) {\n            isResidentKeyManagerTokensAvailable = true;\n        }\n\n        let defaultTokenEndpoint;\n\n        if (keyManagers.length > 0) {\n            const residentKMs = keyManagers.filter((item) => item.name === 'Resident Key Manager');\n            defaultTokenEndpoint = residentKMs.length > 0 ? (residentKMs)[0].tokenEndpoint : null;\n        }\n\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <Root>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </Root>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <Root><WaitingForApproval keyState={key.keyState} states={this.keyStates} /></Root>;\n        }\n        return (\n            <Root>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position='static' color='default'>\n                        <Tabs\n                            value={selectedTab}\n                            onChange={this.handleTabChange}\n                            indicatorColor='primary'\n                            textColor='primary'\n                            variant='scrollable'\n                            scrollButtons='auto'\n                            aria-label='scrollable auto tabs example'\n                        >\n                            {keyManagers.map((keymanager) => (\n                                <Tab\n                                    label={keymanager.displayName || keymanager.name}\n                                    value={keymanager.name}\n                                    disabled={!keymanager.enabled || (isKeyManagerAllowed\n                                    && !isKeyManagerAllowed(keymanager.name)\n                                    && ((keymanager.name !== 'Resident Key Manager')\n                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                    id={keymanager.name.replace(/\\s/g, '')}\n                                />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <div>\n                            {keymanager.tokenType === 'DIRECT' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box display='flex' flexDirection='row'>\n                                        <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                            <FormattedMessage\n                                                defaultMessage='Key and Secret'\n                                                id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                            />\n                                        </Typography>\n                                        {keymanager.enableMapOAuthConsumerApps && (\n                                            <Box ml={2}>\n                                                <ImportExternalApp\n                                                    onChange={this.handleOnChangeProvidedOAuth}\n                                                    consumerKey={providedConsumerKey}\n                                                    consumerSecret={providedConsumerSecret}\n                                                    isUserOwner={isUserOwner}\n                                                    key={key}\n                                                    provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                    importDisabled={importDisabled}\n                                                />\n                                            </Box>\n                                        )}\n                                        {(keymanager.enableTokenGeneration && keys.get(selectedTab))\n                                            && (\n                                                mode !== 'MAPPED'\n                                                    ? (\n                                                        <Box ml={2}>\n                                                            <RemoveKeys\n                                                                keys={keys}\n                                                                selectedTab={selectedTab}\n                                                                keyMappingId={keyMappingId}\n                                                                handleClickRemove={this.handleClickRemove}\n                                                            />\n                                                        </Box>\n                                                    ) : (\n                                                        <Box ml={2}>\n                                                            <CleanKeys\n                                                                keys={keys}\n                                                                selectedTab={selectedTab}\n                                                                keyMappingId={keyMappingId}\n                                                                handleClickRemove={this.handleClickRemove}\n                                                            />\n                                                        </Box>\n                                                    ))}\n                                    </Box>\n                                    <Box m={2}>\n                                        <ViewKeys\n                                            initialToken={initialToken}\n                                            initialValidityTime={initialValidityTime}\n                                            initialScopes={initialScopes}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            keys={keys}\n                                            selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                            isUserOwner={isUserOwner}\n                                            hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                            keyManagerConfig={keymanager}\n                                            mode={mode}\n                                            loadApplication={this.loadApplication}\n                                        />\n                                    </Box>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        {\n                                            key\n                                                ? (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configurations'\n                                                        id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                    />\n                                                )\n                                                : (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configuration'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                    />\n                                                )\n                                        }\n                                    </Typography>\n                                    <Box m={2}>\n                                        <KeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                            mode={mode}\n                                        />\n                                        <div className={classes.generateWrapper}>\n                                            <ScopeValidation\n                                                resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                resourceMethod={resourceMethods.POST}\n                                            >\n                                                {!isUserOwner ? (\n                                                    <>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={\n                                                                key ? this.updateKeys : this.generateKeys\n                                                            }\n                                                            disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation\n                                                                || (isKeyManagerAllowed\n                                                                    && !isKeyManagerAllowed(keymanager.name)\n                                                                    && ((keymanager.name !== 'Resident Key Manager')\n                                                                    || (!this.isTokenExchangeEnabled()\n                                                                    && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key\n                                                                ? this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                                    defaultMessage: 'Update Keys',\n                                                                })\n                                                                : this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys',\n                                                                })}\n                                                            {isLoading && <CircularProgress size={20} />}\n                                                        </Button>\n                                                        <Typography variant='caption'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Only owner can generate or update keys'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                            />\n                                                        </Typography>\n                                                    </>\n                                                ) : (\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={key ? this.updateKeys : this.generateKeys}\n                                                            disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation)\n                                                                || (mode && mode === 'MAPPED')\n                                                            || (isKeyManagerAllowed\n                                                                && !isKeyManagerAllowed(keymanager.name)\n                                                                && ((keymanager.name !== 'Resident Key Manager')\n                                                                || (!this.isTokenExchangeEnabled()\n                                                                && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key\n                                                                ? this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                                    defaultMessage: 'Update',\n                                                                })\n                                                                : this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys',\n                                                                })}\n                                                            {isLoading && <CircularProgress size={20} />}\n                                                        </Button>\n                                                        {!keymanager.enableOAuthAppCreation && (\n                                                            <Box m={2} display='flex'>\n                                                                <WarningIcon className={classes.warningIcon} />\n                                                                <Typography variant='body1'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Oauth app creation\n                                                                         disabled for {kmName} key manager'\n                                                                        id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                        values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                                    />\n                                                                </Typography>\n                                                            </Box>\n                                                        )}\n                                                    </Box>\n                                                )}\n                                            </ScopeValidation>\n                                        </div>\n\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'EXCHANGED' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        <FormattedMessage\n                                            defaultMessage='Token Generation'\n                                            id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                        />\n                                    </Typography>\n                                    <Box m={2}>\n                                        {/*\n                                        Token exchange grant flow enable/disable logic\n                                        Given that in the key manager selected has the tokenType='EXCHANGE'\n                                            If 'Resident Key Manager' disabled we can't proceed with token exchange.\n                                             So need to show a banner\n                                            If 'Resident Key Manager' enabled,\n                                             we need to check if the resident key manager 'exchange grant' is selected.\n                                            So we need to ask the user to select 'exchange grant' for the 'Resident Key Manager'.\n                                            If 'Resident Key Manager' enabled and 'exchange grant' is enabled the token exchange is possible\n                                        */}\n                                        <TokenExchangeKeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                        />\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'BOTH' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box m={2}>\n                                        <Box m={2}>\n                                            <Box display='flex' alignItems='center'>\n                                                <Table className={classes.table}>\n                                                    <TableRow>\n                                                        <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                            <FormattedMessage\n                                                                defaultMessage='API Invocation Method'\n                                                                id='Shared.AppsAndKeys.KeyConfiguration.API Invocation.Method.label'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <RadioGroup\n                                                                style={{ flexDirection: 'row' }}\n                                                                aria-label='tokenType'\n                                                                name='tokenType'\n                                                                value={tokenType}\n                                                                onChange={this.handleChange}\n                                                            >\n                                                                <FormControlLabel\n                                                                    value='DIRECT'\n                                                                    control={<Radio />}\n                                                                    label='Direct Token'\n                                                                    id='direct-token'\n                                                                />\n                                                                <FormControlLabel\n                                                                    value='EXCHANGED'\n                                                                    control={<Radio />}\n                                                                    label='Exchange Token'\n                                                                    id='exchange-token'\n                                                                />\n                                                            </RadioGroup>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                </Table>\n                                            </Box>\n                                        </Box>\n\n                                        {tokenType === 'DIRECT' && (\n                                            <>\n                                                <Box display='flex' flexDirection='row'>\n                                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                        <FormattedMessage\n                                                            defaultMessage='Key and Secret'\n                                                            id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                                        />\n                                                    </Typography>\n                                                    {\n                                                        keymanager.enableMapOAuthConsumerApps && (\n                                                            <Box ml={2}>\n                                                                <ImportExternalApp\n                                                                    onChange={this.handleOnChangeProvidedOAuth}\n                                                                    consumerKey={providedConsumerKey}\n                                                                    consumerSecret={providedConsumerSecret}\n                                                                    isUserOwner={isUserOwner}\n                                                                    key={key}\n                                                                    provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                                    importDisabled={importDisabled}\n                                                                />\n                                                            </Box>\n                                                        )\n                                                    }\n                                                </Box>\n                                                <Box m={2}>\n                                                    <ViewKeys\n                                                        initialToken={initialToken}\n                                                        initialValidityTime={initialValidityTime}\n                                                        initialScopes={initialScopes}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        keys={keys}\n                                                        selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                                        isUserOwner={isUserOwner}\n                                                        hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                                        keyManagerConfig={keymanager}\n                                                        mode={mode}\n                                                        loadApplication={this.loadApplication}\n                                                    />\n                                                </Box>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    {\n                                                        key\n                                                            ? (\n                                                                <FormattedMessage\n                                                                    defaultMessage='Key Configurations'\n                                                                    id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                                />\n                                                            )\n                                                            : (\n                                                                <FormattedMessage\n                                                                    defaultMessage='Key Configuration'\n                                                                    id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                                />\n                                                            )\n                                                    }\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <KeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                    <div className={classes.generateWrapper}>\n                                                        <ScopeValidation\n                                                            resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                            resourceMethod={resourceMethods.POST}\n                                                        >\n                                                            {!isUserOwner ? (\n                                                                <>\n                                                                    <Button\n                                                                        id='generate-keys'\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        className={classes.button}\n                                                                        onClick={\n                                                                            key ? this.updateKeys : this.generateKeys\n                                                                        }\n\n                                                                    >\n                                                                        {key ? 'Update keys' : 'Generate Keys'}\n                                                                        {isLoading && <CircularProgress size={20} />}\n                                                                    </Button>\n                                                                    <Typography variant='caption'>\n                                                                        <FormattedMessage\n                                                                            defaultMessage='Only owner can generate or update keys'\n                                                                            id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                                        />\n                                                                    </Typography>\n                                                                </>\n                                                            ) : (\n                                                                <Box display='flex'>\n                                                                    <Button\n                                                                        id='generate-keys'\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        className={classes.button}\n                                                                        onClick={key ? this.updateKeys : this.generateKeys}\n\n                                                                    >\n                                                                        {key ? 'Update' : 'Generate Keys'}\n                                                                        {isLoading && <CircularProgress size={20} />}\n                                                                    </Button>\n                                                                    {!keymanager.enableOAuthAppCreation && (\n                                                                        <Box m={2} display='flex'>\n                                                                            <WarningIcon className={classes.warningIcon} />\n                                                                            <Typography variant='body1'>\n                                                                                <FormattedMessage\n                                                                                    defaultMessage='Oauth app creation disabled for\n                                                                                     {kmName} key manager'\n                                                                                    id='Shared.AppsAndKeys.TokenManager.app.creation.disable\n                                                                                    .warn'\n                                                                                    values={{\n                                                                                        kmName: keymanager.displayName || keymanager.name,\n                                                                                    }}\n                                                                                />\n                                                                            </Typography>\n                                                                        </Box>\n                                                                    )}\n                                                                </Box>\n                                                            )}\n                                                        </ScopeValidation>\n                                                    </div>\n                                                </Box>\n                                            </>\n                                        )}\n                                        {(tokenType === 'EXCHANGED' && isResidentKeyManagerTokensAvailable) && (\n                                            <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Token Generation'\n                                                        id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                                    />\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <TokenExchangeKeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </Box>\n                                            </TabPanel>\n                                        )}\n                                    </Box>\n                                </TabPanel>\n                            )}\n                        </div>\n                    ))}\n\n                </div>\n                {(tokenType === 'EXCHANGED' && !isResidentKeyManagerTokensAvailable) && (\n                    <div className={classes.inputWrapper}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <Dialog\n                                    fullScreen={false}\n                                    open\n                                    onClose={this.handleClose}\n                                    aria-labelledby='responsive-dialog-title'\n                                    className={classes.dialogWrapper}\n                                >\n                                    <DialogTitle id='responsive-dialog-title'>\n                                        {'Resident Key Manager Consumer Key and Secret Not Available '}\n                                    </DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText>\n                                            <>\n                                                <Typography>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewCurl.error'\n                                                        defaultMessage='Please generate the Consumer Key and Secret for\n                                                         Residence Key Manager with selecting the\n                                                          urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                           order to use the token Exchange Approach. '\n                                                    />\n                                                </Typography>\n                                            </>\n                                        </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n\n                                        <Button onClick={this.handleClose} color='primary' autoFocus id='close-btn'>\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                defaultMessage='Close'\n                                            />\n                                        </Button>\n                                    </DialogActions>\n                                </Dialog>\n                            </Grid>\n                        </Grid>\n                    </div>\n                )}\n            </Root>\n        );\n    }\n}\n\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl((TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n"],"names":["ImportExternalApp","props","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","React","handleClose","handleChange","event","Button","variant","color","startIcon","PlayForWorkIcon","onClick","handleClickOpen","disabled","FormattedMessage","defaultMessage","id","Dialog","onClose","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","label","formatMessage","value","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","ScopeValidation","resourcePath","resourcePaths","APPLICATION_GENERATE_KEYS","resourceMethod","resourceMethods","POST","Typography","propTypes","PropTypes","isRequired","defaultProps","PREFIX","classes","code","command","encodeVisible","contentWrapper","Root","styled","_ref","theme","padding","marginBottom","background","palette","grey","flex","cursor","textDecoration","display","ViewCurl","keys","keyManagerConfig","jwtToken","defaultTokenEndpoint","bas64Encoded","window","btoa","showReal","setShowReal","useState","tokenCopied","setTokenCopied","onCopy","setTimeout","applyReal","tokenEndpoint","alias","className","Tooltip","title","placement","IconButton","size","navigator","clipboard","writeText","then","FileCopy","apis","injectIntl","FormControlOdd","button","quotaHelp","checkboxWrapper","generateWrapper","checkboxWrapperColumn","group","removeHelperPadding","iconStyle","iconButton","titleColumn","keyInfoTable","leftCol","stepLabel","stepContent","keyLabel","idpGrid","helperTextError","input","avatar","copyIconStyle","hr","divCenter","tableHeader","helperText","dialogWrapper","tokenSection","inputWrapper","bottomInfo","paddingTop","paddingBottom","paddingLeft","width","marginLeft","position","flexWrap","flexDirection","whiteSpace","fontSize","fontWeight","borderCollapse","borderBottom","alignSelf","textAlign","alignItems","height","border","lineHeight","maxWidth","getContrastText","paper","marginRight","marginTop","reducer","state","newValue","field","_objectSpread","TokenExchangeKeyConfiguration","urlCopied","setUrlCopied","showCS","setShowCS","showToken","setShowToken","showCurl","setShowCurl","showSecretGen","setShowSecretGen","notFound","setNotFound","isUpdating","setIsUpdating","isResidenceTokenAvailable","setIsResidenceTokenAvailable","initialState","tokenResponse","token","tokenScope","tokenValidityTime","accessTokenRequest","timeout","scopesSelected","keyType","subscriptionScopes","externalIDPToken","externalIDPTokenError","isKeyJWT","initialExecution","dispatch","useReducer","selectedApp","selectedTab","hashEnabled","fullScreen","appId","applicationPromise","Application","get","dialogHead","application","getKeys","newRequest","map","scope","catch","error","status","validateExternalIDPToken","values","selectedIdPType","type","ResourceNotFound","Loading","csCkKeys","Box","Table","table","TableBody","TableRow","TableCell","component","selectedIdpType","allowedAudience","root","Icon","target","rows","FormHelperTextProps","textField","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","isTokenExchange","CircularProgress","generateAccessToken","generateToken","response","console","log","accessToken","tokenScopes","validityTime","Alert","description","body","message","autoFocus","handleClickOpenCurl","validating","summary","Object","keyRequest","callbackUrl","selectedGrantTypes","isKeysAvailable","setGenerateEnabled","updateKeyRequest","tokenType","owner","AppConfiguration","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","currentTarget","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","pkceMandatory","pkceSupportPlain","bypassClientCredentials","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","tooltip","useEffect","multiple","select","MenuItem","Array","isArray","formControl","InputLabel","Select","labelId","displayEmpty","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","ChipInput","onAdd","tag","chipRenderer","_ref2","onDelete","filter","oldScope","style","float","KeyConfiguration","callbackHelper","setCallbackHelper","updateHasError","callbackError","mode","applicationConfiguration","availableGrantTypes","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","userInfoEndpoint","cloneDeep","newGrantTypes","keyManager","includes","Validation","url","validate","clonedAdditionalProperties","getPreviousValue","isPreviousValueSet","defaultValue","default","grantTypeDisplayListMap","getGrantTypeDisplayList","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","Settings","FormControlLabel","control","placeholder","length","copyWrapper","ViewKeys","constructor","super","_defineProperty","this","setState","that","elementName","caller","data","preventDefault","keyMappingId","loadApplication","removeKeys","result","info","regenerateSecret","secretGenResponse","keyCopied","secretCopied","InputProps","readOnly","endAdornment","InputAdornment","sx","mt","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","componentDidMount","getGeneratedKeys","componentDidUpdate","prevProps","render","initialToken","initialValidityTime","initialScopes","accessTokenScopes","validityPeriod","tokenDetails","gutterBottom","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","ViewSecret","secret","find","a","withRouter","keyState","states","REJECTED","TokenManagerSummary","keyStates","CREATED","WaitingForApproval","keyGrantTypes","handleClickRemove","DeleteIcon","handleRemove","handleClean","cleanUpButton","cleanUpInfoText","keyConfigWrapper","muiFormGroupRoot","subTitle","tabPanel","warningIcon","backgroundColor","main","TabPanel","children","index","other","_objectWithoutProperties","_excluded","_extends","role","hidden","p","TokenManager","newSelectedTab","keyManagers","selectedKM","x","selectedGrantsByDefault","gt","push","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","selectdKM","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","nextProps","nextKeyType","prevKeyType","confItem","isTokenExchangeEnabled","isEnabled","keymanager","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","isKeyManagerAllowed","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","AuthManager","getUser","TokenMangerSummary","Progress","isResidentKeyManagerTokensAvailable","has","residentKMs","AppBar","Tabs","handleTabChange","indicatorColor","textColor","scrollButtons","Tab","displayName","ml","RemoveKeys","CleanKeys","m","enableTokenHashing","setValidating","WarningIcon","kmName","RadioGroup","Radio","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","PUT","GET","DELETE","hasScope","hasScopes","haveScope","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","getSubscriptions","apiId","applicationId","limit","arguments","undefined","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","number","Joi","integer","uri","allow","ipAddress","ip","version","cidr"],"sourceRoot":""}