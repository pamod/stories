{"version":3,"file":"ApplicationDetails.3c0e1a80300de86da9e6.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiKey.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiKeyRestriction.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Listing/SubscriptionPolicySelect.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Listing/APICardView.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/Invoice.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/SubscriptionTableData.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/Subscriptions.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/InfoBar.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/Overview.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/WebHookDetails.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/index.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Listing/DeleteConfirmation.jsx","webpack://@wso2apim/devportal/./source/src/app/data/stringFormatter.js"],"sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Validation from 'AppData/Validation';\n\nconst PREFIX = 'ApiKey';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.FormControl}`]: {\n        'margin-bottom': '8px',\n        width: '100%',\n        padding: '0px 10px',\n    }\n}));\n\n/**\n * Used to display generate api key in UI\n */\nconst tokens = (props) => {\n    const [infiniteValidity, setInfiniteValidity] = useState(true);\n    const [invalidTimeout, setInvaildTimeout] = useState(false);\n\n    /**\n    * This method is used to handle the updating of create api key\n    * request object.\n    * @param {*} field\n    * @param {*} event event fired\n    */\n    const handleChange = (field, event) => {\n        const { accessTokenRequest, updateAccessTokenRequest } = props;\n        const newRequest = { ...accessTokenRequest };\n\n        const { target: currentTarget } = event;\n\n        switch (field) {\n            case 'infiniteValidity':\n                setInfiniteValidity(currentTarget.checked);\n                if (currentTarget.checked) {\n                    newRequest.timeout = -1;\n                } else {\n                    newRequest.timeout = null;\n                }\n                break;\n            case 'timeout':\n                if (Validation.number.validate(currentTarget.value).error === undefined) {\n                    newRequest.timeout = currentTarget.value;\n                    setInvaildTimeout(false);\n                } else {\n                    newRequest.timeout = null;\n                    setInvaildTimeout(true);\n                }\n                break;\n            default:\n                break;\n        }\n        updateAccessTokenRequest(newRequest);\n    };\n    const {  intl, accessTokenRequest } = props;\n\n    return (\n        <Root>\n            <FormControl variant=\"standard\" margin='normal' className={classes.FormControl}>\n                <FormControlLabel\n                    control={<Checkbox\n                        checked={infiniteValidity}\n                        onChange={e => handleChange('infiniteValidity', e)}\n                        value={accessTokenRequest.timeout}\n                        color='grey'\n                    />}\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key with infinite validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.validity.period.label',\n                    })}\n                />\n                {!infiniteValidity && <TextField\n                    variant=\"standard\"\n                    required\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey',\n                    })}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    helperText={\n                        invalidTimeout ? (\n                            intl.formatMessage({\n                                defaultMessage: 'Please use a valid number for API Key expiry time',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.error',\n                            })\n                        ) : (\n                            intl.formatMessage({\n                                defaultMessage: 'You can set an expiration period to determine the validity period of '\n                                + 'the token after generation. Set this as -1 to ensure that the '\n                                + 'apikey never expires.',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.help',\n                            })\n                        )\n                    }\n                    fullWidth\n                    name='timeout'\n                    onChange={e => handleChange('timeout', e)}\n                    placeholder={intl.formatMessage({\n                        defaultMessage: 'Enter time in seconds',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.enter.time',\n                    })}\n                    value={accessTokenRequest.timeout}\n                    autoFocus\n                    className={classes.inputText}\n                    error={invalidTimeout}\n                />\n                }\n            </FormControl>\n        </Root>\n    );\n};\ntokens.contextTypes = {\n    intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl((tokens));\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport { injectIntl, FormattedMessage } from \"react-intl\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Grid from \"@mui/material/Grid\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemSecondaryAction from \"@mui/material/ListItemSecondaryAction\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Box from \"@mui/material/Box\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Typography from \"@mui/material/Typography\";\nimport Validation from 'AppData/Validation';\n\nconst PREFIX = 'ApiKeyRestriction';\n\nconst classes = {\n  FormControl: `${PREFIX}-FormControl`,\n  outterBox: `${PREFIX}-outterBox`,\n  Fab: `${PREFIX}-Fab`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n  {\n    theme\n  }\n) => ({\n  [`& .${classes.FormControl}`]: {\n    \"margin-bottom\": theme.spacing(1),\n    width: \"100%\",\n    padding: theme.spacing(0, 1),\n  },\n\n  [`& .${classes.outterBox}`]: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    marginLeft: 20,\n    borderColor: '#cccccc',\n  },\n\n  [`& .${classes.Fab}`]: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  }\n}));\n\n/**\n * Used to display IP address and Http Referer restrictions in generate api key UI\n */\nconst apiKeyRestrictions = (props) => {\n  const [invalidIP, setInvalidIP] = useState(false);\n  const [invalidReferer, setInvalidReferer] = useState(false);\n\n  const {\n    intl,\n    newIP,\n    updateNewIp,\n    ipList,\n    updateIpList,\n    restrictSchema,\n    updateRestrictSchema,\n    newReferer,\n    updateNewReferer,\n    refererList,\n    updateRefererList,\n  } = props;\n\n  const onRefererTextUpdate = (e) => {\n    updateNewReferer(e.target.value.trim());\n    if (e.target.value.trim() === \"\") {\n      setInvalidReferer(false);\n    }\n  };\n\n  const addRefererItem = () => {\n    if (newReferer !== null && newReferer !== \"\") {\n      setInvalidReferer(false);\n      refererList.push(newReferer.trim());\n      updateRefererList(refererList);\n      updateNewReferer(\"\");\n    } else {\n      setInvalidReferer(true);\n    }\n  };\n\n  const deleteRefererItem = (refererItem) => {\n    refererList.splice(refererList.indexOf(refererItem), 1);\n    updateRefererList(refererList);\n  };\n\n  const onIpTextUpdate = (e) => {\n    updateNewIp(e.target.value.trim());\n    if (e.target.value.trim() === \"\") {\n      setInvalidIP(false);\n    }\n  };\n\n  const addIpItem = () => {\n    if (newIP !== null && newIP !== \"\") {\n      if (Validation.ipAddress.validate(newIP).error) {\n        setInvalidIP(true);\n      } else {\n        setInvalidIP(false);\n        ipList.push(newIP);\n        updateIpList(ipList);\n        updateNewIp(\"\");\n      }\n    }\n  };\n\n  const deleteIpItem = (ipItem) => {\n    ipList.splice(ipList.indexOf(ipItem), 1);\n    updateIpList(ipList);\n  };\n\n  const onRestrictSchemaChange = (e) => {\n    updateRestrictSchema(e.target.value);\n    updateIpList([]);\n    updateRefererList([]);\n    updateNewIp(\"\");\n    updateNewReferer(\"\");\n    setInvalidIP(false);\n    setInvalidReferer(false);\n  };\n\n  return (\n    <Root>\n      <Box border={1} borderRadius=\"5px\" className={classes.outterBox}>\n        <Typography variant=\"body1\">\n          <FormattedMessage\n              defaultMessage='Key Restrictions'\n              id='Shared.ApiKeyRestriction.key.restrictions'\n          />\n        </Typography>\n        <FormControl variant=\"standard\" component=\"fieldset\">\n          <RadioGroup\n            aria-label=\"API Key Restrictions\"\n            value={restrictSchema}\n            row\n            onChange={onRestrictSchemaChange}\n          >\n            <FormControlLabel\n              value=\"none\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-none'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"None\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.none\",\n              })}\n              labelPlacement=\"end\"\n            />\n            <FormControlLabel\n              value=\"ip\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-ip'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"IP Addresses\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.ip.addresses\",\n              })}\n              labelPlacement=\"end\"\n            />\n            <FormControlLabel\n              value=\"referer\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-referer'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"HTTP Referrers (Web Sites)\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.http.referrers\",\n              })}\n              labelPlacement=\"end\"\n            />\n          </RadioGroup>\n        </FormControl>\n\n        {restrictSchema === \"ip\" && (\n          <Box component=\"div\" id=\"ipPanel\">\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n            >\n              <Grid item md={10} xs={10}>\n                <TextField\n                  label={intl.formatMessage({\n                    defaultMessage: \"IP Address\",\n                    id:\n                      \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.address.label\",\n                  })}\n                  value={newIP}\n                  onChange={onIpTextUpdate}\n                  className={classes.inputText}\n                  helperText={\n                    invalidIP\n                      ? intl.formatMessage({\n                          defaultMessage: \"Invalid IP Address\",\n                          id:\n                            \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.validity.error\",\n                        })\n                      : \"\"\n                  }\n                  error={invalidIP}\n                  size='small'\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  placeholder={intl.formatMessage({\n                    defaultMessage: \"Enter IP Address\",\n                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.ip\",\n                  })}\n                  fullWidth\n                  id='ip-address-txt'\n                />\n              </Grid>\n              <Grid item md={2} xs={2}>\n                <span>\n                  <Fab\n                    className={classes.Fab}\n                    size=\"small\"\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={addIpItem}\n                    id='ip-address-add-btn'\n                  >\n                    <AddIcon />\n                  </Fab>\n                </span>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n              md={10}\n              xs={10}\n            >\n              {ipList.length > 0 && (\n                <List>\n                  {ipList.map((ip, index) => (\n                    <ListItem>\n                      <ListItemText primary={ip} />\n                      <ListItemSecondaryAction>\n                        <Tooltip title={\n                          intl.formatMessage({\n                            defaultMessage: 'Delete task',\n                            id: 'Shared.ApiKeyRestriction.key.restrictions.delete.task.tooltip',\n                          })}\n                          placement=\"top\"\n                        >\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteIpItem(ip)}\n                            size=\"large\">\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </Grid>\n          </Box>\n        )}\n\n        {restrictSchema === \"referer\" && (\n          <Box component=\"div\" id=\"refererPanel\">\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n            >\n              <Grid item md={10} xs={10}>\n                <TextField\n                  label={intl.formatMessage({\n                    defaultMessage: \"Referer\",\n                    id:\n                      \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.referer.label\",\n                  })}\n                  value={newReferer}\n                  onChange={onRefererTextUpdate}\n                  className={classes.inputText}\n                  helperText={\n                    invalidReferer\n                      ? intl.formatMessage({\n                          defaultMessage: \"Invalid Http Referer\",\n                          id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.referer.validity.error\",\n                        })\n                      : \"\"\n                  }\n                  error={invalidReferer}\n                  size='small'\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  placeholder={intl.formatMessage({\n                    defaultMessage: \"Enter Http Referer\",\n                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.referer\",\n                  })}\n                  fullWidth\n                  id='referer-txt'\n                />\n              </Grid>\n              <Grid item md={2} xs={2}>\n                <span>\n                  <Fab\n                  size=\"small\"\n                    className={classes.Fab}\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={addRefererItem}\n                  id='referer-add-btn'\n                  >\n                    <AddIcon />\n                  </Fab>\n                </span>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n              md={10}\n              xs={10}\n            >\n              {refererList.length > 0 && (\n                <List>\n                  {refererList.map((referer, index) => (\n                    <ListItem>\n                      <ListItemText primary={referer} />\n                      <ListItemSecondaryAction>\n                        <Tooltip title={\n                          intl.formatMessage({\n                            defaultMessage: 'Delete task',\n                            id: 'Shared.ApiKeyRestriction.key.restrictions.delete.task.tooltip',\n                          })}\n                          placement=\"top\"\n                        >\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteRefererItem(referer)}\n                            size=\"large\">\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </Grid>\n          </Box>\n        )}\n      </Box>\n    </Root>\n  );\n};\napiKeyRestrictions.contextTypes = {\n  intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl((apiKeyRestrictions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormGroup from '@mui/material/FormGroup';\nimport Grid from '@mui/material/Grid';\nimport ViewToken from './ViewToken';\nimport ApiKey from '../ApiKey';\nimport ApiKeyRestriction from '../ApiKeyRestriction';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst PREFIX = 'ApiKeyManager';\n\nconst classes = {\n  root: `${PREFIX}-root`,\n  dialog: `${PREFIX}-dialog`,\n  button: `${PREFIX}-button`,\n  tokenSection: `${PREFIX}-tokenSection`,\n  margin: `${PREFIX}-margin`,\n  keyConfigWrapper: `${PREFIX}-keyConfigWrapper`,\n  generateWrapper: `${PREFIX}-generateWrapper`,\n  paper: `${PREFIX}-paper`,\n  dialogTitle: `${PREFIX}-dialogTitle`,\n  dialogContent: `${PREFIX}-dialogContent`,\n  formGroup: `${PREFIX}-formGroup`,\n  gridWrapper: `${PREFIX}-gridWrapper`,\n  keyTitle: `${PREFIX}-keyTitle`,\n  cardBody: `${PREFIX}-cardBody`,\n  generateKey: `${PREFIX}-generateKey`\n};\n\nconst StyledGrid = styled(Grid)((\n  {\n    theme\n  }\n) => ({\n  [`& .${classes.root}`]: {\n    padding: theme.spacing(3),\n    '& span, & h5, & label, & input': {\n      color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n  },\n\n  [`& .${classes.dialog}`]: {\n    '& span, & h2, & label': {\n      color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n  },\n\n  [`& .${classes.button}`]: {\n    '& span': {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    }\n  },\n\n  [`& .${classes.tokenSection}`]: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n\n  [`& .${classes.margin}`]: {\n    marginRight: theme.spacing(2),\n  },\n\n  [`& .${classes.keyConfigWrapper}`]: {\n    flexDirection: 'column',\n    marginBottom: 0,\n  },\n\n  [`& .${classes.generateWrapper}`]: {\n    padding: '10px',\n    'margin-inline-end': 'auto',\n  },\n\n  [`& .${classes.paper}`]: {\n    display: 'flex',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(10),\n  },\n\n  [`& .${classes.dialogTitle}`]: {\n    padding: '24px 24px 0px',\n  },\n\n  [`& .${classes.dialogContent}`]: {\n    padding: '0 24px 0px',\n  },\n\n  [`& .${classes.formGroup}`]: {\n    padding: '20px',\n  },\n\n  [`& .${classes.gridWrapper}`]: {\n    'align-self': 'center',\n  },\n\n  [`& .${classes.keyTitle}`]: {\n    textTransform: 'capitalize',\n  },\n\n  [`& .${classes.cardBody}`]: {\n    padding: theme.spacing(1),\n    lineHeight: 2,\n  },\n\n  [`& .${classes.generateKey}`]: {\n    '& span': {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    }\n  }\n}));\n\nclass ApiKeyManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apikey: null,\n      open: false,\n      showToken: false,\n      accessTokenRequest: {\n        timeout: -1,\n      },\n      ipList: [],\n      newIP: null,\n      restrictSchema: 'none',\n      refererList: [],\n      newReferer: null,\n      isGenerating: false,\n    };\n  }\n\n  updateIpList = (ipList) => {\n    this.setState(() => ({ ipList }));\n  };\n\n  updateNewIp = (newIP) => {\n    this.setState(() => ({ newIP }));\n  };\n\n  updateRefererList = (refererList) => {\n    this.setState(() => ({ refererList }));\n  };\n\n  updateNewReferer = (newReferer) => {\n    this.setState(() => ({ newReferer }));\n  };\n\n  updateRestrictSchema = (restrictSchema) => {\n    this.setState(() => ({ restrictSchema }));\n  }\n\n  handleClose = () => {\n    this.setState(() => ({ open: false, accessTokenRequest: { timeout: -1 } }));\n  }\n\n  handleClickOpen = () => {\n    this.setState(() => ({ open: true, showToken: false }));\n  }\n\n  updateAccessTokenRequest = (accessTokenRequest) => {\n    this.setState(() => ({ accessTokenRequest }));\n  }\n\n  generateKeys = () => {\n    const { selectedApp, keyType } = this.props;\n    this.setState({isGenerating: true});\n    const client = new API();\n    const restrictions = {\n      permittedIP: this.state.ipList.join(\",\"),\n      permittedReferer: this.state.refererList.join(\",\"),\n    };\n    const promisedKey = client.generateApiKey(selectedApp.appId, keyType,\n      this.state.accessTokenRequest.timeout, restrictions);\n\n    promisedKey\n      .then((response) => {\n        console.log('Non empty response received');\n        const apikey = { accessToken: response.body.apikey, validityTime: response.body.validityTime, isOauth: false };\n        this.setState(() => ({\n          apikey, open: true, showToken: true,\n          ipList: [], refererList: []\n        }));\n        this.setState({isGenerating: false});\n      })\n      .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(error);\n        }\n        const { status } = error;\n        if (status === 404) {\n          this.setState({\n            notFound: true, ipList: [],\n            refererList: []\n          });\n        }\n        this.setState({isGenerating: false});\n      });\n  }\n\n  render() {\n    const {\n      showToken, accessTokenRequest, open, apikey, newIP, ipList,\n      newReferer, refererList, restrictSchema, isGenerating,\n    } = this.state;\n    return (\n      <StyledGrid container direction=\"row\" spacing={0} justifyContent=\"left\" alignItems=\"left\">\n        <Grid item md={5} xs={12}>\n          <ApiKeyRestriction\n            updateNewIp={this.updateNewIp}\n            newIP={newIP}\n            updateIpList={this.updateIpList}\n            ipList={ipList}\n            restrictSchema={restrictSchema}\n            updateRestrictSchema={this.updateRestrictSchema}\n            refererList={refererList}\n            newReferer={newReferer}\n            updateNewReferer={this.updateNewReferer}\n            updateRefererList={this.updateRefererList}\n          />\n          <FormGroup row className={classes.formGroup}>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClickOpen}\n              className={classes.generateKey}\n              id='generate-key-btn'\n            >\n              {this.props.intl.formatMessage({\n                id: 'Shared.AppsAndKeys.ApiKeyManager.generate.key.btn',\n                defaultMessage: 'Generate Key'})}\n            </Button>\n            <Typography\n              component=\"div\"\n              variant=\"body2\"\n              className={classes.formLabel}\n            >\n              <FormattedMessage\n                id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n                defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n              />\n            </Typography>\n          </FormGroup>\n          <Dialog\n            open={open}\n            onClose={this.handleClose}\n            aria-labelledby=\"form-dialog-title\"\n            className={classes.dialog}\n          >\n            <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n              {this.props.intl.formatMessage({\n                id: 'Shared.AppsAndKeys.ApiKeyManager.generate.api.key.btn',\n                defaultMessage: 'Generate API Key'})}\n            </DialogTitle>\n            <DialogContent className={classes.dialogContent}>\n              <DialogContentText>\n                {!showToken && (\n                  <ApiKey\n                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n                    accessTokenRequest={accessTokenRequest}\n                  />\n                )}\n                {showToken && <ViewToken token={apikey} />}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              {!showToken && (\n                <Button\n                  onClick={this.generateKeys}\n                  disabled={!accessTokenRequest.timeout || isGenerating}\n                  color=\"primary\"\n                  variant='contained'\n                  className={classes.button}\n                  id='generate-api-keys-btn'\n                >\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n                    defaultMessage=\"Generate\"\n                  />\n                   {isGenerating && <CircularProgress size={24} />}\n                </Button>\n              )}\n              <Button onClick={this.handleClose} color=\"grey\" autoFocus id='generate-api-keys-close-btn'>\n                <FormattedMessage\n                  id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n                  defaultMessage=\"Close\"\n                />\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Grid>\n        {restrictSchema === \"ip\" && (\n          <Grid item md={5} xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.heading\"\n                    defaultMessage=\"Examples of IP Addresses allowed\"\n                  />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\" className={classes.cardBody}>\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.content\"\n                    defaultMessage={\n                      \"Specify one IPv4 or IPv6 or a subnet using CIDR notation{linebreak}Examples: {ip1}, {ip2}, {ip3} or {ip4}\"\n                    }\n                    values={{\n                      linebreak: <br />,\n                      ip1: <b>192.168.1.2</b>,\n                      ip2: <b>152.12.0.0/13</b>,\n                      ip3: <b>2002:eb8::2</b>,\n                      ip4: <b>1001:ab8::/44</b>,\n                    }}\n                  />\n                </Typography>\n\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n        {restrictSchema === \"referer\" && (\n          <Grid item md={5} xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.referer.example.heading\"\n                    defaultMessage=\"Examples of URLs allowed to restrict websites\"\n                  />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\" className={classes.cardBody}>\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.content.message\"\n                    defaultMessage={\n                      \"A specific URL with an exact path: {url1}{linebreak}Any URL in a single subdomain, using a wildcard asterisk (*): {url2}{linebreak}Any subdomain or path URLs in a single domain, using wildcard asterisks (*): {url3}\"\n                    }\n                    values={{\n                      linebreak: <br />,\n                      url1: <b>www.example.com/path</b>,\n                      url2: <b>sub.example.com/*</b>,\n                      url3: <b>*.example.com/*</b>,\n                    }}\n                  />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n      </StyledGrid>\n    );\n  }\n}\n\nApiKeyManager.propTypes = {\n  classes: PropTypes.shape({}).isRequired,\n  selectedApp: PropTypes.shape({\n    tokenType: PropTypes.string.isRequired,\n  }).isRequired,\n  keyType: PropTypes.string.isRequired,\n  intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl((ApiKeyManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport { useTheme } from '@mui/material';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../../Shared/ScopeValidation';\n\nconst PREFIX = 'SubscriptionPolicySelectLegacy';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    buttonGap: `${PREFIX}-buttonGap`,\n    select: `${PREFIX}-select`,\n};\n\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`&.${classes.root}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.buttonGap}`]: {\n        background: theme.palette.grey[300],\n        marginLeft: 20,\n        '& span span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n\n    [`& .${classes.select}`]: {\n        width: 100,\n    },\n}));\n\n/**\n * @class SubscriptionPolicySelectLegacy\n * @extends {React.Component}\n */\nclass SubscriptionPolicySelectLegacy extends React.Component {\n    /**\n     * Create instance of SubscriptionPolicySelectLegacy\n     * @param {JSON} props Props pass from the parent.\n     * @returns {void}\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedPolicy: null,\n        };\n    }\n\n    /**\n     * Calls when component did mount.\n     * @returns {void}\n     */\n    componentDidMount() {\n        const { policies } = this.props;\n\n        this.setState({ selectedPolicy: policies[0] });\n    }\n\n    /**\n     * renders method.\n     * @returns {JSX} Policy selection component.\n     */\n    render() {\n        const {\n            policies, apiId, handleSubscribe, applicationId,\n        } = this.props;\n        const { selectedPolicy } = this.state;\n\n        return (\n            policies\n            && (\n                <Root className={classes.root}>\n                    <Autocomplete\n                        id='policy-select'\n                        disableClearable\n                        options={policies}\n                        value={selectedPolicy}\n                        onChange={(e, value) => {\n                            this.setState({ selectedPolicy: value });\n                        }}\n                        style={{ width: 200 }}\n                        renderInput={(params) => (<TextField size='small' variant='standard' {...params} />)}\n                        renderOption={(props, policy) => (\n                            <MenuItem\n                                {...props}\n                                value={policy}\n                                key={policy}\n                                id={'policy-select-' + policy}\n                            >\n                                {policy}\n                            </MenuItem>\n                        )}\n                    />\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SUBSCRIPTIONS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        <Button\n                            variant='contained'\n                            size='small'\n                            color='grey'\n                            className={classes.buttonGap}\n                            onClick={() => {\n                                handleSubscribe(applicationId, apiId, selectedPolicy);\n                            }}\n                            id={'policy-subscribe-btn-' + apiId}\n                        >\n                            <FormattedMessage\n                                defaultMessage='Subscribe'\n                                id='Apis.Listing.SubscriptionPolicySelect.subscribe'\n                            />\n                        </Button>\n                    </ScopeValidation>\n                </Root>\n            )\n        );\n    }\n}\n\nSubscriptionPolicySelectLegacy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    policies: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    handleSubscribe: PropTypes.func.isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nfunction SubscriptionPolicySelect(props) {\n    const {\n        key, policies, apiId, handleSubscribe, applicationId,\n    } = props;\n    const theme = useTheme();\n    return (\n        <SubscriptionPolicySelectLegacy\n            key={key}\n            policies={policies}\n            apiId={apiId}\n            handleSubscribe={handleSubscribe}\n            applicationId={applicationId}\n            theme={theme}\n        />\n    );\n}\n\nexport default (SubscriptionPolicySelect);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from 'mui-datatables';\nimport { injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport NoApi from 'AppComponents/Apis/Listing/NoApi';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport SubscriptionPolicySelect from './SubscriptionPolicySelect';\n\nconst PREFIX = 'APICardView';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    buttonGap: `${PREFIX}-buttonGap`,\n};\n\nconst Root = styled('div')(() => ({\n    [`& .${classes.root}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.buttonGap}`]: {\n        marginRight: 10,\n    },\n}));\n\n/**\n * @class APICardView\n * @param {number} page page number\n * @extends {React.Component}\n */\nclass APICardView extends React.Component {\n    /**\n     * @param {JSON} props properties passed from parent\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null,\n            loading: true,\n        };\n        this.page = 0;\n        this.count = 100;\n        this.rowsPerPage = 10;\n        this.pageType = null;\n    }\n\n    /**\n     * component mount callback\n     */\n    componentDidMount() {\n        this.getData();\n    }\n\n    /**\n     * @param {JSON} prevProps props from previous component instance\n     */\n    componentDidUpdate(prevProps) {\n        const { subscriptions, searchText } = this.props;\n        if (subscriptions.length !== prevProps.subscriptions.length) {\n            this.getData();\n        } else if (searchText !== prevProps.searchText) {\n            this.page = 0;\n            this.getData();\n        }\n    }\n\n    // get data\n    getData = () => {\n        const { intl } = this.props;\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list, pagination } = body;\n                const { total } = pagination;\n                this.count = total;\n                this.setState({ data: this.updateUnsubscribedAPIsList(list) });\n            })\n            .catch((error) => {\n                const { response } = error;\n                const { setTenantDomain } = this.props;\n                if (response && response.body.code === 901300) {\n                    setTenantDomain('INVALID');\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Invalid tenant domain',\n                        id: 'Apis.Listing.ApiTableView.invalid.tenant.domain',\n                    }));\n                } else {\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Error While Loading APIs',\n                        id: 'Apis.Listing.ApiTableView.error.loading',\n                    }));\n                }\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    /**\n    *\n    * Get List of the Ids of all APIs that have been already subscribed\n    *\n    * @returns {*} Ids of respective APIs\n    * @memberof APICardView\n    */\n    getIdsOfSubscribedEntities() {\n        const { subscriptions } = this.props;\n\n        // Get arrays of the API Ids and remove all null/empty references by executing 'fliter(Boolean)'\n        const subscribedAPIIds = subscriptions.map((sub) => sub.apiId).filter(Boolean);\n\n        return subscribedAPIIds;\n    }\n\n    changePage = (page) => {\n        const { intl } = this.props;\n        this.page = page;\n        this.setState({ loading: true });\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list } = body;\n                this.setState({\n                    data: this.updateUnsubscribedAPIsList(list),\n                });\n            })\n            .catch(() => {\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error While Loading APIs',\n                    id: 'Apis.Listing.ApiTableView.error.loading',\n                }));\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    xhrRequest = () => {\n        const { searchText } = this.props;\n        const { page, rowsPerPage } = this;\n        const api = new API();\n\n        if (searchText && searchText !== '') {\n            return api.getAllAPIs({ query: `${searchText} status:published`, limit: this.rowsPerPage, offset: page * rowsPerPage });\n        } else {\n            return api.getAllAPIs({ query: 'status:published', limit: this.rowsPerPage, offset: page * rowsPerPage });\n        }\n    };\n\n    /**\n    * Update list of unsubscribed APIs\n    * @param {Array} list array of apis\n    * @returns {Array} filtered list of apis\n    * @memberof APICardView\n    */\n    updateUnsubscribedAPIsList(list) {\n        const listLocal = list;\n        const subscribedIds = this.getIdsOfSubscribedEntities();\n        for (let i = 0; i < listLocal.length; i++) {\n            if (!((!subscribedIds.includes(listLocal[i].id) && !listLocal[i].advertiseInfo.advertised)\n                && listLocal[i].isSubscriptionAvailable)) {\n                listLocal[i].throttlingPolicies = null;\n            }\n        }\n        return listLocal;\n        // return unsubscribedAPIList;\n    }\n\n    /**\n     * @returns {JSX} render api card view\n     * @memberof APICardView\n     */\n    render() {\n        const { apisNotFound } = this.props;\n        const { loading, data } = this.state;\n        const { page, count, rowsPerPage } = this;\n\n        if (apisNotFound) {\n            return <ResourceNotFound />;\n        }\n\n        const {\n            handleSubscribe, applicationId, intl,\n        } = this.props;\n        const columns = [\n            {\n                name: 'id',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.id',\n                    defaultMessage: 'Id',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'isSubscriptionAvailable',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.isSubscriptionAvailable',\n                    defaultMessage: 'Is Subscription Available',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'name',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.name',\n                    defaultMessage: 'Name',\n                }),\n            },\n            {\n                name: 'version',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.version',\n                    defaultMessage: 'Version',\n                }),\n            },\n            {\n                name: 'throttlingPolicies',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.subscription.status',\n                    defaultMessage: 'Subscription Status',\n                }),\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const apiId = tableMeta.rowData[0];\n                            const isSubscriptionAvailable = tableMeta.rowData[1];\n                            const policies = value;\n                            if (!isSubscriptionAvailable) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.not.allowed',\n                                    defaultMessage: 'Not Allowed',\n                                }));\n                            }\n                            if (!policies) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.already.subscribed',\n                                    defaultMessage: 'Subscribed',\n                                }));\n                            }\n                            return (\n                                <SubscriptionPolicySelect\n                                    key={apiId}\n                                    policies={policies}\n                                    apiId={apiId}\n                                    handleSubscribe={(app, api, policy) => handleSubscribe(app, api, policy)}\n                                    applicationId={applicationId}\n                                />\n                            );\n                        }\n                        return <span />;\n                    },\n                },\n            },\n        ];\n        const options = {\n            search: false,\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            responsive: 'stacked',\n            serverSide: true,\n            count,\n            page,\n            onTableChange: (action, tableState) => {\n                switch (action) {\n                    case 'changePage':\n                        this.changePage(tableState.page);\n                        break;\n                    default:\n                        break;\n                }\n            },\n            selectableRows: 'none',\n            rowsPerPage,\n            onChangeRowsPerPage: (numberOfRows) => {\n                const { page: pageInner, count: countInner } = this;\n                if (pageInner * numberOfRows > countInner) {\n                    this.page = 0;\n                }\n                this.rowsPerPage = numberOfRows;\n                this.getData();\n            },\n            textLabels: {\n                pagination: {\n                    rowsPerPage: intl.formatMessage({\n                        id: 'Apis.Listing.APICardView.rows.per.page',\n                        defaultMessage: 'Rows per page',\n                    }),\n                },\n            },\n        };\n        if (loading) {\n            return <Loading />;\n        }\n        if ((data && data.length === 0) || !data) {\n            return <NoApi />;\n        }\n        return (\n            <Root id='subscribe-to-api-table'>\n                <MUIDataTable\n                    title=''\n                    data={data}\n                    columns={columns}\n                    options={options}\n                />\n            </Root>\n        );\n    }\n}\n\nAPICardView.propTypes = {\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default injectIntl((APICardView));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport MUIDataTable from 'mui-datatables';\nimport Icon from '@mui/material/Icon';\nimport { FormattedMessage } from 'react-intl';\nimport Subscription from 'AppData/Subscription';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\n\nconst PREFIX = 'Invoice';\n\nconst classes = {\n    dialogWrapper: `${PREFIX}-dialogWrapper`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.dialogWrapper}`]: {\n        '& span,& p , & h5, & label, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& div, & input, & p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n}));\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\n/**\n *\n * @param {JSON} props props passed from parent\n * @returns {JSX} jsx output\n */\nfunction Invoice(props) {\n    const {\n        subscriptionId, tiers,\n    } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n     * Handle the popup for invoice\n     */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        const client = new Subscription();\n        const promiseInvoice = client.getMonetizationInvoice(subscriptionId);\n        promiseInvoice.then((response) => {\n            if (response && response.obj) {\n                const invoiceData = [];\n                const { obj: { properties } } = response;\n                Object.keys(properties).forEach((invoiveItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiveItem);\n                    insideArray.push(properties[invoiveItem]);\n                    invoiceData.push(insideArray);\n                });\n                setInvoice(invoiceData);\n            }\n        }).catch((error) => {\n            console.error(error);\n            setShowErrorPopup(true);\n        });\n    };\n\n    /**\n     * Handle closing the popup for invoice\n     */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <Root>\n            <Button\n                color='grey'\n                onClick={handlePopup}\n                startIcon={<Icon>receipt</Icon>}\n                disabled={tiers.length === 0}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            {invoice ? (\n                <Dialog\n                    open={showPopup}\n                    onClose={handleClose}\n                    fullWidth='true'\n                    className={classes.dialogWrapper}\n                >\n                    {invoice && (\n                        <MUIDataTable\n                            title='Upcoming Invoice'\n                            data={invoice}\n                            columns={columns}\n                            options={options}\n                        />\n                    )}\n                </Dialog>\n            ) : (\n                <Dialog\n                    open={showErrorPopup}\n                    onClose={handleAlertClose}\n                    fullWidth='true'\n                    className={classes.dialogWrapper}\n                >\n                    <DialogTitle>\n                        <FormattedMessage\n                            id='Applications.Details.Invoice.no.data.available'\n                            defaultMessage='No Data Available'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='invoice-dialog-description'>\n                            <FormattedMessage\n                                id='Applications.Details.Invoice.pending.invoice.data'\n                                defaultMessage='Pending invoice data not found for this subscription.'\n                            />\n\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleAlertClose} color='primary'>\n                            <FormattedMessage\n                                id='Applications.Details.Invoice.close'\n                                defaultMessage='Close'\n                            />\n\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </Root>\n    );\n}\nInvoice.defaultProps = {\n    tiers: [],\n};\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n    tiers: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default (Invoice);\n","/* eslint-disable no-nested-ternary */\n/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport Icon from '@mui/material/Icon';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport Slide from '@mui/material/Slide';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { FormattedMessage } from 'react-intl';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport Subscription from 'AppData/Subscription';\nimport { mdiOpenInNew } from '@mdi/js';\nimport { Icon as MDIcon } from '@mdi/react';\nimport Invoice from './Invoice';\n\n/**\n *\n *\n * @class SubscriptionTableData\n * @extends {React.Component}\n */\nclass SubscriptionTableData extends React.Component {\n    /**\n     *Creates an instance of SubscriptionTableData.\n     * @param {*} props properties\n     * @memberof SubscriptionTableData\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openMenu: false,\n            openMenuEdit: false,\n            isMonetizedAPI: false,\n            isDynamicUsagePolicy: false,\n            tiers: [],\n            selectedTier: '',\n        };\n        this.handleRequestClose = this.handleRequestClose.bind(this);\n        this.handleRequestOpen = this.handleRequestOpen.bind(this);\n        this.handleRequestDelete = this.handleRequestDelete.bind(this);\n        this.checkIfDynamicUsagePolicy = this.checkIfDynamicUsagePolicy.bind(this);\n        this.checkIfMonetizedAPI = this.checkIfMonetizedAPI.bind(this);\n        this.populateSubscriptionTiers = this.populateSubscriptionTiers.bind(this);\n        this.handleSubscriptionTierUpdate = this.handleSubscriptionTierUpdate.bind(this);\n        this.handleRequestCloseEditMenu = this.handleRequestCloseEditMenu.bind(this);\n        this.handleRequestOpenEditMenu = this.handleRequestOpenEditMenu.bind(this);\n        this.setSelectedTier = this.setSelectedTier.bind(this);\n    }\n\n    componentDidMount() {\n        this.checkIfMonetizedAPI(this.props.subscription.apiId);\n        this.checkIfDynamicUsagePolicy(this.props.subscription.subscriptionId);\n        this.populateSubscriptionTiers(this.props.subscription.apiId);\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    setSelectedTier(e) {\n        this.setState({ selectedTier: e });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription delete\n     * @param {*} subscriptionId subscription id\n     * @memberof SubscriptionTableData\n     */\n    handleRequestDelete(subscriptionId) {\n        const { handleSubscriptionDelete } = this.props;\n        this.setState({ openMenu: false });\n        if (handleSubscriptionDelete) {\n            handleSubscriptionDelete(subscriptionId);\n        }\n    }\n\n    /**\n     *\n     *\n     * @memberof SubscriptionTableData\n     */\n    handleRequestCloseEditMenu() {\n        this.setState({ openMenuEdit: false });\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpenEditMenu() {\n        this.setState({ openMenuEdit: true });\n    }\n\n    /**\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpen() {\n        this.setState({ openMenu: true });\n    }\n\n    /**\n     * @memberof SubscriptionTableData\n     */\n    handleRequestClose() {\n        this.setState({ openMenu: false });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription update\n     * @param {*} apiId subscription id\n     * @param {*} subscriptionId subscription id\n     * @param {*} throttlingPolicy throttling tier\n     * @param {*} status subscription status\n     * @memberof SubscriptionTableData\n     */\n    handleSubscriptionTierUpdate(apiId, subscriptionId, requestedThrottlingPolicy, status, currentThrottlingPolicy) {\n        const { handleSubscriptionUpdate } = this.props;\n        this.setState({ openMenuEdit: false });\n        if (handleSubscriptionUpdate) {\n            handleSubscriptionUpdate(apiId, subscriptionId, currentThrottlingPolicy, status, requestedThrottlingPolicy);\n        }\n    }\n\n    /**\n     * Getting the policies from api details\n     *\n     */\n    populateSubscriptionTiers(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const api = JSON.parse(response.data);\n                const apiTiers = api.tiers;\n                const tiers = [];\n                for (let i = 0; i < apiTiers.length; i++) {\n                    const { tierName } = apiTiers[i];\n                    tiers.push({ value: tierName, label: tierName });\n                }\n                this.setState({ tiers });\n            }\n        });\n    }\n\n    /**\n     * Check if the API is monetized\n     * @param apiUUID API UUID\n     */\n    checkIfMonetizedAPI(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const apiData = JSON.parse(response.data);\n                this.setState({ isMonetizedAPI: apiData.monetization.enabled });\n            }\n        });\n    }\n\n    /**\n     * Check if the policy is dynamic usage type\n     * @param subscriptionUUID subscription UUID\n     */\n    checkIfDynamicUsagePolicy(subscriptionUUID) {\n        const client = new Subscription();\n        const promisedSubscription = client.getSubscription(subscriptionUUID);\n        promisedSubscription.then((response) => {\n            if (response && response.body) {\n                const subscriptionData = JSON.parse(response.data);\n                if (subscriptionData.throttlingPolicy) {\n                    const apiClient = new Api();\n                    const promisedPolicy = apiClient.getTierByName(subscriptionData.throttlingPolicy, 'subscription');\n                    promisedPolicy.then((policyResponse) => {\n                        const policyData = JSON.parse(policyResponse.data);\n                        if (policyData.monetizationAttributes.billingType\n                             && (policyData.monetizationAttributes.billingType\n                                === 'DYNAMICRATE')) {\n                            this.setState({ isDynamicUsagePolicy: true });\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n    * @inheritdoc\n    * @memberof SubscriptionTableData\n    */\n    render() {\n        const {\n            subscription: {\n                apiInfo, status, throttlingPolicy, subscriptionId, apiId, requestedThrottlingPolicy, applicationId,\n            },\n        } = this.props;\n        const {\n            openMenu, isMonetizedAPI, isDynamicUsagePolicy, openMenuEdit, selectedTier, tiers,\n        } = this.state;\n        let link = (\n            <Link\n                to={tiers.length === 0 ? '' : '/apis/' + apiId}\n                style={{ cursor: tiers.length === 0 ? 'default' : '' }}\n                external\n            >\n                {apiInfo.name + ' - ' + apiInfo.version + ' '}\n                <MDIcon path={mdiOpenInNew} size='12px' />\n            </Link>\n        );\n        if (apiInfo.type === 'WEBSUB') {\n            link = (\n                <Link\n                    to={tiers.length === 0 ? '' : '/applications/' + applicationId + '/webhooks/' + apiId}\n                    style={{ cursor: tiers.length === 0 ? 'default' : '' }}\n                >\n                    {apiInfo.name + ' - ' + apiInfo.version}\n                </Link>\n            );\n        }\n        return (\n            <TableRow hover>\n                <TableCell>\n                    { link }\n                </TableCell>\n                <TableCell>{apiInfo.lifeCycleStatus}</TableCell>\n                <TableCell>{throttlingPolicy}</TableCell>\n                <TableCell>{status}</TableCell>\n                <TableCell>\n                    <Button\n                        id={'edit-api-subscription-' + apiId}\n                        color='grey'\n                        onClick={this.handleRequestOpenEditMenu}\n                        startIcon={<Icon>edit</Icon>}\n                        disabled={tiers.length === 0}\n                    >\n                        <FormattedMessage\n                            id='Applications.Details.SubscriptionTableData.edit.text'\n                            defaultMessage='Edit'\n                        />\n                    </Button>\n                    <Dialog open={openMenuEdit} transition={Slide}>\n                        <DialogTitle>\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.update.subscription'\n                                defaultMessage='Update Subscription'\n                            />\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.update.business.plan'\n                                    defaultMessage='Current Business Plan : '\n                                />\n                                {throttlingPolicy}\n                                <div>\n                                    { (status === 'BLOCKED')\n                                        ? (\n                                            <FormattedMessage\n                                                id={'Applications.Details.SubscriptionTableData.update.'\n                                                + 'throttling.policy.blocked'}\n                                                defaultMessage={'Subscription is in BLOCKED state. '\n                                                + 'You need to unblock the subscription in order to edit the tier'}\n                                            />\n                                        )\n                                        : (status === 'ON_HOLD')\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Applications.Details.SubscriptionTableData.update.'\n                                                    + 'throttling.policy.onHold'}\n                                                    defaultMessage={'Subscription is currently ON_HOLD state.'\n                                                    + ' You need to get approval to the subscription before editing the tier'}\n                                                />\n                                            )\n                                            : (status === 'REJECTED')\n                                                ? (\n                                                    <FormattedMessage\n                                                        id={'Applications.Details.SubscriptionTableData.update.'\n                                                        + 'throttling.policy.rejected'}\n                                                        defaultMessage={'Subscription is currently REJECTED state.'\n                                                        + ' You need to get approval to the subscription before editing the tier'}\n                                                    />\n                                                )\n                                                : (status === 'TIER_UPDATE_PENDING')\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Applications.Details.SubscriptionTableData.update.'\n                                                            + 'throttling.policy.tierUpdatePending'}\n                                                            defaultMessage={'Subscription is currently TIER_UPDATE_PENDING state.'\n                                                            + ' You need to get approval to the existing subscription edit request'\n                                                            + ' before editing the tier'}\n                                                        />\n                                                    )\n                                                    : (\n                                                        <div>\n                                                            <Autocomplete\n                                                                id='application-policy'\n                                                                disableClearable\n                                                                options={tiers}\n                                                                getOptionLabel={(option) => option.label ?? option}\n                                                                getOptionSelected={(option, value) => option.value === value}\n                                                                value={selectedTier}\n                                                                onChange={(e, newValue) => this.setSelectedTier(newValue.value)}\n                                                                renderInput={(params) => (\n                                                                    <TextField\n                                                                        id='outlined-select-currency'\n                                                                        name='throttlingPolicy'\n                                                                        required\n                                                                        {...params}\n                                                                        label={(\n                                                                            <FormattedMessage\n                                                                                defaultMessage='Business Plan'\n                                                                                id={'Applications.Details.SubscriptionTableData.'\n                                                                                + 'update.business.plan.name'}\n                                                                            />\n                                                                        )}\n                                                                        helperText={(\n                                                                            <FormattedMessage\n                                                                                defaultMessage={'Assign a new Business plan to the '\n                                                                                + 'existing subscription'}\n                                                                                id={'Applications.Details.SubscriptionTableData.'\n                                                                                + 'update.throttling.policy.helper'}\n                                                                            />\n                                                                        )}\n                                                                        margin='normal'\n                                                                        variant='outlined'\n                                                                    />\n                                                                )}\n                                                            />\n                                                            { (status === 'TIER_UPDATE_PENDING')\n                                                        && (\n                                                            <div>\n                                                                <FormattedMessage\n                                                                    id={'Applications.Details.SubscriptionTableData.update.'\n                                                                    + 'throttling.policy.tier.update'}\n                                                                    defaultMessage='Pending Tier Update : '\n                                                                />\n                                                                {requestedThrottlingPolicy}\n                                                            </div>\n                                                        )}\n                                                        </div>\n                                                    )}\n                                </div>\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button dense color='grey' onClick={this.handleRequestCloseEditMenu}>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                            <Button\n                                variant='contained'\n                                disabled={(status === 'BLOCKED' || status === 'ON_HOLD' || status === 'REJECTED'\n                                || status === 'TIER_UPDATE_PENDING')}\n                                dense\n                                color='primary'\n                                onClick={() => this.handleSubscriptionTierUpdate(apiId,\n                                    subscriptionId, selectedTier, status, throttlingPolicy)}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.update'\n                                    defaultMessage='Update'\n                                />\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                        resourceMethod={resourceMethods.DELETE}\n                    >\n                        <Button\n                            id={'delete-api-subscription-' + apiId}\n                            color='grey'\n                            onClick={this.handleRequestOpen}\n                            startIcon={<Icon>delete</Icon>}\n                            disabled={tiers.length === 0 || status === 'DELETE_PENDING'}\n                        >\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.delete.text'\n                                defaultMessage='Delete'\n                            />\n                        </Button>\n                    </ScopeValidation>\n\n                    <Dialog open={openMenu} transition={Slide}>\n                        <DialogTitle>\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation.dialog.title'\n                                defaultMessage='Confirm'\n                            />\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation'\n                                    defaultMessage='Are you sure you want to delete the Subscription?'\n                                />\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button dense color='grey' onClick={this.handleRequestClose}>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                            <Button\n                                id='delete-api-subscription-confirm-btn'\n                                dense\n                                variant='contained'\n                                color='primary'\n                                onClick={() => this.handleRequestDelete(subscriptionId)}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.delete'\n                                    defaultMessage='Delete'\n                                />\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                    { isMonetizedAPI && (\n                        <Invoice\n                            tiers={tiers}\n                            subscriptionId={subscriptionId}\n                            isDynamicUsagePolicy={isDynamicUsagePolicy}\n                        />\n                    ) }\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\nSubscriptionTableData.propTypes = {\n    subscription: PropTypes.shape({\n        apiInfo: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            version: PropTypes.string.isRequired,\n            lifeCycleStatus: PropTypes.string.isRequired,\n        }).isRequired,\n        throttlingPolicy: PropTypes.string.isRequired,\n        subscriptionId: PropTypes.string.isRequired,\n        apiId: PropTypes.string.isRequired,\n        status: PropTypes.string.isRequired,\n        requestedThrottlingPolicy: PropTypes.string.isRequired,\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    handleSubscriptionUpdate: PropTypes.func.isRequired,\n};\nexport default SubscriptionTableData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport MuiDialogTitle from '@mui/material/DialogTitle';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Progress from 'AppComponents/Shared/Progress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIList from 'AppComponents/Apis/Listing/APICardView';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Subscription from 'AppData/Subscription';\nimport Api from 'AppData/api';\nimport { app } from 'Settings';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport SubscriptionTableData from './SubscriptionTableData';\n\nconst PREFIX = 'Subscriptions';\n\nconst classes = {\n    searchRoot: `${PREFIX}-searchRoot`,\n    input: `${PREFIX}-input`,\n    iconButton: `${PREFIX}-iconButton`,\n    divider: `${PREFIX}-divider`,\n    root: `${PREFIX}-root`,\n    subscribePop: `${PREFIX}-subscribePop`,\n    firstCell: `${PREFIX}-firstCell`,\n    cardTitle: `${PREFIX}-cardTitle`,\n    cardContent: `${PREFIX}-cardContent`,\n    titleWrapper: `${PREFIX}-titleWrapper`,\n    dialogTitle: `${PREFIX}-dialogTitle`,\n    genericMessageWrapper: `${PREFIX}-genericMessageWrapper`,\n    searchWrapper: `${PREFIX}-searchWrapper`,\n    searchResults: `${PREFIX}-searchResults`,\n    clearSearchIcon: `${PREFIX}-clearSearchIcon`,\n    subsTable: `${PREFIX}-subsTable`,\n};\n\nconst StyledProgress = styled(Progress)((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.searchRoot}`]: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n        flex: 1,\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.input}`]: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: 10,\n    },\n\n    [`& .${classes.divider}`]: {\n        height: 28,\n        margin: 4,\n    },\n\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(3),\n        '& h5': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n\n    [`& .${classes.subscribePop}`]: {\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.firstCell}`]: {\n        paddingLeft: 0,\n    },\n\n    [`& .${classes.cardTitle}`]: {\n        paddingLeft: theme.spacing(2),\n    },\n\n    [`& .${classes.cardContent}`]: {\n        '& table tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '& table tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '& table tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '& table th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n        },\n\n    },\n\n    [`& .${classes.titleWrapper}`]: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n        '& h5': {\n            marginRight: theme.spacing(1),\n        },\n    },\n\n    [`& .${classes.dialogTitle}`]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.genericMessageWrapper}`]: {\n        margin: theme.spacing(2),\n    },\n\n    [`& .${classes.searchWrapper}`]: {\n        flex: 1,\n    },\n\n    [`& .${classes.searchResults}`]: {\n        height: 30,\n        display: 'flex',\n        paddingTop: theme.spacing(1),\n        paddingRight: 0,\n        paddingBottom: 0,\n        paddingLeft: theme.spacing(2),\n    },\n\n    [`& .${classes.clearSearchIcon}`]: {\n        cursor: 'pointer',\n    },\n\n    [`& .${classes.subsTable}`]: {\n        '& td': {\n            padding: '4px 8px',\n        },\n    },\n}));\n\n/**\n *\n *\n * @class Subscriptions\n * @extends {React.Component}\n */\nclass Subscriptions extends React.Component {\n    /**\n     *Creates an instance of Subscriptions.\n     * @param {*} props properties\n     * @memberof Subscriptions\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptions: null,\n            apisNotFound: false,\n            subscriptionsNotFound: false,\n            isAuthorize: true,\n            openDialog: false,\n            searchText: '',\n        };\n        this.handleSubscriptionDelete = this.handleSubscriptionDelete.bind(this);\n        this.handleSubscriptionUpdate = this.handleSubscriptionUpdate.bind(this);\n        this.updateSubscriptions = this.updateSubscriptions.bind(this);\n        this.handleSubscribe = this.handleSubscribe.bind(this);\n        this.handleOpenDialog = this.handleOpenDialog.bind(this);\n        this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n        this.handleSearchTextTmpChange = this.handleSearchTextTmpChange.bind(this);\n        this.handleClearSearch = this.handleClearSearch.bind(this);\n        this.handleEnterPress = this.handleEnterPress.bind(this);\n        this.searchTextTmp = '';\n    }\n\n    /**\n     *\n     *\n     * @memberof Subscriptions\n     */\n    componentDidMount() {\n        const { applicationId } = this.props.application;\n        this.updateSubscriptions(applicationId);\n    }\n\n    handleOpenDialog() {\n        this.setState((prevState) => ({ openDialog: !prevState.openDialog, searchText: '' }));\n    }\n\n    /**\n     *\n     * Update subscriptions list of Application\n     * @param {*} applicationId application id\n     * @memberof Subscriptions\n     */\n    updateSubscriptions(applicationId) {\n        const client = new Subscription();\n        const subscriptionLimit = app.subscriptionLimit || 1000;\n        const promisedSubscriptions = client.getSubscriptions(null, applicationId, subscriptionLimit);\n        promisedSubscriptions\n            .then((response) => {\n                this.setState({ subscriptions: response.body.list });\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ subscriptionsNotFound: true });\n                } else if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle subscription deletion of application\n     * @param {*} subscriptionId subscription id\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete(subscriptionId) {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n\n        promisedDelete\n            .then((response) => {\n                if (response.status === 201) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscription Deletion Request Created!',\n                        id: 'Applications.Details.Subscriptions.request.created',\n                    }));\n                    const { applicationId } = this.props.application;\n                    this.updateSubscriptions(applicationId);\n                    return;\n                }\n                if (response.status !== 200) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Something went wrong while deleting the Subscription!',\n                        id: 'Applications.Details.Subscriptions.something.went.wrong',\n                    }));\n                    return;\n                }\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Subscription deleted successfully!',\n                    id: 'Applications.Details.Subscriptions.delete.success',\n                }));\n                const { subscriptions } = this.state;\n                for (const endpointIndex in subscriptions) {\n                    if (\n                        Object.prototype.hasOwnProperty.call(subscriptions, endpointIndex)\n                        && subscriptions[endpointIndex].subscriptionId === subscriptionId\n                    ) {\n                        subscriptions.splice(endpointIndex, 1);\n                        break;\n                    }\n                }\n                this.setState({ subscriptions });\n                this.props.getApplication();\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error occurred when deleting subscription',\n                    id: 'Applications.Details.Subscriptions.error.while.deleting',\n                }));\n            });\n    }\n\n    /**\n     *\n     * Handle subscription update of application\n     *\n     * @param {*} apiId API id\n     * @param {*} subscriptionId subscription id\n     * @param {*} throttlingPolicy throttling tier\n     * @param {*} status subscription status\n     * @memberof Subscriptions\n     */\n    handleSubscriptionUpdate(apiId, subscriptionId, currentThrottlingPolicy, status, requestedThrottlingPolicy) {\n        const { intl } = this.props;\n        const { applicationId } = this.props.application;\n        const client = new Subscription();\n        const promisedUpdate = client.updateSubscription(\n            applicationId,\n            apiId,\n            subscriptionId,\n            currentThrottlingPolicy,\n            status,\n            requestedThrottlingPolicy,\n        );\n\n        promisedUpdate\n            .then((response) => {\n                if (response.status !== 200 && response.status !== 201) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Something went wrong while updating the Subscription!',\n                        id: 'Applications.Details.Subscriptions.wrong.with.subscription',\n                    }));\n                    return;\n                }\n                if (response.body.status === 'TIER_UPDATE_PENDING') {\n                    Alert.info('Your subscription update request has been submitted and is now awaiting '\n                    + 'approval.');\n                } else {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Business Plan updated successfully!',\n                        id: 'Applications.Details.Subscriptions.business.plan.updated',\n                    }));\n                }\n                this.updateSubscriptions(applicationId);\n                this.props.getApplication();\n            })\n            .catch((error) => {\n                const { status: statusInner } = error;\n                if (statusInner === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error occurred when updating subscription',\n                    id: 'Applications.Details.Subscriptions.error.when.updating',\n                }));\n            });\n    }\n\n    /**\n     * Handle onClick of subscribing to an API\n     * @param {*} applicationId application id\n     * @param {*} apiId api id\n     * @param {*} policy policy\n     * @memberof Subscriptions\n     */\n    handleSubscribe(applicationId, apiId, policy) {\n        const api = new Api();\n        const { intl } = this.props;\n        if (!policy) {\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.select.a.subscription.policy',\n                defaultMessage: 'Select a subscription policy',\n            }));\n            return;\n        }\n\n        const promisedSubscribe = api.subscribe(apiId, applicationId, policy);\n        promisedSubscribe\n            .then((response) => {\n                if (response.status !== 201) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                        defaultMessage: 'Error occurred during subscription',\n                    }));\n                } else {\n                    if (response.body.status === 'ON_HOLD') {\n                        Alert.info(intl.formatMessage({\n                            defaultMessage: 'Your subscription request has been submitted and is now awaiting '\n                                + 'approval.',\n                            id: 'subscription.pending',\n                        }));\n                    } else if (response.body.status === 'TIER_UPDATE_PENDING') {\n                        Alert.info(intl.formatMessage({\n                            defaultMessage: 'Your subscription update request has been submitted and is now awaiting '\n                                + 'approval.',\n                            id: 'subscription.tierPending',\n                        }));\n                    } else {\n                        Alert.info(intl.formatMessage({\n                            id: 'Applications.Details.Subscriptions.subscription.successful',\n                            defaultMessage: 'Subscription successful',\n                        }));\n                    }\n                    this.updateSubscriptions(applicationId);\n                    this.props.getApplication();\n                }\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                if (status === 403 && error.response.body) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Applications.Details.Subscriptions.error.occurred.during.subscription',\n                        defaultMessage: 'Error occurred during subscription',\n                    }));\n                }\n            });\n    }\n\n    handleSearchTextChange() {\n        this.setState({ searchText: this.searchTextTmp });\n    }\n\n    handleSearchTextTmpChange(event) {\n        this.searchTextTmp = event.target.value;\n    }\n\n    handleClearSearch() {\n        this.setState({ searchText: '' });\n        this.searchInputElem.value = '';\n    }\n\n    handleEnterPress(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            this.handleSearchTextChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof Subscriptions\n     */\n    render() {\n        const { isAuthorize, openDialog, searchText } = this.state;\n\n        if (!isAuthorize) {\n            window.location = app.context + '/services/configs';\n        }\n\n        const {\n            subscriptions, apisNotFound, subscriptionsNotFound,\n        } = this.state;\n        const { applicationId } = this.props.application;\n        const { intl } = this.props;\n\n        if (subscriptions) {\n            return (\n                <Box sx={(theme) => ({\n                    padding: theme.spacing(3),\n                    '& h5': {\n                        color: theme.palette.getContrastText(theme.palette.background.default),\n                    },\n                })}\n                >\n                    <Box sx={(theme) => ({\n                        display: 'flex',\n                        alignItems: 'center',\n                        paddingBottom: theme.spacing(2),\n                        '& h5': {\n                            marginRight: theme.spacing(1),\n                        },\n                    })}\n                    >\n                        <Typography\n                            variant='h5'\n                            sx={{\n                                textTransform: 'capitalize',\n                            }}\n                        >\n                            <FormattedMessage\n                                id='Applications.Details.Subscriptions.subscription.management'\n                                defaultMessage='Subscription Management'\n                            />\n                        </Typography>\n                        <Button\n                            color='secondary'\n                            className={classes.buttonElm}\n                            size='small'\n                            onClick={this.handleOpenDialog}\n                        >\n                            <Icon>add_circle_outline</Icon>\n                            <FormattedMessage\n                                id='Applications.Details.Subscriptions.subscription.management.add'\n                                defaultMessage='Subscribe APIs'\n                            />\n                        </Button>\n                    </Box>\n                    <Grid container sx='tab-grid' spacing={2}>\n                        <Grid item xs={12} xl={11}>\n                            {(subscriptions && subscriptions.length === 0)\n                                ? (\n                                    <Box sx={(theme) => ({\n                                        margin: theme.spacing(2),\n                                    })}\n                                    >\n                                        <InlineMessage\n                                            type='info'\n                                            sx={(theme) => ({\n                                                width: 1000,\n                                                padding: theme.spacing(2),\n                                            })}\n                                        >\n                                            <Typography variant='h5' component='h3'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.no.subscriptions'\n                                                    defaultMessage='No Subscriptions Available'\n                                                />\n                                            </Typography>\n                                            <Typography component='p'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.no.subscriptions.content'\n                                                    defaultMessage='No subscriptions are available for this Application'\n                                                />\n                                            </Typography>\n                                        </InlineMessage>\n                                    </Box>\n                                )\n                                : (\n                                    <Box sx={(theme) => ({\n                                        '& table tr td': {\n                                            paddingLeft: theme.spacing(1),\n                                        },\n                                        '& table tr:nth-child(even)': {\n                                            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n                                            '& td, & a': {\n                                                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n                                            },\n                                        },\n                                        '& table tr:nth-child(odd)': {\n                                            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n                                            '& td, & a': {\n                                                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n                                            },\n                                        },\n                                        '& table th': {\n                                            backgroundColor: theme.custom.listView.tableHeadBackground,\n                                            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n                                            paddingLeft: theme.spacing(1),\n                                        },\n\n                                    })}\n                                    >\n                                        {subscriptionsNotFound ? (\n                                            <ResourceNotFound />\n                                        ) : (\n                                            <Table sx={{\n                                                '& td': {\n                                                    padding: '4px 8px',\n                                                },\n                                            }}\n                                            >\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell sx={{\n                                                            paddingLeft: 0,\n                                                        }}\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Applications.Details.Subscriptions.api.name'\n                                                                defaultMessage='API'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id={`Applications.Details.Subscriptions\n                                                                        .subscription.state`}\n                                                                defaultMessage='Lifecycle State'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id={`Applications.Details.Subscriptions\n                                                                        .business.plan`}\n                                                                defaultMessage='Business Plan'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id='Applications.Details.Subscriptions.Status'\n                                                                defaultMessage='Subscription Status'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id='Applications.Details.Subscriptions.action'\n                                                                defaultMessage='Action'\n                                                            />\n                                                        </TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {subscriptions\n                                                                && subscriptions.map((subscription) => {\n                                                                    return (\n                                                                        <SubscriptionTableData\n                                                                            key={subscription.subscriptionId}\n                                                                            subscription={subscription}\n                                                                            handleSubscriptionDelete={\n                                                                                this.handleSubscriptionDelete\n                                                                            }\n                                                                            handleSubscriptionUpdate={\n                                                                                this.handleSubscriptionUpdate\n                                                                            }\n                                                                        />\n                                                                    );\n                                                                })}\n                                                </TableBody>\n                                            </Table>\n                                        )}\n                                    </Box>\n                                )}\n                        </Grid>\n                    </Grid>\n                    <Dialog\n                        onClose={this.handleOpenDialog}\n                        aria-labelledby='simple-dialog-title'\n                        open={openDialog}\n                        maxWidth='lg'\n                        sx={(theme) => ({\n                            '& span, & h5, & label, & input, & td, & li': {\n                                color: theme.palette.getContrastText(theme.palette.background.paper),\n                            },\n                        })}\n                    >\n                        <MuiDialogTitle\n                            disableTypography\n                            sx={(theme) => ({\n                                display: 'flex',\n                                alignItems: 'flex-start',\n                                padding: theme.spacing(1),\n                            })}\n                        >\n                            <Typography variant='h6'>\n                                <FormattedMessage\n                                    id='Applications.Details.Subscriptions.subscription.management.add'\n                                    defaultMessage='Subscribe APIs'\n                                />\n                            </Typography>\n                            <Box sx={{\n                                flex: 1,\n                            }}\n                            >\n                                <Paper\n                                    component='form'\n                                    sx={(theme) => ({\n                                        padding: '2px 4px',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        width: 400,\n                                        height: 50,\n                                        flex: 1,\n                                        marginLeft: theme.spacing(2),\n                                        marginRight: theme.spacing(2),\n                                    })}\n                                >\n                                    {searchText && (\n                                        <HighlightOffIcon\n                                            sx={{\n                                                cursor: 'pointer',\n                                            }}\n                                            onClick={this.handleClearSearch}\n                                        />\n                                    )}\n                                    <InputBase\n                                        sx={(theme) => ({\n                                            marginLeft: theme.spacing(1),\n                                            flex: 1,\n                                        })}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'Search APIs',\n                                            id: 'Applications.Details.Subscriptions.search',\n                                        })}\n                                        inputProps={{\n                                            'aria-label': intl.formatMessage({\n                                                defaultMessage: 'Search APIs',\n                                                id: 'Applications.Details.Subscriptions.search',\n                                            }),\n                                        }}\n                                        inputRef={(el) => { this.searchInputElem = el; }}\n                                        onChange={this.handleSearchTextTmpChange}\n                                        onKeyDown={this.handleEnterPress}\n                                    />\n                                    <IconButton\n                                        sx={{\n                                            padding: 10,\n                                        }}\n                                        aria-label='search'\n                                        onClick={this.handleSearchTextChange}\n                                        size='large'\n                                    >\n                                        <SearchIcon />\n                                    </IconButton>\n                                </Paper>\n                                <Box sx={(theme) => ({\n                                    height: 30,\n                                    display: 'flex',\n                                    paddingTop: theme.spacing(1),\n                                    paddingRight: 0,\n                                    paddingBottom: 0,\n                                    paddingLeft: theme.spacing(2),\n                                })}\n                                >\n                                    {(searchText && searchText !== '') ? (\n                                        <>\n                                            <Typography variant='caption'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.filter.msg'\n                                                    defaultMessage='Filtered APIs for '\n                                                />\n                                                {searchText}\n                                            </Typography>\n                                        </>\n                                    ) : (\n                                        <Typography variant='caption'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Subscriptions.filter.msg.all.apis'\n                                                defaultMessage='Displaying all APIs'\n                                            />\n                                        </Typography>\n                                    )}\n                                </Box>\n\n                            </Box>\n\n                            <IconButton\n                                aria-label='close'\n                                className={classes.closeButton}\n                                onClick={this.handleOpenDialog}\n                                size='large'\n                            >\n                                <Icon>cancel</Icon>\n                            </IconButton>\n                        </MuiDialogTitle>\n                        <Box padding={2}>\n                            <APIList\n                                apisNotFound={apisNotFound}\n                                subscriptions={subscriptions}\n                                applicationId={applicationId}\n                                handleSubscribe={(appInner, api, policy) => this.handleSubscribe(appInner, api, policy)}\n                                searchText={searchText}\n                            />\n                        </Box>\n                    </Dialog>\n                </Box>\n            );\n        } else {\n            return <StyledProgress />;\n        }\n    }\n}\nSubscriptions.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl((Subscriptions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Icon from '@mui/material/Icon';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport Grid from '@mui/material/Grid';\nimport Application from 'AppData/Application';\nimport Alert from 'AppComponents/Shared/Alert';\nimport AuthManager from 'AppData/AuthManager';\nimport Box from '@mui/material/Box';\nimport DeleteConfirmation from '../Listing/DeleteConfirmation';\n\n/**\n *\n *\n * @class InfoBar\n * @extends {React.Component}\n */\nclass InfoBar extends React.Component {\n    /**\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            notFound: false,\n            showOverview: true,\n            isDeleteOpen: false,\n        };\n        this.toggleOverview = this.toggleOverview.bind(this);\n        this.handleAppDelete = this.handleAppDelete.bind(this);\n        this.handleDeleteConfimation = this.handleDeleteConfimation.bind(this);\n        this.toggleDeleteConfirmation = this.toggleDeleteConfirmation.bind(this);\n    }\n\n    toggleDeleteConfirmation = () => {\n        this.setState(({ isDeleteOpen }) => ({ isDeleteOpen: !isDeleteOpen }));\n    }\n\n    /**\n     * Handles application deletion\n     * @memberof InfoBar\n     */\n    handleAppDelete() {\n        const { applicationId, intl, application } = this.props;\n        const promisedDelete = Application.deleteApp(applicationId);\n        let message = intl.formatMessage({\n            defaultMessage: 'In Application {name} deleted successfully!',\n            id: 'Applications.Details.InfoBar.application.deleted.successfully',\n        }, { name: application.name });\n        promisedDelete.then((status) => {\n            if (status === 200) {\n                Alert.info(message);\n                this.toggleDeleteConfirmation();\n            } else if (status === 201) {\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Delete request created for application {name}',\n                    id: 'Applications.Listing.Listing.application.deleting.requested',\n                }, { name: application.name }));\n                this.toggleDeleteConfirmation();\n            }\n            this.props.history.push('/applications');\n        }).catch((error) => {\n            console.log(error);\n            message = intl.formatMessage({\n                defaultMessage: 'Error while deleting application {name}',\n                id: 'Applications.Details.InfoBar.application.deleting.error',\n            }, { name: application.name });\n            Alert.error(message);\n        });\n    }\n\n    /**\n     * Handles delete confimation\n     * @memberof InfoBar\n     */\n    handleDeleteConfimation() {\n        const { isDeleteOpen } = this.state;\n        this.setState({ isDeleteOpen: !isDeleteOpen });\n    }\n\n    /**\n     * Toggles the showOverview state\n     * @param {boolean} todo toggle state\n     * @memberof InfoBar\n     */\n    toggleOverview(todo) {\n        if (typeof todo === 'boolean') {\n            this.setState({ showOverview: todo });\n        } else {\n            this.setState((prevState) => ({ showOverview: !prevState.showOverview }));\n        }\n    }\n\n    /**\n     * @returns {div}\n     * @memberof InfoBar\n     */\n    render() {\n        const {\n            applicationId, application,\n        } = this.props;\n        const applicationOwner = this.props.application.owner;\n        const {\n            notFound, isDeleteOpen,\n        } = this.state;\n\n        if (notFound) {\n            return (\n                <ResourceNotFound\n                    message={(\n                        <FormattedMessage\n                            id='Applications.Details.InfoBar.listing.resource.not.found'\n                            defaultMessage='Resource Not Fount'\n                        />\n                    )}\n                />\n            );\n        }\n\n        if (!application) {\n            return <Loading />;\n        }\n        const isUserOwner = AuthManager.getUser().name === applicationOwner;\n\n        return (\n            <Box sx={{ width: '100%' }}>\n                <Box sx={(theme) => ({\n                    height: theme.custom.infoBar.height || 70,\n                    background: theme.custom.infoBar.background || '#ffffff',\n                    color: theme.palette.getContrastText(theme.custom.infoBar.background || '#ffffff'),\n                    borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n                    display: 'flex',\n                    alignItems: 'center',\n                    paddingLeft: theme.spacing(2),\n                })}\n                >\n                    <Grid item xs={10}>\n                        <Box sx={(theme) => ({ marginLeft: theme.spacing(1) })}>\n                            <Link\n                                to={'/applications/' + applicationId + '/overview'}\n                                className={(theme) => ({\n                                    color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                })}\n                            >\n                                <Typography id='itest-info-bar-application-name' variant='h4'>{application.name}</Typography>\n                            </Link>\n                        </Box>\n                        <Box sx={(theme) => ({ marginLeft: theme.spacing(1) })}>\n                            <Typography variant='caption' gutterBottom align='left' noWrap>\n                                {application.subscriptionCount}\n                                {' '}\n                                <FormattedMessage\n                                    id='Applications.Details.InfoBar.subscriptions'\n                                    defaultMessage='Subscriptions'\n                                />\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    {isUserOwner && (\n                        <Grid container justifyContent='flex-end'>\n                            <VerticalDivider height={70} />\n                            <Grid\n                                item\n                                xs={1}\n                                m={3}\n                                sx={(theme) => ({\n                                    display: 'inline-grid',\n                                    cursor: 'pointer',\n                                    justifyContent: 'center',\n                                    '& .material-icons, & span': {\n                                        color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                    },\n                                })}\n                            >\n                                <Link\n                                    to={`/applications/${applicationId}/edit/fromView`}\n                                    sx={(theme) => ({\n                                        display: 'inline-grid',\n                                        cursor: 'pointer',\n                                        '& .material-icons, & span': {\n                                            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                        },\n                                    })}\n                                >\n                                    <Button\n                                        id='edit-application'\n                                        style={{ padding: '4px', display: 'flex', flexDirection: 'column' }}\n                                        color='grey'\n                                        classes={{\n                                            label: {\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                                justifyContent: 'center',\n                                                flexDirection: 'column',\n                                            },\n                                        }}\n                                        aria-label={(\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.edit'\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                    >\n                                        <Icon>edit</Icon>\n                                        <Typography variant='caption' style={{ marginTop: '2px' }}>\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.edit.text'\n                                                defaultMessage='Edit'\n                                            />\n                                        </Typography>\n                                    </Button>\n                                </Link>\n                            </Grid>\n                            <VerticalDivider height={70} />\n                            <Grid\n                                item\n                                xs={1}\n                                m={1}\n                                sx={(theme) => ({\n                                    display: 'inline-grid',\n                                    cursor: 'pointer',\n                                    '& .material-icons, & span': {\n                                        color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                    },\n                                })}\n                            >\n                                <Button\n                                    id='delete-application'\n                                    onClick={this.handleDeleteConfimation}\n                                    style={{ padding: '4px', display: 'flex', flexDirection: 'column' }}\n                                    disabled={AuthManager.getUser().name !== applicationOwner\n                                        || this.props.application.status === 'DELETE_PENDING'}\n                                    color='grey'\n                                    classes={{\n                                        label: {\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            justifyContent: 'center',\n                                            flexDirection: 'column',\n                                        },\n                                    }}\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.delete'\n                                            defaultMessage='Delete'\n                                        />\n                                    )}\n                                >\n                                    <Icon>delete</Icon>\n                                    <Typography variant='caption' style={{ marginTop: '2px' }}>\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.text'\n                                            defaultMessage='Delete'\n                                        />\n                                    </Typography>\n                                </Button>\n                                <DeleteConfirmation\n                                    handleAppDelete={this.handleAppDelete}\n                                    isDeleteOpen={isDeleteOpen}\n                                    toggleDeleteConfirmation={this.toggleDeleteConfirmation}\n                                />\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n}\nInfoBar.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withRouter((InfoBar)));\n","import React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport classNames from 'classnames';\nimport Typography from '@mui/material/Typography';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport Icon from '@mui/material/Icon';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport {\n    Grid, List, ListItem, MenuItem, Paper, TextField,\n} from '@mui/material';\nimport { upperCaseString } from 'AppData/stringFormatter';\n\nconst PREFIX = 'Overview';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    table: `${PREFIX}-table`,\n    leftCol: `${PREFIX}-leftCol`,\n    iconAligner: `${PREFIX}-iconAligner`,\n    iconTextWrapper: `${PREFIX}-iconTextWrapper`,\n    iconEven: `${PREFIX}-iconEven`,\n    iconOdd: `${PREFIX}-iconOdd`,\n    heading: `${PREFIX}-heading`,\n    emptyBox: `${PREFIX}-emptyBox`,\n    summaryRoot: `${PREFIX}-summaryRoot`,\n    actionPanel: `${PREFIX}-actionPanel`,\n    disabledTier: `${PREFIX}-disabledTier`,\n    Paper: `${PREFIX}-Paper`,\n    Paper2: `${PREFIX}-Paper2`,\n    list: `${PREFIX}-list`,\n    urlPaper: `${PREFIX}-urlPaper`,\n    input: `${PREFIX}-input`,\n    avatar: `${PREFIX}-avatar`,\n    iconStyle: `${PREFIX}-iconStyle`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(3, 2),\n        '& td, & th': {\n            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n        },\n        background: theme.custom.infoBar.background,\n    },\n\n    [`& .${classes.table}`]: {\n        minWidth: '100%',\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 200,\n    },\n\n    [`& .${classes.iconAligner}`]: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n\n    [`& .${classes.iconTextWrapper}`]: {\n        display: 'inline-block',\n        paddingLeft: 20,\n    },\n\n    [`& .${classes.iconEven}`]: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n\n    [`& .${classes.iconOdd}`]: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n\n    [`& .${classes.heading}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        paddingLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.emptyBox}`]: {\n        background: '#ffffff55',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px #fff',\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n\n    [`& .${classes.summaryRoot}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n\n    [`& .${classes.actionPanel}`]: {\n        justifyContent: 'flex-start',\n    },\n\n    [`& .${classes.disabledTier}`]: {\n        color: '#999999',\n        fontWeight: '400',\n    },\n\n    [`& .${classes.Paper}`]: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.Paper2}`]: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n        height: '80%',\n    },\n\n    [`& .${classes.list}`]: {\n        width: '100%',\n        maxWidth: 800,\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: 175,\n    },\n\n    [`& .${classes.urlPaper}`]: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        border: `solid 1px ${theme.palette.grey[300]}`,\n        '& .MuiInputBase-root:before,  .MuiInputBase-root:hover': {\n            borderBottom: 'none !important',\n            color: theme.palette.primary.main,\n        },\n        '& .MuiSelect-select': {\n            color: theme.palette.primary.main,\n            paddingLeft: theme.spacing(),\n        },\n        '& .MuiInputBase-input': {\n            color: theme.palette.primary.main,\n        },\n        '& .material-icons': {\n            fontSize: 16,\n            color: `${theme.palette.grey[700]} !important`,\n        },\n        borderRadius: 10,\n        marginRight: theme.spacing(),\n    },\n\n    [`& .${classes.input}`]: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n\n    [`& .${classes.avatar}`]: {\n        width: 30,\n        height: 30,\n        background: 'transparent',\n        border: `solid 1px ${theme.palette.grey[300]}`,\n    },\n\n    [`& .${classes.iconStyle}`]: {\n        cursor: 'pointer',\n        margin: '-10px 0',\n        padding: '0 0 0 5px',\n        '& .material-icons': {\n            fontSize: 18,\n            color: '#9c9c9c',\n        },\n    },\n}));\n\n/**\n * Render application overview page.\n * @param {JSON} props Props passed down from parent.\n * @returns {JSX} jsx output from render.\n */\nfunction Overview(props) {\n    const [application, setApplication] = useState(null);\n    const [tierDescription, setTierDescription] = useState(null);\n    const [notFound, setNotFound] = useState(false);\n    const { match: { params: { applicationId } } } = props;\n    const [environment, setEnvironment] = useState(null);\n    const [tierDisabled, setTierDisabled] = useState(false);\n    const [selectedProtocol, setSelectedProtocol] = useState(null);\n    const [selectedEndpoint, setSelectedEndpoint] = useState(null);\n    const [topics, setTopics] = useState(null);\n    useEffect(() => {\n        const client = new API();\n        // Get application\n        const promisedApplication = client.getApplication(applicationId);\n        promisedApplication\n            .then((response) => {\n                const appInner = response.obj;\n                setApplication(appInner);\n                const promisedTier = client.getTierByName(response.obj.throttlingPolicy, 'application');\n                promisedTier.then((tierResponse) => {\n                    setTierDescription(tierResponse.obj.description);\n                    if (appInner.solaceDeployedEnvironments) {\n                        setEnvironment(appInner.solaceDeployedEnvironments[0]);\n                        setSelectedProtocol(appInner.solaceDeployedEnvironments[0].solaceURLs[0].protocol);\n                        setSelectedEndpoint(appInner.solaceDeployedEnvironments[0].solaceURLs[0].endpointURL);\n                        if (appInner.solaceDeployedEnvironments[0].solaceURLs[0].protocol === 'mqtt') {\n                            setTopics(appInner.solaceDeployedEnvironments[0].SolaceTopicsObject.mqttSyntax);\n                        } else {\n                            setTopics(appInner.solaceDeployedEnvironments[0].SolaceTopicsObject.defaultSyntax);\n                        }\n                    }\n                }).catch((error) => {\n                    setTierDisabled(true);\n                    setTierDescription('Tier is disabled.');\n                    console.log(error);\n                });\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else {\n                    setNotFound(false);\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    if (!application) {\n        return <Loading />;\n    }\n    if (environment) {\n        console.log(environment);\n        console.log(topics);\n    }\n    const handleChange = (event) => {\n        setEnvironment(event.target.value);\n        console.log(event.target.value);\n    };\n    const handleChangeProtocol = (event) => {\n        setSelectedProtocol(event.target.value);\n        // console.log(event.target.value);\n        let protocol;\n        environment.solaceURLs.map((e) => {\n            if (e.protocol === event.target.value) {\n                setSelectedEndpoint(e.endpointURL);\n                protocol = e.protocol;\n            }\n            return null;\n        });\n        if (protocol === 'mqtt') {\n            setTopics(environment.SolaceTopicsObject.mqttSyntax);\n        } else {\n            setTopics(environment.SolaceTopicsObject.defaultSyntax);\n        }\n    };\n    return (\n        <Root>\n            <div className={classes.root}>\n                <Table className={classes.table}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>description</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.description'\n                                                defaultMessage='Description'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.description}\n                            </TableCell>\n                        </TableRow>\n                        {tierDescription\n                            && (\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <div className={classes.iconAligner}>\n                                            <Icon className={classes.iconOdd}>settings_input_component</Icon>\n                                            <span className={classes.iconTextWrapper}>\n                                                <Typography variant='caption' gutterBottom align='left'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.InfoBar.business.plan'\n                                                        defaultMessage='Business Plan'\n                                                    />\n                                                </Typography>\n                                            </span>\n                                        </div>\n                                    </TableCell>\n                                    {application\n                                        && (\n                                            <TableCell>\n                                                {application.throttlingPolicy}\n                                                {' '}\n                                                <span className={tierDisabled ? classes.disabledTier : ''}>{`(${tierDescription})`}</span>\n                                            </TableCell>\n                                        )}\n                                </TableRow>\n                            )}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconOdd}>assignment_turned_in</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.workflow.status'\n                                                defaultMessage='Workflow Status'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.status}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>account_box</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.application.owner'\n                                                defaultMessage='Application Owner'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.owner}\n                            </TableCell>\n                        </TableRow>\n                        {application.attributes\n                            && (\n                                Object.keys(application.attributes).map((attr, index) => {\n                                    const attrValue = application.attributes[attr];\n                                    return (\n                                        <TableRow key={attr}>\n                                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                <div className={classes.iconAligner}>\n                                                    <Icon className={classNames(\n                                                        { [classes.iconEven]: index % 2 !== 0 },\n                                                        { [classes.iconOdd]: index % 2 === 0 },\n                                                    )}\n                                                    >\n                                                        web_asset\n                                                    </Icon>\n                                                    <span className={classes.iconTextWrapper}>\n                                                        <Typography variant='caption' gutterBottom align='left'>\n                                                            {attr}\n                                                        </Typography>\n                                                    </span>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                {attrValue}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                }))}\n\n                    </TableBody>\n                </Table>\n                {}\n                {application.containsSolaceApis === true && environment && topics && (\n                    <div className={classes.root}>\n                        <Typography id='itest-api-details-bushiness-plans-head' variant='h5'>\n                            <FormattedMessage\n                                id='solace.application.available.topics.heading'\n                                defaultMessage='Available Topics'\n                            />\n                        </Typography>\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='solace.application.available.topics.subheading'\n                                defaultMessage='Topics permitted to access from solace applications'\n                            />\n                        </Typography>\n                        <Paper className={classes.Paper}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={2}>\n                                        <Grid item>\n                                            <TextField\n                                                select\n                                                onChange={handleChange}\n                                                value={environment.environmentDisplayName}\n                                                style={{ maxWidth: '100%' }}\n                                                variant='outlined'\n                                                label='Environment Name'\n                                            >\n                                                {application.solaceDeployedEnvironments.map((e) => (\n                                                    <MenuItem key={e} value={e.environmentDisplayName}>\n                                                        {e.environmentDisplayName}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item>\n                                            <TextField\n                                                select\n                                                onChange={handleChangeProtocol}\n                                                value={selectedProtocol}\n                                                style={{ maxWidth: '100%' }}\n                                                variant='outlined'\n                                                label='Protocol'\n                                            >\n                                                {environment.solaceURLs.map((e) => (\n                                                    <MenuItem key={e.protocol} value={e.protocol}>\n                                                        {upperCaseString(e.protocol)}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item>\n                                            {/* <Paper id='gateway-envirounment' component='form' className={classes.urlPaper}>\n                                                <InputBase\n                                                    inputProps={{ 'aria-label': 'api url' }}\n                                                    value={selectedEndpoint}\n                                                    className={classes.input}\n                                                />\n                                            </Paper> */}\n                                            <TextField\n                                                style={{ minWidth: '200%' }}\n                                                label='Endpoint URL'\n                                                value={selectedEndpoint}\n                                                variant='outlined'\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Paper className={classes.Paper2}>\n                                        <Typography id='itest-api-details-bushiness-plans-head' variant='h6'>\n                                            <FormattedMessage\n                                                id='solace.application.topics.publish'\n                                                defaultMessage='Publish Topics'\n                                            />\n                                        </Typography>\n                                        <List className={classes.list}>\n                                            {topics.publishTopics.map((t) => (\n                                                <ListItem>\n                                                    <Typography gutterBottom align='left'>\n                                                        {t}\n                                                    </Typography>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Paper className={classes.Paper2}>\n                                        <Typography id='itest-api-details-bushiness-plans-head' variant='h6'>\n                                            <FormattedMessage\n                                                id='solace.application.topics.subscribe'\n                                                defaultMessage='Subscribe Topics'\n                                            />\n                                        </Typography>\n                                        <List className={classes.list}>\n                                            {topics.subscribeTopics.map((t) => (\n                                                <ListItem>\n                                                    <Typography gutterBottom align='left'>\n                                                        {t}\n                                                    </Typography>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Paper>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </div>\n                )}\n            </div>\n        </Root>\n    );\n}\nexport default injectIntl(Overview);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { matchPath } from 'react-router';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport Grid from '@mui/material/Grid';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport _ from 'lodash';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\n\nconst PREFIX = 'WebHookDetails';\n\nconst classes = {\n    buttonIcon: `${PREFIX}-buttonIcon`,\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    userNotificationPaper: `${PREFIX}-userNotificationPaper`,\n    titleSub: `${PREFIX}-titleSub`,\n    root: `${PREFIX}-root`,\n    titleWrapper: `${PREFIX}-titleWrapper`,\n    listWrapper: `${PREFIX}-listWrapper`,\n    subscriptionRow: `${PREFIX}-subscriptionRow`,\n    callbackurl: `${PREFIX}-callbackurl`,\n    subscriptionTimestamp: `${PREFIX}-subscriptionTimestamp`,\n    SubscriptionHeader: `${PREFIX}-SubscriptionHeader`,\n};\n\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.buttonIcon}`]: {\n        marginRight: 10,\n    },\n\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.userNotificationPaper}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.titleSub}`]: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n\n    [`&.${classes.root}`]: {\n        padding: theme.spacing(3),\n        '& h5': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n\n    [`& .${classes.titleWrapper}`]: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n        '& h5': {\n            marginRight: theme.spacing(1),\n        },\n    },\n\n    [`& .${classes.listWrapper}`]: {\n        width: '50%',\n    },\n\n    [`& .${classes.subscriptionRow}`]: {\n        paddingLeft: '16px',\n    },\n\n    [`& .${classes.callbackurl}`]: {\n        fontSize: '12px',\n    },\n\n    [`& .${classes.subscriptionTimestamp}`]: {\n        float: 'right',\n    },\n\n    [`& .${classes.SubscriptionHeader}`]: {\n        paddingBottom: '0px',\n        paddingLeft: '0px',\n        paddingTop: '0px',\n    },\n}));\n\ndayjs.extend(relativeTime);\n\n/**\n * @param {JSON} props props passed from parent\n * @returns {JSX} jsx output\n */\nexport default function WebHookDetails(props) {\n    const { location: { pathname } } = props;\n    const intl = useIntl();\n    const match = matchPath(pathname, {\n        path: '/applications/:applicationId/webhooks/:apiId',\n        exact: true,\n        strict: false,\n    });\n    const { applicationId } = props.match.params;\n    const { apiId } = match.params;\n\n    const [subscribedTopics, setSubscribedTopics] = useState('');\n\n    const getLogoForDeliveryStatus = (subscription) => {\n        switch (subscription.deliveryStatus) {\n            case 1:\n                return <CheckCircleIcon style={{ color: 'green', fontSize: '14px', paddingTop: '3px' }} />;\n            case 2:\n                return <CancelIcon style={{ color: 'red', fontSize: '14px', paddingTop: '3px' }} />;\n            default:\n                return <RemoveCircleIcon style={{ color: 'black', fontSize: '14px', paddingTop: '3px' }} />;\n        }\n    };\n\n    useEffect(() => {\n        const apiClient = new Api();\n        const promisedSubscriptions = apiClient.getWebhookubScriptions(apiId, applicationId);\n        promisedSubscriptions.then((response) => {\n            const sortedSubscriptions = _.groupBy(response.obj.list, 'topic');\n            setSubscribedTopics(sortedSubscriptions);\n        }).catch((error) => {\n            console.log(error);\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.error.occurred.webhook.subscription',\n                defaultMessage: 'Error while retrieving webhook subscriptions',\n            }));\n        });\n    }, []);\n\n    return (\n        <Root className={classes.root}>\n            <div className={classes.titleWrapper}>\n                <Typography variant='h5' className={classes.keyTitle}>\n                    <FormattedMessage\n                        id='Applications.Details.Subscriptions.api.webhooks'\n                        defaultMessage='Web Hooks'\n                    />\n                </Typography>\n            </div>\n            <List className={classes.listWrapper}>\n                {Object.keys(subscribedTopics).length < 1\n                && (\n                    <Typography color='textPrimary' display='block'>\n                        <FormattedMessage\n                            id='Applications.Details.Subscriptions.api.webhooks.subscriptions.unavailable'\n                            defaultMessage='No Webhook subscriptions available at this time.'\n                        />\n                    </Typography>\n                )}\n                {Object.keys(subscribedTopics).map((key) => (\n                    <>\n                        <ListItem className={classes.SubscriptionHeader}>\n                            <ListItemText primary={key} />\n                        </ListItem>\n                        {subscribedTopics[key].map((subscription) => (\n                            <Grid container direction='row'>\n                                <Grid item xs={1}>\n                                    {getLogoForDeliveryStatus(subscription)}\n                                </Grid>\n                                <Grid item xs={8}>\n                                    <Typography\n                                        color='textPrimary'\n                                        display='block'\n                                        className={classes.callbackurl}\n                                    >\n                                        {subscription.callBackUrl}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    {subscription.deliveryTime ? (\n                                        <Typography\n                                            color='textSecondary'\n                                            display='block'\n                                            variant='caption'\n                                            className={classes.subscriptionTimestamp}\n                                        >\n                                            {subscription.deliveryTime}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            color='textSecondary'\n                                            display='block'\n                                            variant='caption'\n                                            className={classes.subscriptionTimestamp}\n                                        >\n                                            <FormattedMessage\n                                                id='Applications.Details.Subscriptions.api.webhooks.delivery.time.unavailable'\n                                                defaultMessage='Delivery data unavailable'\n                                            />\n                                        </Typography>\n                                    )}\n                                </Grid>\n                                <Divider component='li' />\n                            </Grid>\n                        ))}\n                        <Divider component='li' />\n                    </>\n                ))}\n            </List>\n        </Root>\n    );\n}\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Route, Switch, Redirect, Link,\n} from 'react-router-dom';\nimport VpnKeyIcon from '@mui/icons-material/VpnKey';\nimport ScreenLockLandscapeIcon from '@mui/icons-material/ScreenLockLandscape';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport { app } from 'Settings';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport ApiKeyManager from 'AppComponents/Shared/AppsAndKeys/ApiKeyManager';\nimport classNames from 'classnames';\nimport Paper from '@mui/material/Paper';\nimport Subscriptions from './Subscriptions';\nimport InfoBar from './InfoBar';\nimport Overview from './Overview';\nimport WebHookDetails from './WebHookDetails';\n\nconst PREFIX = 'index';\n\nconst classes = {\n    LeftMenu: `${PREFIX}-LeftMenu`,\n    leftMenuHorizontal: `${PREFIX}-leftMenuHorizontal`,\n    leftMenuVerticalLeft: `${PREFIX}-leftMenuVerticalLeft`,\n    leftMenuVerticalRight: `${PREFIX}-leftMenuVerticalRight`,\n    leftLInkMain: `${PREFIX}-leftLInkMain`,\n    leftLInkMainText: `${PREFIX}-leftLInkMainText`,\n    detailsContent: `${PREFIX}-detailsContent`,\n    content: `${PREFIX}-content`,\n    contentLoader: `${PREFIX}-contentLoader`,\n    contentLoaderRightMenu: `${PREFIX}-contentLoaderRightMenu`,\n    titleWrapper: `${PREFIX}-titleWrapper`,\n    contentWrapper: `${PREFIX}-contentWrapper`,\n    keyTitle: `${PREFIX}-keyTitle`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    width: '100%',\n    [`& .${classes.LeftMenu}`]: {\n        backgroundColor: theme.custom.leftMenu.background,\n        backgroundImage: `url(${app.context}${theme.custom.leftMenu.backgroundImage})`,\n        textAlign: 'left',\n        fontFamily: theme.typography.fontFamily,\n        position: 'absolute',\n        bottom: 0,\n        paddingLeft: (theme.custom.leftMenu.position === 'horizontal' ? theme.spacing(3) : 0),\n    },\n\n    [`& .${classes.leftMenuHorizontal}`]: {\n        top: theme.custom.infoBar.height,\n        width: '100%',\n        overflowX: 'auto',\n        height: 60,\n        display: 'flex',\n        left: 0,\n    },\n\n    [`& .${classes.leftMenuVerticalLeft}`]: {\n        width: theme.custom.leftMenu.width,\n        top: 0,\n        left: 0,\n        overflowY: 'auto',\n        [theme.breakpoints.down('md')]: {\n            width: 50,\n        },\n    },\n\n    [`& .${classes.leftMenuVerticalRight}`]: {\n        width: theme.custom.leftMenu.width,\n        top: 0,\n        right: 0,\n        overflowY: 'auto',\n    },\n\n    [`& .${classes.leftLInkMain}`]: {\n        borderRight: 'solid 1px ' + theme.custom.leftMenu.background,\n        cursor: 'pointer',\n        background: theme.custom.leftMenu.rootBackground,\n        color: theme.palette.getContrastText(theme.custom.leftMenu.rootBackground),\n        textDecoration: 'none',\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        height: theme.custom.infoBar.height,\n    },\n\n    [`& .${classes.leftLInkMainText}`]: {\n        fontSize: 18,\n        color: theme.palette.grey[500],\n        textDecoration: 'none',\n        paddingLeft: theme.spacing(2),\n    },\n\n    [`& .${classes.detailsContent}`]: {\n        display: 'flex',\n        flex: 1,\n    },\n\n    [`& .${classes.content}`]: {\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        marginLeft: (theme.custom.leftMenu.position === 'vertical-left' ? (theme.custom.leftMenu.width - 4) : 0),\n        marginRight: (theme.custom.leftMenu.position === 'vertical-right' ? theme.custom.leftMenu.width : 0),\n        paddingBottom: theme.spacing(3),\n        overflowX: 'hidden',\n        [theme.breakpoints.down('md')]: {\n            marginLeft: (theme.custom.leftMenu.position === 'vertical-left' ? (theme.custom.leftMenu.width - 4) : 0) !== 0 && 50,\n            marginRight: (theme.custom.leftMenu.position === 'vertical-right' ? theme.custom.leftMenu.width : 0) !== 0 && 50,\n        },\n    },\n\n    [`& .${classes.contentLoader}`]: {\n        paddingTop: theme.spacing(3),\n    },\n\n    [`& .${classes.contentLoaderRightMenu}`]: {\n        paddingRight: theme.custom.leftMenu.width,\n    },\n\n    [`& .${classes.titleWrapper}`]: {\n        paddingLeft: 25,\n        paddingTop: 28,\n        textTransform: 'capitalize',\n    },\n\n    [`& .${classes.contentWrapper}`]: {\n        paddingLeft: 25,\n    },\n\n    [`& .${classes.keyTitle}`]: {\n        textTransform: 'capitalize',\n    },\n}));\n\n/**\n *\n *\n * @class Details\n * @extends {Component}\n */\nclass Details extends Component {\n    /**\n     *\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: null,\n        };\n        this.getApplication = this.getApplication.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    componentDidMount() {\n        this.getApplication();\n    }\n\n    getApplication = () => {\n        const client = new API();\n        const applicationId = this.props.match.params.application_uuid;\n        const promisedApplication = client.getApplication(applicationId);\n        promisedApplication\n            .then((response) => {\n                this.setState({ application: response.obj });\n                return Promise.all([response]);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} menuLink selected menu name\n     * @memberof Details\n     */\n    handleMenuSelect = (menuLink) => {\n        const { history, match } = this.props;\n        history.push({ pathname: '/applications/' + match.params.application_uuid + '/' + menuLink });\n    };\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    renderManager = (application, keyType, secScheme) => {\n        return (\n            <Paper>\n                {secScheme === 'oauth' && (\n                    <TokenManager\n                        keyType={keyType}\n                        selectedApp={{\n                            appId: application.applicationId,\n                            label: application.name,\n                            tokenType: application.tokenType,\n                            owner: application.owner,\n                            hashEnabled: application.hashEnabled,\n                        }}\n                    />\n\n                )}\n                {secScheme === 'apikey' && (\n                    <div className={classes.root}>\n                        <div className={classes.titleWrapper}>\n                            <Typography variant='h5' className={classes.keyTitle}>\n                                {this.toTitleCase(keyType)}\n                                <FormattedMessage\n                                    id='Applications.Details.api.keys.title'\n                                    defaultMessage=' API Key'\n                                />\n                            </Typography>\n                        </div>\n                        <div className={classes.contentWrapper}>\n                            <ApiKeyManager\n                                keyType={keyType}\n                                selectedApp={{\n                                    appId: application.applicationId,\n                                    label: application.name,\n                                    tokenType: application.tokenType,\n                                    owner: application.owner,\n                                }}\n                            />\n                        </div>\n                    </div>\n                )}\n            </Paper>\n        );\n    }\n\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof Details\n     */\n    render() {\n        const {\n            match, intl,\n        } = this.props;\n        const { notFound, application } = this.state;\n        const pathPrefix = '/applications/' + match.params.application_uuid;\n        const redirectUrl = pathPrefix + '/overview';\n        const rootIconSize = 42;\n        const rootIconTextVisible = false;\n        const rootIconVisible = false;\n        const position = 'vertical-left';\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        } else if (!application) {\n            return <Loading />;\n        }\n        return (\n            <Root>\n                <nav\n                    role='navigation'\n                    aria-label={intl.formatMessage({\n                        id: 'Applications.Details.index.secondary.navigation',\n                        defaultMessage: 'Secondary Navigation',\n                    })}\n                    className={classNames(\n                        classes.LeftMenu,\n                        {\n                            [classes.leftMenuHorizontal]: position === 'horizontal',\n                        },\n                        {\n                            [classes.leftMenuVerticalLeft]: position === 'vertical-left',\n                        },\n                        {\n                            [classes.leftMenuVerticalRight]: position === 'vertical-right',\n                        },\n                        'left-menu',\n                    )}\n                >\n                    {rootIconVisible && (\n                        <Link to='/applications' className={classes.leftLInkMain} aria-label='All applications'>\n                            <CustomIcon width={rootIconSize} height={rootIconSize} icon='applications' />\n                            {rootIconTextVisible && (\n                                <Typography className={classes.leftLInkMainText}>\n                                    <FormattedMessage\n                                        id='Applications.Details.applications.all'\n                                        defaultMessage='ALL APPs'\n                                    />\n                                </Typography>\n                            )}\n                        </Link>\n                    )}\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.overview'\n                                defaultMessage='Overview'\n                            />\n                        )}\n                        iconText='overview'\n                        route='overview'\n                        to={pathPrefix + '/overview'}\n                        open\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.prod.keys'\n                                defaultMessage='Production Keys'\n                            />\n                        )}\n                        iconText='productionkeys'\n                        route='productionkeys'\n                        to={pathPrefix + '/productionkeys/oauth'}\n                        open\n                        id='production-keys'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.oauth.tokens'\n                                defaultMessage='OAuth2 Tokens'\n                            />\n                        )}\n                        route='productionkeys/oauth'\n                        to={pathPrefix + '/productionkeys/oauth'}\n                        submenu\n                        Icon={<ScreenLockLandscapeIcon />}\n                        open\n                        id='production-keys-oauth'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.api.key'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                        route='productionkeys/apikey'\n                        to={pathPrefix + '/productionkeys/apikey'}\n                        submenu\n                        Icon={<VpnKeyIcon />}\n                        open\n                        id='production-keys-apikey'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.sandbox.keys'\n                                defaultMessage='Sandbox Keys'\n                            />\n                        )}\n                        iconText='productionkeys'\n                        route='sandboxkeys'\n                        to={pathPrefix + '/sandboxkeys/oauth'}\n                        open\n                        id='sandbox-keys'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.oauth.tokens'\n                                defaultMessage='OAuth2 Tokens'\n                            />\n                        )}\n                        route='sandboxkeys/oauth'\n                        to={pathPrefix + '/sandboxkeys/oauth'}\n                        submenu\n                        Icon={<ScreenLockLandscapeIcon />}\n                        open\n                        id='sandbox-keys-oauth'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.api.key'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                        route='sandboxkeys/apikey'\n                        to={pathPrefix + '/sandboxkeys/apikey'}\n                        submenu\n                        Icon={<VpnKeyIcon />}\n                        open\n                        id='sandbox-keys-apikey'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.subscriptions'\n                                defaultMessage='Subscriptions'\n                            />\n                        )}\n                        iconText='subscriptions'\n                        route='subscriptions'\n                        to={pathPrefix + '/subscriptions'}\n                        open\n                        id='left-menu-subscriptions'\n                    />\n                </nav>\n                <Box sx={(theme) => ({\n                    display: 'flex',\n                    flex: 1,\n                    flexDirection: 'column',\n                    marginLeft: (theme.custom.leftMenu.position === 'vertical-left' ? (theme.custom.leftMenu.width - 158) : 0),\n                    paddingBottom: theme.spacing(3),\n                    overflowX: 'hidden',\n                    [theme.breakpoints.down('md')]: {\n                        marginLeft: (theme.custom.leftMenu.position === 'vertical-left'\n                            ? (theme.custom.leftMenu.width - 4) : 0) !== 0 && 50,\n                    },\n                })}\n                >\n                    <InfoBar\n                        application={application}\n                        applicationId={match.params.application_uuid}\n                        innerRef={(node) => { this.infoBar = node; }}\n                    />\n                    <div\n                        className={classNames(\n                            { [classes.contentLoader]: position === 'horizontal' },\n                            { [classes.contentLoaderRightMenu]: position === 'vertical-right' },\n                        )}\n                    >\n                        <Switch>\n                            <Redirect exact from='/applications/:applicationId' to={redirectUrl} />\n                            <Route\n                                path='/applications/:applicationId/overview'\n                                component={Overview}\n                            />\n                            <Route\n                                path='/applications/:applicationId/webhooks/:apiId'\n                                component={WebHookDetails}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/oauth'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/apikey'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'apikey'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/oauth'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/apikey'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'apikey'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/subscriptions'\n                                render={() => (\n                                    <Subscriptions application={application} getApplication={this.getApplication} />\n                                )}\n                            />\n                            <Route component={ResourceNotFound} />\n                        </Switch>\n                    </div>\n                </Box>\n            </Root>\n        );\n    }\n}\n\nDetails.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            application_uuid: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default (injectIntl(Details));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\n} from '@mui/material/';\nimport Slide from '@mui/material/Slide';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst DeleteConfirmation = (props) => {\n    const { handleAppDelete, isDeleteOpen, toggleDeleteConfirmation } = props;\n    return (\n        <Dialog open={isDeleteOpen} transition={Slide} role='alertdialog'>\n            <DialogTitle>\n                <FormattedMessage\n                    id='Applications.Listing.DeleteConfirmation.dialog.title'\n                    defaultMessage='Delete Application'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.text.description'\n                        defaultMessage='The application will be removed'\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button dense color='grey' onClick={toggleDeleteConfirmation}>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button\n                    id='itest-confirm-application-delete'\n                    size='small'\n                    variant='outlined'\n                    color='primary'\n                    onClick={handleAppDelete}\n                >\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog,delete'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\nDeleteConfirmation.propTypes = {\n    handleAppDelete: PropTypes.func.isRequired,\n    isDeleteOpen: PropTypes.bool.isRequired,\n    toggleDeleteConfirmation: PropTypes.func.isRequired,\n};\nexport default DeleteConfirmation;\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\n/**\n * Capitalize the first letter of a string\n * @param {string} string string to be formatted\n * @return {string} formatted string\n */\nfunction capitalizeFirstLetter(string) {\n    return string && string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Lowercase all letters in a string\n * @param {string} string string to be formatted\n * @return {string} formatted string\n */\nfunction lowerCaseString(string) {\n    return string.toLowerCase();\n}\n\n/**\n * Uppercase all letters in a string\n * @param {string} string string to be formatted\n * @return {string} formatted string\n */\nfunction upperCaseString(string) {\n    return string.toUpperCase();\n}\n\nexport { capitalizeFirstLetter, lowerCaseString, upperCaseString };\n"],"names":["classes","FormControl","Root","styled","_ref","theme","width","padding","tokens","props","infiniteValidity","setInfiniteValidity","useState","invalidTimeout","setInvaildTimeout","handleChange","field","event","accessTokenRequest","updateAccessTokenRequest","newRequest","_objectSpread","target","currentTarget","checked","timeout","undefined","Validation","number","validate","value","error","intl","React","variant","margin","className","FormControlLabel","control","Checkbox","onChange","e","color","label","formatMessage","defaultMessage","id","TextField","required","InputLabelProps","shrink","helperText","fullWidth","name","placeholder","autoFocus","inputText","contextTypes","PropTypes","isRequired","injectIntl","PREFIX","outterBox","Fab","spacing","marginLeft","borderColor","marginRight","apiKeyRestrictions","invalidIP","setInvalidIP","invalidReferer","setInvalidReferer","newIP","updateNewIp","ipList","updateIpList","restrictSchema","updateRestrictSchema","newReferer","updateNewReferer","refererList","updateRefererList","Box","border","borderRadius","Typography","FormattedMessage","component","RadioGroup","row","Radio","labelPlacement","Grid","container","direction","justifyContent","alignItems","item","md","xs","trim","size","onClick","addIpItem","ipAddress","push","AddIcon","length","List","map","ip","index","ListItem","ListItemText","primary","ListItemSecondaryAction","Tooltip","title","placement","IconButton","edge","deleteIpItem","ipItem","splice","indexOf","DeleteIcon","addRefererItem","referer","deleteRefererItem","refererItem","root","dialog","button","tokenSection","keyConfigWrapper","generateWrapper","paper","dialogTitle","dialogContent","formGroup","gridWrapper","keyTitle","cardBody","generateKey","StyledGrid","palette","getContrastText","background","main","marginTop","marginBottom","flexDirection","display","textTransform","lineHeight","ApiKeyManager","constructor","super","_defineProperty","this","setState","open","showToken","selectedApp","keyType","isGenerating","client","API","restrictions","permittedIP","state","join","permittedReferer","generateApiKey","appId","then","response","console","log","apikey","accessToken","body","validityTime","isOauth","catch","status","notFound","render","ApiKeyRestriction","FormGroup","Button","handleClickOpen","formLabel","Dialog","onClose","handleClose","DialogTitle","DialogContent","DialogContentText","ApiKey","ViewToken","token","DialogActions","generateKeys","disabled","CircularProgress","Card","CardContent","values","linebreak","ip1","ip2","ip3","ip4","url1","url2","url3","propTypes","tokenType","buttonGap","select","grey","SubscriptionPolicySelectLegacy","selectedPolicy","componentDidMount","policies","apiId","handleSubscribe","applicationId","Autocomplete","disableClearable","options","style","renderInput","params","_extends","renderOption","policy","MenuItem","key","ScopeValidation","resourcePath","resourcePaths","SUBSCRIPTIONS","resourceMethod","resourceMethods","POST","useTheme","APICardView","xhrRequest","data","list","pagination","total","count","updateUnsubscribedAPIsList","setTenantDomain","code","Alert","finally","loading","page","searchText","rowsPerPage","api","getAllAPIs","query","limit","offset","pageType","getData","componentDidUpdate","prevProps","subscriptions","getIdsOfSubscribedEntities","sub","filter","Boolean","listLocal","subscribedIds","i","includes","advertiseInfo","advertised","isSubscriptionAvailable","throttlingPolicies","apisNotFound","ResourceNotFound","columns","customBodyRender","tableMeta","rowData","SubscriptionPolicySelect","app","search","print","download","viewColumns","customToolbar","responsive","serverSide","onTableChange","action","tableState","changePage","selectableRows","onChangeRowsPerPage","numberOfRows","pageInner","countInner","textLabels","Loading","NoApi","MUIDataTable","filterType","sort","selectableRowsHeader","Invoice","subscriptionId","tiers","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","handlePopup","Subscription","getMonetizationInvoice","obj","invoiceData","properties","Object","keys","forEach","invoiveItem","insideArray","startIcon","Icon","defaultProps","SubscriptionTableData","openMenu","openMenuEdit","isMonetizedAPI","isDynamicUsagePolicy","selectedTier","handleRequestClose","bind","handleRequestOpen","handleRequestDelete","checkIfDynamicUsagePolicy","checkIfMonetizedAPI","populateSubscriptionTiers","handleSubscriptionTierUpdate","handleRequestCloseEditMenu","handleRequestOpenEditMenu","setSelectedTier","subscription","handleSubscriptionDelete","requestedThrottlingPolicy","currentThrottlingPolicy","handleSubscriptionUpdate","apiUUID","Api","getAPIById","apiTiers","JSON","parse","tierName","apiData","monetization","enabled","subscriptionUUID","getSubscription","subscriptionData","throttlingPolicy","getTierByName","policyResponse","policyData","monetizationAttributes","billingType","apiInfo","link","Link","to","cursor","external","version","MDIcon","path","mdiOpenInNew","type","TableRow","hover","TableCell","lifeCycleStatus","transition","Slide","getOptionLabel","option","_option$label","getOptionSelected","newValue","dense","SINGLE_SUBSCRIPTION","DELETE","searchRoot","input","iconButton","divider","subscribePop","firstCell","cardTitle","cardContent","titleWrapper","genericMessageWrapper","searchWrapper","searchResults","clearSearchIcon","subsTable","StyledProgress","Progress","flex","height","default","paddingLeft","backgroundColor","custom","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","paddingBottom","paddingTop","paddingRight","Subscriptions","subscriptionsNotFound","isAuthorize","openDialog","updateSubscriptions","handleOpenDialog","handleSearchTextChange","handleSearchTextTmpChange","handleClearSearch","handleEnterPress","searchTextTmp","application","prevState","subscriptionLimit","getSubscriptions","deleteSubscription","info","endpointIndex","prototype","hasOwnProperty","call","getApplication","updateSubscription","statusInner","subscribe","description","searchInputElem","keyCode","preventDefault","window","location","context","sx","buttonElm","xl","InlineMessage","Table","TableHead","TableBody","maxWidth","MuiDialogTitle","disableTypography","Paper","HighlightOffIcon","InputBase","inputProps","inputRef","el","onKeyDown","SearchIcon","closeButton","APIList","appInner","InfoBar","isDeleteOpen","showOverview","toggleOverview","handleAppDelete","handleDeleteConfimation","toggleDeleteConfirmation","promisedDelete","Application","deleteApp","message","history","todo","applicationOwner","owner","isUserOwner","AuthManager","getUser","infoBar","borderBottom","A200","gutterBottom","align","noWrap","subscriptionCount","VerticalDivider","m","DeleteConfirmation","withRouter","table","leftCol","iconAligner","iconTextWrapper","iconEven","iconOdd","heading","emptyBox","summaryRoot","actionPanel","disabledTier","Paper2","urlPaper","avatar","iconStyle","minWidth","iconOddColor","fontWeight","position","overflow","maxHeight","fontSize","setApplication","tierDescription","setTierDescription","setNotFound","match","environment","setEnvironment","tierDisabled","setTierDisabled","selectedProtocol","setSelectedProtocol","selectedEndpoint","setSelectedEndpoint","topics","setTopics","useEffect","tierResponse","solaceDeployedEnvironments","solaceURLs","protocol","endpointURL","SolaceTopicsObject","mqttSyntax","defaultSyntax","scope","attributes","attr","attrValue","classNames","containsSolaceApis","environmentDisplayName","upperCaseString","publishTopics","t","subscribeTopics","buttonIcon","grid","userNotificationPaper","titleSub","listWrapper","subscriptionRow","callbackurl","subscriptionTimestamp","SubscriptionHeader","float","WebHookDetails","pathname","useIntl","matchPath","exact","strict","subscribedTopics","setSubscribedTopics","getWebhookubScriptions","sortedSubscriptions","_","deliveryStatus","CheckCircleIcon","CancelIcon","RemoveCircleIcon","getLogoForDeliveryStatus","callBackUrl","deliveryTime","Divider","dayjs","relativeTime","LeftMenu","leftMenuHorizontal","leftMenuVerticalLeft","leftMenuVerticalRight","leftLInkMain","leftLInkMainText","detailsContent","content","contentLoader","contentLoaderRightMenu","contentWrapper","leftMenu","backgroundImage","textAlign","fontFamily","typography","bottom","top","overflowX","left","overflowY","breakpoints","down","right","borderRight","rootBackground","textDecoration","Details","Component","application_uuid","Promise","all","menuLink","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","secScheme","TokenManager","hashEnabled","toTitleCase","pathPrefix","redirectUrl","role","LeftMenuItem","text","iconText","route","submenu","ScreenLockLandscapeIcon","VpnKeyIcon","innerRef","node","Switch","Redirect","from","Route","Overview","renderManager","capitalizeFirstLetter","string","slice"],"sourceRoot":""}