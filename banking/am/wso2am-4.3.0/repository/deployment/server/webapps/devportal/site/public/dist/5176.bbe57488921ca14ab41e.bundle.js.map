{"version":3,"file":"5176.bbe57488921ca14ab41e.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiTryOut/AdvertiseDetailsPanel.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiTryOut/SelectAppPanel.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiTryOut/TryOutController.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Box from '@mui/material/Box';\nimport MuiAlert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\n\nconst AdvertiseDetailsPanel = (props) => {\n    const {\n        classes,\n        advAuthHeader,\n        advAuthHeaderValue,\n        handleChanges,\n        selectedEndpoint,\n        api: {\n            advertiseInfo,\n            transport,\n            securityScheme,\n            authorizationHeader,\n        },\n    } = props;\n\n    const availableTransports = transport.join(', ').toUpperCase();\n    let securitySchemes = '';\n    securityScheme.forEach((scheme, index) => {\n        if (index !== 0) {\n            securitySchemes += ', ';\n        }\n        if (scheme === 'basic_auth') {\n            securitySchemes += 'Basic';\n        } else if (scheme === 'oauth2') {\n            securitySchemes += 'OAuth2';\n        } else if (scheme === 'mutualssl') {\n            securitySchemes += 'Mutual SSL';\n        } else if (scheme === 'api_key') {\n            securitySchemes += 'API Key';\n        } else {\n            securitySchemes = securitySchemes.substring(0, securitySchemes.length - 2);\n        }\n    });\n\n    return (\n        <Box display='block' justifyContent='center' className={classes.authHeader}>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography\n                    variant='h6'\n                    component='label'\n                    id='authentication-heading'\n                    color='textSecondary'\n                    className={classes.tryoutHeading}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.authentication.heading'\n                        defaultMessage='Authentication'\n                    />\n                </Typography>\n            </Grid>\n            <Grid container spacing={2} x={8} md={6} direction='row' className={classes.tokenType}>\n                <Grid xs={6} md={4} style={{ paddingLeft: 0 }} item>\n                    <TextField\n                        margin='normal'\n                        variant='outlined'\n                        id='advAuthHeader'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.adv.auth.header'\n                                defaultMessage='Authorization Header'\n                            />\n                        )}\n                        name='advAuthHeader'\n                        onChange={handleChanges}\n                        value={advAuthHeader || ''}\n                        fullWidth\n                    />\n                </Grid>\n                <Grid xs={6} md={8} style={{ paddingRight: 0 }} item>\n                    <TextField\n                        margin='normal'\n                        variant='outlined'\n                        id='advAuthHeaderValue'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.adv.auth.header.value'\n                                defaultMessage='Authorization Header Value'\n                            />\n                        )}\n                        name='advAuthHeaderValue'\n                        onChange={handleChanges}\n                        value={advAuthHeaderValue || ''}\n                        fullWidth\n                    />\n                </Grid>\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography\n                    variant='h6'\n                    component='label'\n                    id='key-type'\n                    color='textSecondary'\n                    className={classes.tryoutHeading}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint.heading'\n                        defaultMessage='API Endpoint'\n                    />\n                </Typography>\n                <TextField\n                    fullWidth\n                    select\n                    id='selectedEndpoint'\n                    label={(\n                        <FormattedMessage\n                            defaultMessage='Endpoint type'\n                            id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint'\n                        />\n                    )}\n                    value={selectedEndpoint}\n                    name='selectedEndpoint'\n                    onChange={handleChanges}\n                    helperText={(\n                        <FormattedMessage\n                            defaultMessage='Please select an endpoint type'\n                            id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint.help'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                >\n                    {advertiseInfo.apiExternalProductionEndpoint && (\n                        <MenuItem\n                            value='PRODUCTION'\n                            className={classes.menuItem}\n                        >\n                            Production\n                        </MenuItem>\n                    )}\n                    {advertiseInfo.apiExternalSandboxEndpoint && (\n                        <MenuItem\n                            value='SANDBOX'\n                            className={classes.menuItem}\n                        >\n                            Sandbox\n                        </MenuItem>\n                    )}\n                </TextField>\n            </Grid>\n            {(availableTransports || securitySchemes || authorizationHeader) && (\n                <Grid x={12} md={6} className={classes.centerItems} style={{ marginTop: '10px' }}>\n                    <MuiAlert severity='info' variant='filled' sx={{ bgcolor: 'background.paper' }}>\n                        <AlertTitle>\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.security.details'\n                                defaultMessage='Security Details'\n                            />\n                        </AlertTitle>\n                        {availableTransports && (\n                            <div>\n                                <strong>Transports: </strong>\n                                {availableTransports}\n                            </div>\n                        )}\n                        {securitySchemes && (\n                            <div>\n                                <strong>Security schemes: </strong>\n                                {securitySchemes}\n                            </div>\n                        )}\n                        {authorizationHeader && (\n                            <div>\n                                <strong>Authorization header: </strong>\n                                {authorizationHeader}\n                            </div>\n                        )}\n                    </MuiAlert>\n                </Grid>\n            )}\n        </Box>\n    );\n};\n\nexport default AdvertiseDetailsPanel;\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Grid, FormControl, FormControlLabel, RadioGroup, Radio, Typography,\n} from '@mui/material';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\n\nconst PREFIX = 'SelectAppPanel';\n\nconst classes = {\n    centerItems: `${PREFIX}-centerItems`,\n    tryoutHeading: `${PREFIX}-tryoutHeading`,\n    menuItem: `${PREFIX}-menuItem`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.centerItems}`]: {\n        margin: 'auto',\n    },\n\n    [`& .${classes.tryoutHeading}`]: {\n        display: 'block',\n        fontWeight: 400,\n    },\n\n    [`& .${classes.menuItem}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n}));\n\nconst SelectAppPanel = (props) => {\n    let {\n        selectedApplication, selectedKeyType,\n    } = props;\n\n    const {\n        subscriptions, handleChanges,\n    } = props;\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} event event fired\n     */\n    const handleSelectPanelChange = (event) => {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedApplication':\n                selectedApplication = value;\n                break;\n            case 'selectedKeyType':\n                selectedKeyType = value;\n                break;\n            default:\n                break;\n        }\n        handleChanges(event);\n    };\n    return (\n        <Root>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <TextField\n                    fullWidth\n                    id='selected-application'\n                    select\n                    label={(\n                        <FormattedMessage\n                            defaultMessage='Applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                        />\n                    )}\n                    value={selectedApplication}\n                    name='selectedApplication'\n                    onChange={handleSelectPanelChange}\n                    SelectProps={subscriptions}\n                    helperText={(\n                        <FormattedMessage\n                            defaultMessage='Subscribed applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.select.subscribed.application'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                >\n                    {subscriptions.map((sub) => (\n                        <MenuItem\n                            value={sub.applicationInfo.applicationId}\n                            key={sub.applicationInfo.applicationId}\n                            className={classes.menuItem}\n                        >\n                            {sub.applicationInfo.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography variant='h6' component='label' id='key-type' color='textSecondary' className={classes.tryoutHeading}>\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type.heading'\n                        defaultMessage='Key Type'\n                    />\n                </Typography>\n                <FormControl variant='standard' component='fieldset'>\n                    <RadioGroup\n                        name='selectedKeyType'\n                        value={selectedKeyType}\n                        onChange={handleSelectPanelChange}\n                        aria-labelledby='key-type'\n                        row\n                    >\n                        {(subscriptions !== null && (subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'UNBLOCKED'\n                                || subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'TIER_UPDATE_PENDING'))\n                                && (\n                                    <FormControlLabel\n                                        value='PRODUCTION'\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.SelectAppPanel.production.radio'\n                                                defaultMessage='Production'\n                                            />\n                                        )}\n                                    />\n                                )}\n                        <FormControlLabel\n                            value='SANDBOX'\n                            control={<Radio />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.sandbox.radio'\n                                    defaultMessage='Sandbox'\n                                />\n                            )}\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n        </Root>\n    );\n};\n\nexport default (SelectAppPanel);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useEffect, useState, useRef,\n} from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl, CircularProgress, Tooltip,\n} from '@mui/material';\nimport HelpOutline from '@mui/icons-material/HelpOutline';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Icon from '@mui/material/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport AdvertiseDetailsPanel from 'AppComponents/Shared/ApiTryOut/AdvertiseDetailsPanel';\nimport Progress from '../Progress';\nimport Api from '../../../data/api';\nimport Application from '../../../data/Application';\nimport SelectAppPanel from './SelectAppPanel';\n\nconst PREFIX = 'TryOutController';\n\nconst classes = {\n    centerItems: `${PREFIX}-centerItems`,\n    tokenType: `${PREFIX}-tokenType`,\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    tryoutHeading: `${PREFIX}-tryoutHeading`,\n    genKeyButton: `${PREFIX}-genKeyButton`,\n    gatewayEnvironment: `${PREFIX}-gatewayEnvironment`,\n    categoryHeading: `${PREFIX}-categoryHeading`,\n    tooltip: `${PREFIX}-tooltip`,\n    menuItem: `${PREFIX}-menuItem`,\n    warningIcon: `${PREFIX}-warningIcon`,\n    loadMoreLink: `${PREFIX}-loadMoreLink`,\n    link: `${PREFIX}-link`,\n    authHeader: `${PREFIX}-authHeader`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    width: '100%',\n    [`& .${classes.centerItems}`]: {\n        margin: 'auto',\n    },\n\n    [`& .${classes.tokenType}`]: {\n        margin: 'auto',\n        display: 'flex',\n        '& .MuiButton-contained.Mui-disabled span.MuiButton-label': {\n            color: '#6d6d6d',\n        },\n    },\n\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.tryoutHeading}`]: {\n        fontWeight: 400,\n        display: 'block',\n    },\n\n    [`& .${classes.genKeyButton}`]: {\n        background: theme.palette.grey[300],\n        width: theme.spacing(20),\n        height: theme.spacing(5),\n        marginTop: theme.spacing(2.5),\n        marginLeft: theme.spacing(2),\n        '&:disabled': {\n            cursor: 'not-allowed',\n            background: theme.palette.grey[50],\n        },\n    },\n\n    [`& .${classes.gatewayEnvironment}`]: {\n        marginTop: theme.spacing(4),\n    },\n\n    [`& .${classes.categoryHeading}`]: {\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(-5),\n    },\n\n    [`& .${classes.tooltip}`]: {\n        marginLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.menuItem}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n\n    [`& .${classes.warningIcon}`]: {\n        color: '#ff9a00',\n        fontSize: 25,\n        marginRight: 10,\n    },\n\n    [`& .${classes.loadMoreLink}`]: {\n        textDecoration: 'none',\n        margin: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.link}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n\n    [`& .${classes.authHeader}`]: {\n        marginBottom: '20px',\n    },\n}));\n\n/**\n * TryOut component\n *\n * @class TryOutController\n * @extends {Component}\n */\nfunction TryOutController(props) {\n    const {\n        securitySchemeType, selectedEnvironment, environments,\n        productionAccessToken, sandboxAccessToken, selectedKeyType, setKeys, setSelectedKeyType, setSelectedKeyManager,\n        setSelectedEnvironment, setProductionAccessToken, setSandboxAccessToken, scopes, setSecurityScheme, setUsername,\n        setPassword, username, password, updateSwagger, setProductionApiKey, setSandboxApiKey, productionApiKey,\n        sandboxApiKey, environmentObject, setURLs, setAdvAuthHeader, setAdvAuthHeaderValue, advAuthHeader,\n        advAuthHeaderValue, setSelectedEndpoint, selectedEndpoint, api, URLs, onConfigChange,\n    } = props;\n    let { selectedKeyManager } = props;\n    selectedKeyManager = selectedKeyManager || 'Resident Key Manager';\n\n    const [showToken, setShowToken] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [selectedApplication, setSelectedApplication] = useState([]);\n    const [keyManagers, setKeyManagers] = useState([]);\n    const [selectedKMObject, setSelectedKMObject] = useState(null);\n    const [ksGenerated, setKSGenerated] = useState(false);\n    const [showMoreGWUrls, setShowMoreGWUrls] = useState(false);\n    const [tokenValue, setTokenValue] = useState('');\n    const apiID = api.id;\n    const restApi = new Api();\n    const user = AuthManager.getUser();\n\n    const handleAccessTokenChange = ({ newAccessToken }) => {\n        if (onConfigChange) {\n            onConfigChange({\n                newAccessToken,\n                newSecurityScheme: securitySchemeType,\n                newUsername: username,\n                newPassword: password,\n                newSelectedEnvironment: selectedEnvironment,\n            });\n        }\n    };\n\n    useEffect(() => {\n        let subscriptionsList;\n        let newSelectedApplication;\n        let keys;\n        let selectedKeyTypes = 'PRODUCTION';\n        let accessToken;\n        if (api.lifeCycleStatus) {\n            const promiseSubscriptions = restApi.getSubscriptions(apiID);\n            promiseSubscriptions.then((subscriptionsResponse) => {\n                if (subscriptionsResponse !== null) {\n                    subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                        || item.status === 'PROD_ONLY_BLOCKED' || item.status === 'TIER_UPDATE_PENDING');\n\n                    if (subscriptionsList && subscriptionsList.length > 0) {\n                        newSelectedApplication = subscriptionsList[0].applicationId;\n                        Application.get(newSelectedApplication)\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'SANDBOX') {\n                                    selectedKeyTypes = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                } else if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                                    selectedKeyTypes = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                }\n                                setSelectedApplication(newSelectedApplication);\n                                setSubscriptions(subscriptionsList);\n                                setKeys(appKeys);\n                                setSelectedEnvironment(selectedEnvironment, false);\n                                setSelectedKeyType(selectedKeyTypes, false);\n                                if (selectedKeyType === 'PRODUCTION') {\n                                    setProductionAccessToken(accessToken);\n                                } else {\n                                    setSandboxAccessToken(accessToken);\n                                }\n                            });\n                    } else {\n                        setSelectedApplication(newSelectedApplication);\n                        setSubscriptions(subscriptionsList);\n                        setKeys(keys);\n                        setSelectedEnvironment(selectedEnvironment, false);\n                        if (selectedKeyType === 'PRODUCTION') {\n                            setProductionAccessToken(accessToken);\n                        } else {\n                            setSandboxAccessToken(accessToken);\n                        }\n                        setSelectedKeyType(selectedKeyType, false);\n                    }\n                } else {\n                    setSelectedApplication(newSelectedApplication);\n                    setSubscriptions(subscriptionsList);\n                    setKeys(keys);\n                    setSelectedEnvironment(selectedEnvironment, false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    setSelectedKeyType(selectedKeyType, false);\n                }\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n            const promisedKeyManagers = restApi.getKeyManagers();\n            promisedKeyManagers\n                .then((response) => {\n                    const responseKeyManagerList = [];\n                    response.body.list.map((item) => responseKeyManagerList.push(item));\n                    setKeyManagers(responseKeyManagerList);\n                    const filteredKMs = (responseKeyManagerList.filter((km) => km.name === selectedKeyManager));\n                    if (filteredKMs && filteredKMs.length > 0) {\n                        setSelectedKMObject(filteredKMs[0]);\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                });\n        }\n    }, []);\n\n    /**\n     * Generate access token\n     * */\n    function generateAccessToken() {\n        if (api.lifeCycleStatus) {\n            setIsUpdating(true);\n            const applicationPromise = Application.get(selectedApplication);\n            applicationPromise\n                .then((application) => application.generateToken(\n                    selectedKeyManager,\n                    selectedKeyType,\n                    3600,\n                    scopes,\n                ))\n                .then((response) => {\n                    console.log('token generated successfully ' + response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(response.accessToken);\n                    } else {\n                        setSandboxAccessToken(response.accessToken);\n                    }\n                    handleAccessTokenChange({ newAccessToken: response.accessToken });\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     * Generate api key\n     * */\n    function generateApiKey() {\n        if (api.lifeCycleStatus) {\n            setIsUpdating(true);\n            const promisedKey = restApi.generateApiKey(selectedApplication, selectedKeyType, -1);\n            promisedKey\n                .then((response) => {\n                    console.log('Non empty response received', response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionApiKey(response.body.apikey);\n                    } else {\n                        setSandboxApiKey(response.body.apikey);\n                    }\n                    handleAccessTokenChange({ newAccessToken: response.body.apikey });\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof TryOutController\n     */\n    function handleClickShowToken() {\n        setShowToken(!showToken);\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof TryOutController\n     */\n    function updateApplication() {\n        if (api.lifeCycleStatus) {\n            let accessToken;\n            let keyType;\n            if (subscriptions !== null && subscriptions.length !== 0 && selectedApplication.length !== 0) {\n                if (subscriptions.find((sub) => sub.applicationId\n                    === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                    setSelectedKeyType(selectedKeyType, false);\n                    keyType = 'SANDBOX';\n                } else {\n                    keyType = selectedKeyType;\n                }\n            }\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(keyType || 'PRODUCTION');\n                })\n                .then((appKeys) => {\n                    const selectedKeys = appKeys.get(selectedKeyManager);\n                    if (selectedKeys && selectedKeys.keyType === selectedKeyType) {\n                        ({ accessToken } = selectedKeys.token);\n                    }\n                    if (selectedKeys && selectedKeys.keyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else if (selectedKeys && selectedKeys.keyType === 'SANDBOX') {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    if (selectedKeys && selectedKeys.consumerKey && selectedKeys.consumerKey !== '') {\n                        setKSGenerated(true);\n                    } else {\n                        setKSGenerated(false);\n                    }\n                    setKeys(appKeys);\n                });\n        }\n    }\n\n    useEffect(() => {\n        updateApplication();\n    }, [selectedApplication, selectedKeyType, selectedEnvironment, securitySchemeType]);\n\n    useEffect(() => {\n        if (onConfigChange) {\n            onConfigChange({\n                newAccessToken: null,\n                newSecurityScheme: securitySchemeType,\n                newUsername: username,\n                newPassword: password,\n                newSelectedEnvironment: selectedEnvironment\n            });\n        }\n    }, [username, password, selectedEnvironment, securitySchemeType]); \n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof TryOutController\n     */\n    function handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                setSelectedEnvironment(value, true);\n                if (api.type !== 'GRAPHQL') {\n                    updateSwagger(value);\n                }\n                if (environmentObject) {\n                    const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n                    setURLs(urls);\n                }\n                break;\n            case 'selectedApplication':\n                setProductionAccessToken('');\n                setSandboxAccessToken('');\n                setProductionApiKey('');\n                setSandboxApiKey('');\n                setSelectedApplication(value);\n                break;\n            case 'selectedKeyManager':\n                setSelectedKeyManager(value, true, selectedApplication);\n                break;\n            case 'selectedKeyType':\n                if (!productionAccessToken || !sandboxAccessToken) {\n                    setSelectedKeyType(value, true, selectedApplication);\n                } else {\n                    setSelectedKeyType(value, false, selectedApplication);\n                }\n                break;\n            case 'securityScheme':\n                setSecurityScheme(value);\n                break;\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'accessToken':\n                handleAccessTokenChange({ newAccessToken: value });\n                if (securitySchemeType === 'API-KEY' && selectedKeyType === 'PRODUCTION') {\n                    setProductionApiKey(value);\n                } else if (securitySchemeType === 'API-KEY' && selectedKeyType === 'SANDBOX') {\n                    setSandboxApiKey(value);\n                } else if (selectedKeyType === 'PRODUCTION') {\n                    setProductionAccessToken(value);\n                } else {\n                    setSandboxAccessToken(value);\n                }\n                break;\n            case 'advAuthHeader':\n                setAdvAuthHeader(value);\n                break;\n            case 'advAuthHeaderValue':\n                setAdvAuthHeaderValue(value);\n                break;\n            case 'selectedEndpoint':\n                setSelectedEndpoint(value);\n                break;\n            default:\n        }\n    }\n\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let isTestKeyEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        isTestKeyEnabled = api.securityScheme.includes('test_auth');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = api.apiKeyHeader ? api.apiKeyHeader : 'ApiKey';\n            prefix = '';\n        }\n        if (isTestKeyEnabled && securitySchemeType === 'TEST') {\n            authorizationHeader = 'testKey';\n            prefix = '';\n        }\n    }\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    const isPublished = api.lifeCycleStatus.toLowerCase() === 'published';\n    const showSecurityType = isPublished || isPrototypedAPI;\n\n    const authHeader = `${authorizationHeader}: ${prefix}`;\n\n    useEffect(() => {\n        if (securitySchemeType === 'API-KEY') {\n            setTokenValue(selectedKeyType === 'PRODUCTION' ? productionApiKey : sandboxApiKey);\n        } else {\n            setTokenValue(selectedKeyType === 'PRODUCTION' ? productionAccessToken : sandboxAccessToken);\n        }\n    }, [securitySchemeType, selectedKeyType, productionAccessToken, sandboxAccessToken, productionApiKey, sandboxApiKey]);\n\n    return (\n        <Root>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Box>\n                    {securitySchemeType !== 'TEST' && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <>\n                            <Box mb={1}>\n                                <Typography variant='body1'>\n                                    <Box display='flex' alignItems='center'>\n                                        {(keyManagers.length > 1 && selectedKMObject && selectedKMObject.enabled) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.one'\n                                                defaultMessage='The Resident Key Manager is selected for try out console.'\n                                            />\n                                        )}\n                                        {(selectedKMObject && !selectedKMObject.enabled) && (\n                                            <>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.TryOutController.default.km.msg.two'\n                                                        defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'But the default key manager is disabled at the moment.'}\n                                                    />\n                                                </div>\n                                            </>\n                                        )}\n                                        {(selectedKMObject && selectedKMObject.length === 0) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.three'\n                                                defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'Something went wrong while selecting the default Key manager.'}\n                                            />\n                                        )}\n                                    </Box>\n                                </Typography>\n                            </Box>\n                        </>\n                    )}\n                    {((isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && showSecurityType)\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <>\n                            <Typography variant='h5' component='h2' color='textPrimary' className={classes.categoryHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.heading'\n                                    defaultMessage='Security'\n                                />\n                            </Typography>\n                            <Typography\n                                variant='h6'\n                                component='label'\n                                id='security-type'\n                                color='textSecondary'\n                                className={classes.tryoutHeading}\n                            >\n                                <FormattedMessage\n                                    id='api.console.security.type.heading'\n                                    defaultMessage='Security Type'\n                                />\n                            </Typography>\n                            <FormControl variant='standard' component='fieldset'>\n                                <RadioGroup\n                                    name='securityScheme'\n                                    value={securitySchemeType}\n                                    onChange={handleChanges}\n                                    aria-labelledby='security-type'\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value='OAUTH'\n                                        disabled={!isOAuthEnabled}\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.oauth'\n                                                defaultMessage='OAuth'\n                                            />\n                                        )}\n                                    />\n                                    <FormControlLabel\n                                        value='API-KEY'\n                                        disabled={!isApiKeyEnabled}\n                                        control={<Radio />}\n                                        id='api-key-select-radio-button'\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.apikey'\n                                                defaultMessage='API Key'\n                                            />\n                                        )}\n                                    />\n                                    <FormControlLabel\n                                        value='BASIC'\n                                        disabled={!isBasicAuthEnabled}\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.basic'\n                                                defaultMessage='Basic'\n                                            />\n                                        )}\n                                    />\n                                </RadioGroup>\n                            </FormControl>\n                        </>\n                    )}\n                </Box>\n            </Grid>\n\n            <Grid xs={12} md={12} item>\n                <Box display='block'>\n                    {user && subscriptions\n                        && subscriptions.length > 0 && securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised)\n                        && (\n                            <SelectAppPanel\n                                subscriptions={subscriptions}\n                                handleChanges={handleChanges}\n                                selectedApplication={selectedApplication}\n                                selectedKeyManager={selectedKeyManager}\n                                selectedKeyType={selectedKeyType}\n                                keyManagers={keyManagers}\n                            />\n                        )}\n                    {subscriptions && subscriptions.length === 0 && securitySchemeType !== 'TEST'\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised) ? (\n                            <Grid x={8} md={6} className={classes.tokenType} item>\n                                <Box mb={1} alignItems='center'>\n                                    <Typography variant='body1'>\n                                        <Box display='flex'>\n                                            <WarningIcon className={classes.warningIcon} />\n                                            <div>\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </div>\n                                        </Box>\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        ) : (\n                            (!ksGenerated && securitySchemeType === 'OAUTH') && (!api.advertiseInfo\n                                || !api.advertiseInfo.advertised) && (\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    <Box mb={1} alignItems='center'>\n                                        <Typography variant='body1'>\n                                            <Box display='flex'>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.ApiConsole.keys.not.generated'\n                                                        defaultMessage={'Consumer key and secret not generated for the selected'\n                                                                + ' application on the {what} environment. '}\n                                                        values={{ what: selectedKeyType }}\n                                                    />\n                                                </div>\n                                            </Box>\n                                        </Typography>\n                                    </Box>\n                                </Grid>\n                            )\n                        )}\n                    {(!api.advertiseInfo || !api.advertiseInfo.advertised) ? (\n                        <Box display='block' justifyContent='center'>\n                            <Grid x={8} md={6} className={classes.tokenType} item>\n                                {securitySchemeType === 'BASIC' && (\n                                    <>\n                                        <Grid x={12} md={12} item>\n                                            <TextField\n                                                margin='normal'\n                                                variant='outlined'\n                                                id='username'\n                                                label={(\n                                                    <FormattedMessage\n                                                        id='username'\n                                                        defaultMessage='Username'\n                                                    />\n                                                )}\n                                                name='username'\n                                                onChange={handleChanges}\n                                                value={username || ''}\n                                                fullWidth\n                                            />\n                                            <TextField\n                                                margin='normal'\n                                                variant='outlined'\n                                                id='input-password'\n                                                label={(\n                                                    <FormattedMessage\n                                                        id='password'\n                                                        defaultMessage='Password'\n                                                    />\n                                                )}\n                                                name='password'\n                                                onChange={handleChanges}\n                                                type={showPassword ? 'text' : 'password'}\n                                                value={password || ''}\n                                                fullWidth\n                                                InputProps={{\n                                                    autoComplete: 'new-password',\n                                                    endAdornment: (\n                                                        <InputAdornment position='end'>\n                                                            <IconButton\n                                                                edge='end'\n                                                                aria-label='toggle password visibility'\n                                                                onClick={() => setShowPassword(!showPassword)}\n                                                                size='large'\n                                                            >\n                                                                {showPassword ? <Visibility /> : <VisibilityOff />}\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    ),\n                                                }}\n                                            />\n                                        </Grid>\n                                    </>\n                                )}\n\n                                {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                    <TextField\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        label={(\n                                            <FormattedMessage\n                                                id='access.token'\n                                                defaultMessage='Access Token'\n                                            />\n                                        )}\n                                        name='accessToken'\n                                        onChange={handleChanges}\n                                        type={showToken ? 'text' : 'password'}\n                                        value={tokenValue || ''}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='enter.access.token'\n                                                defaultMessage='Enter access Token'\n                                            />\n                                        )}\n                                        id='accessTokenInput'\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                            endAdornment: (\n                                                <InputAdornment position='end'>\n                                                    <IconButton\n                                                        edge='end'\n                                                        aria-label='Toggle token visibility'\n                                                        onClick={handleClickShowToken}\n                                                        size='large'\n                                                    >\n                                                        {showToken ? <Icon>visibility_off</Icon>\n                                                            : <Icon>visibility</Icon>}\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            ),\n                                            startAdornment: (\n                                                <InputAdornment\n                                                    style={{\n                                                        minWidth: (authHeader.length * 7),\n                                                    }}\n                                                    position='start'\n                                                >\n                                                    {`${authorizationHeader}: ${prefix}`}\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                )}\n                                {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                                && selectedKMObject && !selectedKMObject.enableTokenHashing && (\n                                    <>\n                                        <Button\n                                            onClick={securitySchemeType === 'API-KEY' ? generateApiKey\n                                                : generateAccessToken}\n                                            variant='contained'\n                                            color='grey'\n                                            className={classes.genKeyButton}\n                                            disabled={!user || (subscriptions && subscriptions.length === 0)\n                                                        || (!ksGenerated && securitySchemeType === 'OAUTH')}\n                                            id='gen-test-key'\n                                        >\n                                            {isUpdating && (\n                                                <CircularProgress size={15} />\n                                            )}\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.generate.test.key'\n                                                defaultMessage='GET TEST KEY'\n                                            />\n                                        </Button>\n                                        <Tooltip\n                                            placement='right'\n                                            interactive\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.TryOutConsole.access.token.tooltip'\n                                                    defaultMessage={\n                                                        'You can use your existing Access Token or '\n                                                                + 'you can generate a new Test Key.'\n                                                    }\n                                                />\n                                            )}\n                                        >\n                                            <Box m={1} mt={2}>\n                                                <IconButton\n                                                    aria-label='Use existing Access Token or generate a new Test Key'\n                                                    size='large'\n                                                >\n                                                    <HelpOutline />\n                                                </IconButton>\n                                            </Box>\n                                        </Tooltip>\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    ) : (\n                        <AdvertiseDetailsPanel\n                            classes={classes}\n                            advAuthHeader={advAuthHeader}\n                            advAuthHeaderValue={advAuthHeaderValue}\n                            handleChanges={handleChanges}\n                            selectedEndpoint={selectedEndpoint}\n                            api={api}\n                        />\n                    )}\n                    {(!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <Box display='flex' justifyContent='center' className={classes.gatewayEnvironment}>\n                            <Grid xs={12} md={6} item>\n                                {(environments && environments.length > 0) && (\n                                    <>\n                                        <Typography\n                                            variant='h5'\n                                            component='h3'\n                                            color='textPrimary'\n                                            className={classes.categoryHeading}\n                                        >\n                                            <FormattedMessage\n                                                id='api.console.gateway.heading'\n                                                defaultMessage='Gateway'\n                                            />\n                                        </Typography>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            id='environment'\n                                            label={(\n                                                <FormattedMessage\n                                                    defaultMessage='Environment'\n                                                    id='Apis.Details.ApiConsole.environment'\n                                                />\n                                            )}\n                                            value={selectedEnvironment || (environments && environments[0].name)}\n                                            name='selectedEnvironment'\n                                            onChange={handleChanges}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    defaultMessage='Please select an environment'\n                                                    id='Apis.Details.ApiConsole.SelectAppPanel.environment'\n                                                />\n                                            )}\n                                            margin='normal'\n                                            variant='outlined'\n                                        >\n                                            {environments && environments.length > 0 && (\n                                                <MenuItem value='' disabled className={classes.menuItem}>\n                                                    <em>\n                                                        <FormattedMessage\n                                                            id='api.gateways'\n                                                            defaultMessage='API Gateways'\n                                                        />\n                                                    </em>\n                                                </MenuItem>\n                                            )}\n                                            {environments && (\n                                                environments.map((env) => (\n                                                    <MenuItem\n                                                        value={env.name}\n                                                        key={env.name}\n                                                        className={classes.menuItem}\n                                                    >\n                                                        {env.displayName}\n                                                    </MenuItem>\n                                                )))}\n                                        </TextField>\n                                        {api && api.type === 'GRAPHQL' && (\n                                            <>\n                                                <Typography className={classes.verticalSpace} variant='body1'>\n                                                    <a\n                                                        className={classes.link + ' ' + classes.loadMoreLink}\n                                                        onClick={() => setShowMoreGWUrls(!showMoreGWUrls)}\n                                                        onKeyDown={() => setShowMoreGWUrls(!showMoreGWUrls)}\n                                                    >\n                                                        {!showMoreGWUrls ? (\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.more'}\n                                                                    defaultMessage='Show More'\n                                                                />\n                                                                <ExpandMoreIcon />\n\n                                                            </>\n                                                        ) : (\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.less'}\n                                                                    defaultMessage='Show Less'\n                                                                />\n                                                                <ExpandLessIcon />\n                                                            </>\n                                                        )}\n                                                    </a>\n                                                </Typography>\n                                                {showMoreGWUrls && (\n                                                    <>\n                                                        <TextField\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    defaultMessage='Gateway URLs'\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.more.http.URLs'}\n                                                                />\n                                                            )}\n                                                            value={URLs && URLs.https}\n                                                            name='selectedHTTPURL'\n                                                            fullWidth\n                                                            margin='normal'\n                                                            variant='outlined'\n                                                            InputProps={URLs && URLs.https}\n                                                        />\n                                                        {URLs && URLs.wss\n                                                        && (\n                                                            <TextField\n                                                                label={(\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Subscription Gateway URLs'\n                                                                        id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                        + '.environment.show.more.subscription.URLs'}\n                                                                    />\n                                                                )}\n                                                                value={URLs && URLs.wss}\n                                                                name='selectedWSURL'\n                                                                fullWidth\n                                                                margin='normal'\n                                                                variant='outlined'\n                                                                InputProps={URLs && URLs.wss}\n                                                            />\n                                                        )}\n                                                    </>\n                                                )}\n                                            </>\n                                        )}\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    )}\n                </Box>\n            </Grid>\n        </Root>\n    );\n}\n\nTryOutController.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default (TryOutController);\n"],"names":["props","classes","advAuthHeader","advAuthHeaderValue","handleChanges","selectedEndpoint","api","advertiseInfo","transport","securityScheme","authorizationHeader","availableTransports","join","toUpperCase","securitySchemes","forEach","scheme","index","substring","length","React","Box","display","justifyContent","className","authHeader","Grid","x","md","centerItems","Typography","variant","component","id","color","tryoutHeading","FormattedMessage","defaultMessage","container","spacing","direction","tokenType","xs","style","paddingLeft","item","TextField","margin","label","name","onChange","value","fullWidth","paddingRight","select","helperText","apiExternalProductionEndpoint","MenuItem","menuItem","apiExternalSandboxEndpoint","marginTop","MuiAlert","severity","sx","bgcolor","AlertTitle","PREFIX","Root","styled","_ref","theme","fontWeight","palette","getContrastText","background","paper","selectedApplication","selectedKeyType","subscriptions","handleSelectPanelChange","event","target","SelectProps","map","sub","applicationInfo","applicationId","key","FormControl","RadioGroup","row","find","status","FormControlLabel","control","Radio","grid","genKeyButton","gatewayEnvironment","categoryHeading","tooltip","warningIcon","loadMoreLink","link","width","padding","marginBottom","grey","height","marginLeft","cursor","fontSize","marginRight","textDecoration","default","TryOutController","securitySchemeType","selectedEnvironment","environments","productionAccessToken","sandboxAccessToken","setKeys","setSelectedKeyType","setSelectedKeyManager","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","scopes","setSecurityScheme","setUsername","setPassword","username","password","updateSwagger","setProductionApiKey","setSandboxApiKey","productionApiKey","sandboxApiKey","environmentObject","setURLs","setAdvAuthHeader","setAdvAuthHeaderValue","setSelectedEndpoint","URLs","onConfigChange","selectedKeyManager","showToken","setShowToken","useState","showPassword","setShowPassword","isUpdating","setIsUpdating","notFound","setNotFound","setSubscriptions","setSelectedApplication","keyManagers","setKeyManagers","selectedKMObject","setSelectedKMObject","ksGenerated","setKSGenerated","showMoreGWUrls","setShowMoreGWUrls","tokenValue","setTokenValue","apiID","restApi","Api","user","AuthManager","getUser","handleAccessTokenChange","_ref2","newAccessToken","newSecurityScheme","newUsername","newPassword","newSelectedEnvironment","type","urls","elm","environmentName","useEffect","subscriptionsList","newSelectedApplication","keys","accessToken","selectedKeyTypes","lifeCycleStatus","getSubscriptions","then","subscriptionsResponse","obj","list","filter","Application","get","application","getKeys","appKeys","keyType","token","catch","error","getKeyManagers","response","responseKeyManagerList","body","push","filteredKMs","km","selectedKeys","consumerKey","updateApplication","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","isTestKeyEnabled","prefix","includes","apiKeyHeader","isPrototypedAPI","toLowerCase","showSecurityType","advertised","mb","alignItems","enabled","WarningIcon","disabled","SelectAppPanel","values","what","AdvertiseDetailsPanel","InputProps","autoComplete","endAdornment","InputAdornment","position","IconButton","edge","onClick","size","Visibility","VisibilityOff","Icon","startAdornment","minWidth","enableTokenHashing","Button","generateApiKey","console","log","apikey","generateToken","CircularProgress","Tooltip","placement","interactive","title","m","mt","HelpOutline","env","displayName","verticalSpace","onKeyDown","ExpandLessIcon","ExpandMoreIcon","https","wss","propTypes","PropTypes","isRequired","inputAdornmentStart"],"sourceRoot":""}