{"version":3,"file":"ApiChat.bb1eb22a59a0eebcc9e2.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/ApiChatPoweredBy.tsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/ApiChatBanner.tsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/TextInput/TextInput.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/ApiChatExecute.tsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/ConfigureKeyDrawer.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/SampleQueryCard.tsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/components/ApiChatResponse.tsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiChat/ApiChat.jsx"],"sourcesContent":["/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport { FormattedMessage } from 'react-intl';\nimport KeyboardBackspaceIcon from '@mui/icons-material/KeyboardBackspace';\nimport SettingsOutlinedIcon from '@mui/icons-material/SettingsOutlined';\n\ninterface ApiChatPoweredByProps {\n    openConfigureKey: any;\n    showSampleQueries?: boolean;\n    goBack: () => void;\n    disableGoBack: boolean;\n    disableConfigureKey: boolean;\n}\n\n/**\n * Renders the API Chat powered by section.\n * @returns {TSX} API Chat powered by section to render.\n */\nconst ApiChatPoweredBy: React.FC<ApiChatPoweredByProps> = ({\n    openConfigureKey,\n    goBack,\n    disableGoBack,\n    disableConfigureKey,\n}) => {\n    return (\n        <Box display='flex' width='100%' m={3}>\n            <Box display='flex' flexDirection='column' flexGrow={1}>\n                <Box display='flex'>\n                    <Typography id='itest-api-details-api-chat-title' variant='h3' component='h3'>\n                        <FormattedMessage\n                            id='Apis.Details.ApiChat.components.ApiChatPoweredBy.apiChatMainHeader'\n                            defaultMessage='API Chat'\n                        />\n                    </Typography>\n                    <Chip\n                        label='Experimental'\n                        variant='outlined'\n                        size='small'\n                        color='primary'\n                        sx={{\n                            ml: 1,\n                        }}\n                    />\n                </Box>\n                <Typography variant='body2' color='textSecondary' component='p'>\n                    <FormattedMessage\n                        id='Apis.Details.ApiChat.components.ApiChatPoweredBy.poweredByText'\n                        defaultMessage='Powered by Azure OpenAI'\n                    />\n                </Typography>\n            </Box>\n            <Box>\n                <Box display='flex' pr={4}>\n                    <Box mr={3}>\n                        <Button\n                            startIcon={<KeyboardBackspaceIcon />}\n                            id='go-back'\n                            variant='text'\n                            size='small'\n                            onClick={goBack}\n                            disabled={disableGoBack}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.ApiChat.components.ApiChatPoweredBy.goBack'\n                                defaultMessage='Go Back'\n                            />\n                        </Button>\n                    </Box>\n                    <Box>\n                        <Button\n                            startIcon={<SettingsOutlinedIcon />}\n                            id='view-sample-queries'\n                            variant='text'\n                            size='small'\n                            onClick={openConfigureKey}\n                            disabled={disableConfigureKey}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.ApiChat.components.ApiChatPoweredBy.configureKey'\n                                defaultMessage='Configure Key'\n                            />\n                        </Button>\n                    </Box>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default ApiChatPoweredBy;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n// @ts-ignore\nimport { app } from 'Settings';\nimport { styled } from '@mui/material/styles';\n\nconst PREFIX = 'ApiChatBanner';\n\nconst classes = {\n    tryAiBannerCont: `${PREFIX}-tryAiBannerCont`,\n    tryAiBannerImgWrap: `${PREFIX}-tryAiBannerImgWrap`,\n    tryAiBannerContentWrap: `${PREFIX}-tryAiBannerContentWrap`,\n    tryAiBannerContent: `${PREFIX}-tryAiBannerContent`,\n    tryAiBannerTriangle: `${PREFIX}-tryAiBannerTriangle`,\n};\n\nconst Root = styled('div')(({ theme }: any) => ({\n    [`& .${classes.tryAiBannerCont}`]: {\n        display: 'flex',\n        paddingLeft: theme.spacing(1),\n        gridGap: theme.spacing(1.5),\n        maxWidth: theme.spacing(85),\n    },\n    [`& .${classes.tryAiBannerImgWrap}`]: {\n        flex: `0 0 ${theme.spacing(15)}px`,\n        maxWidth: theme.spacing(15),\n        fontSize: theme.spacing(15),\n        display: 'flex',\n        alignItems: 'center',\n    },\n    [`& .${classes.tryAiBannerContentWrap}`]: {\n        flexGrow: 1,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    [`& .${classes.tryAiBannerContent}`]: {\n        background: theme.palette.grey[100],\n        padding: theme.spacing(2),\n        borderRadius: theme.spacing(0, 2, 2, 2),\n        position: 'relative',\n    },\n    [`& .${classes.tryAiBannerTriangle}`]: {\n        position: 'absolute',\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        top: 0,\n        left: theme.spacing(-3),\n        overflow: 'hidden',\n        '&:before': {\n            content: '\"\"',\n            display: 'block',\n            width: '200%',\n            height: '200%',\n            position: 'absolute',\n            borderRadius: '50%',\n            top: 0,\n            right: 0,\n            boxShadow: `${theme.spacing(2.5)} ${theme.spacing(-3.75)} 0 0 ${theme.palette.grey[100]}`,\n        },\n    },\n}));\n\nconst ApiChatBanner: React.FC = () => {\n    const intl = useIntl();\n    return (\n        <Root>\n            <Box className={classes.tryAiBannerCont}>\n                <Box className={classes.tryAiBannerImgWrap}>\n                    <img\n                        alt='API Chat'\n                        src={`${app.context}/site/public/images/ai/ApiChat.svg`}\n                    />\n                </Box>\n                <Box className={classes.tryAiBannerContentWrap}>\n                    <Box className={classes.tryAiBannerContent}>\n                        <Box className={classes.tryAiBannerTriangle} />\n                        <Typography variant='h5'>\n                            {intl.formatMessage({\n                                id: 'Apis.Details.ApiChat.components.ApiChatBanner.apiChatMainTextHeader',\n                                defaultMessage: 'Your API is now equipped with an Intelligent Agent!',\n                            })}\n                        </Typography>\n                        <Typography variant='caption'>\n                            {intl.formatMessage({\n                                id: 'Apis.Details.ApiChat.components.ApiChatBanner.apiChatMainTextContent',\n                                defaultMessage:\n                    'Effortlessly test your APIs in natural language with our API Chat Agent powered by Azure '\n                    + \"OpenAI's cutting-edge language models.\",\n                            })}\n                        </Typography>\n                    </Box>\n                </Box>\n            </Box>\n        </Root>\n    );\n};\n\nexport default ApiChatBanner;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { forwardRef } from 'react';\nimport {\n    Box,\n    InputBase,\n    Typography,\n} from '@mui/material';\nimport clsx from 'clsx';\nimport { styled, alpha } from '@mui/material/styles';\n\nconst PREFIX = 'TextInput';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    rootSmall: `${PREFIX}-rootSmall`,\n    rootLarge: `${PREFIX}-rootLarge`,\n    readOnlyDefault: `${PREFIX}-readOnlyDefault`,\n    readOnlyPlain: `${PREFIX}-readOnlyPlain`,\n    rounded: `${PREFIX}-rounded`,\n    focused: `${PREFIX}-focused`,\n    error: `${PREFIX}-error`,\n    textInput: `${PREFIX}-textInput`,\n    textInputLarge: `${PREFIX}-textInputLarge`,\n    inputAdornedEnd: `${PREFIX}-inputAdornedEnd`,\n    inputAdornedEndAlignTop: `${PREFIX}-inputAdornedEndAlignTop`,\n    textarea: `${PREFIX}-textarea`,\n    inputGroup: `${PREFIX}-inputGroup`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(1.5, 1.5),\n        width: '100%',\n        minHeight: theme.spacing(5),\n        backgroundColor: theme.palette.common.white,\n        border: `1px solid ${alpha(theme.palette.primary.main, 0.5)}`,\n        borderRadius: 5,\n        '&$multiline': {\n            height: 'auto',\n            resize: 'auto',\n        },\n        '&$multilineReadonly': {\n            height: 'auto',\n            resize: 'none',\n            '& $textarea': {\n                height: 'auto',\n                resize: 'none',\n            },\n        },\n        '&$multilineResizeIndicator': {\n            height: 'auto',\n            resize: 'none',\n            '& $textarea': {\n                height: 'auto',\n                resize: 'none',\n            },\n        },\n        '&$rounded': {\n            paddingLeft: theme.spacing(2),\n        },\n        '&:hover': {\n            borderColor: `${alpha(theme.palette.primary.main, 0.5)}`,\n        },\n    },\n    [`& .${classes.rootSmall}`]: {\n        minHeight: theme.spacing(4),\n    },\n    [`& .${classes.rootLarge}`]: {\n        minHeight: theme.spacing(7),\n        borderRadius: 12,\n        padding: theme.spacing(1, 1, 1, 3),\n    },\n    [`& .${classes.readOnlyDefault}`]: {\n        boxShadow: `0 0 0 1px ${alpha(\n            theme.palette.common.black,\n            0.05,\n        )}, inset 0 2px 2px ${alpha(theme.palette.common.black, 0.05)}`,\n        border: 'none',\n        backgroundColor: theme.palette.secondary.light,\n    },\n    [`& .${classes.readOnlyPlain}`]: {\n        boxShadow: 'none',\n        border: 'none',\n        backgroundColor: theme.palette.common.white,\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    [`& .${classes.rounded}`]: {\n        borderRadius: theme.spacing(2.5),\n    },\n    [`& .${classes.focused}`]: {\n        borderColor: theme.palette.primary.light,\n        borderWidth: 1,\n    },\n    [`& .${classes.error}`]: {\n        background: theme.palette.error.light,\n        borderColor: theme.palette.error.main,\n        boxShadow: `0 0 0 1px ${theme.palette.error.light}, inset 0 2px 2px ${alpha(\n            theme.palette.error.light,\n            0.07,\n        )}`,\n        '&:hover': {\n            borderColor: theme.palette.error.main,\n        },\n    },\n    [`& .${classes.textInput}`]: {\n        minHeight: theme.spacing(2.5),\n        padding: theme.spacing(0.125, 0),\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: theme.typography.body1.fontWeight,\n        lineHeight: theme.typography.body1.lineHeight,\n    },\n    [`& .${classes.textInputLarge}`]: {\n        fontSize: theme.typography.overline.fontSize,\n        fontWeight: theme.typography.overline.fontWeight,\n        lineHeight: theme.typography.overline.lineHeight,\n    },\n    [`& .${classes.inputAdornedEnd}`]: {\n        '& .MuiInputAdornment-root': {\n            marginRight: theme.spacing(-1),\n        },\n    },\n    [`& .${classes.inputAdornedEndAlignTop}`]: {\n        '& .MuiInputAdornment-root': {\n            alignSelf: 'flex-end',\n            height: 'auto',\n            marginBottom: theme.spacing(0.25),\n        },\n    },\n    [`& .${classes.textarea}`]: {\n        resize: 'both',\n    },\n    [`& .${classes.inputGroup}`]: {\n        position: 'relative',\n    },\n}));\n\nconst TextInput = (\n    props,\n    ref,\n) => {\n    const {\n        label,\n        width,\n        readOnly,\n        error,\n        helperText,\n        rows,\n        multiline,\n        optional,\n        loading,\n        tooltip,\n        inputTooltip,\n        size = 'medium',\n        info,\n        actions,\n        testId,\n        variant = 'default',\n        rounded = false,\n        resizeIndicator = true,\n        ...rest\n    } = props;\n\n    return (\n        <Root>\n            <Box width={width}>\n                <Box className={classes.inputGroup}>\n                    <InputBase\n                        ref={ref}\n                        classes={{\n                            root: clsx({\n                                [classes.root]: true,\n                                [classes.rootSmall]: size === 'small',\n                                [classes.rootLarge]: size === 'large',\n                                [classes.readOnlyDefault]: readOnly && variant === 'default',\n                                [classes.readOnlyPlain]: readOnly && variant === 'plain',\n                                [classes.multiline]: multiline,\n                                [classes.multilineReadonly]: multiline && readOnly,\n                                [classes.multilineResizeIndicator]:\n                                    multiline && !resizeIndicator,\n                                [classes.rounded]: rounded,\n                            }),\n                            focused: classes.focused,\n                            error: classes.error,\n                            inputMultiline: classes.textarea,\n                            input: clsx({\n                                [classes.textInput]: true,\n                                [classes.textInputLarge]: size === 'large',\n                            }),\n                            adornedEnd: clsx({\n                                [classes.inputAdornedEnd]: true,\n                                [classes.inputAdornedEndAlignTop]: multiline,\n                            }),\n                        }}\n                        readOnly={readOnly}\n                        {...rest}\n                        error={error}\n                        rows={rows}\n                        multiline={multiline}\n                        data-cyid={testId}\n                    />\n                </Box>\n                {helperText && (\n                    <Box display='flex' alignItems='center' ml={1}>\n                        <Typography variant='body2' component='p'>\n                            {helperText}\n                        </Typography>\n                    </Box>\n                )}\n            </Box>\n        </Root>\n    );\n};\n\nexport default forwardRef(TextInput);\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport Button from '@mui/material/Button';\nimport { Box, Typography } from '@mui/material';\nimport Send from '@mui/icons-material/SendOutlined';\nimport { styled } from '@mui/system';\nimport TextInput from './TextInput/TextInput';\n\nconst PREFIX = 'ApiChatExecute';\n\nconst classes = {\n    tryAiBottom: `${PREFIX}-tryAiBottom`,\n    tryAiBottomInner: `${PREFIX}-tryAiBottomInner`,\n    reExecuteWrap: `${PREFIX}-reExecuteWrap`,\n    tryAiBottomTextInputWrap: `${PREFIX}-tryAiBottomTextInputWrap`,\n    disclaimerText: `${PREFIX}-disclaimerText`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.tryAiBottom}`]: {\n        position: 'sticky',\n        left: 0,\n        right: 0,\n        marginLeft: theme.spacing(-1),\n        marginRight: theme.spacing(-1),\n    },\n    [`& .${classes.tryAiBottomInner}`]: {\n        padding: theme.spacing(3, 1),\n    },\n    [`& .${classes.reExecuteWrap}`]: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    [`& .${classes.tryAiBottomTextInputWrap}`]: {\n        maxWidth: '100%',\n        overflow: 'hidden',\n    },\n    [`& .${classes.disclaimerText}`]: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n}));\n\nconst ExecuteQuery = styled(Send)({\n    transform: 'rotate(-40deg)',\n    marginBottom: '5px',\n});\n\ninterface ApiChatExecuteProps {\n    isAgentRunning: boolean;\n    isAgentTerminating: boolean;\n    lastQuery: string;\n    handleStopAndReExecute: () => Promise<void>;\n    inputQuery: string;\n    handleQueryChange: (\n      event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => void;\n    isEnrichingSpec: boolean;\n    specEnrichmentError: string;\n    handleExecute: () => Promise<void>;\n    isExecuteDisabled: boolean;\n}\n\n/**\n * Renders the API Chat Execute component.\n * @returns {TSX} API Chat Execute component.\n */\nconst ApiChatExecute: React.FC<ApiChatExecuteProps> = ({\n    isAgentRunning,\n    isAgentTerminating,\n    lastQuery,\n    handleStopAndReExecute,\n    inputQuery,\n    handleQueryChange,\n    isEnrichingSpec,\n    specEnrichmentError,\n    handleExecute,\n    isExecuteDisabled,\n}) => {\n    const intl = useIntl();\n    const QUERY_CHARACTER_LIMIT = 500;\n\n    return (\n        <Root>\n            <Box className={classes.tryAiBottom}>\n                <Box className={classes.tryAiBottomInner}>\n                    {(isAgentRunning || lastQuery) && (\n                        <Box className={classes.reExecuteWrap}>\n                            <Button\n                                variant='outlined'\n                                onClick={handleStopAndReExecute}\n                                id='stop-reexecute-button'\n                                disabled={specEnrichmentError !== '' || isAgentTerminating}\n                            >\n                                {isAgentRunning ? (\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiChat.components.ApiChatExecute.stopButton.label'\n                                        defaultMessage='Stop Execution'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiChat.components.ApiChatExecute.rexecuteButton.label'\n                                        defaultMessage='Re-execute'\n                                    />\n                                )}\n                            </Button>\n                        </Box>\n                    )}\n                    <Box className={classes.tryAiBottomTextInputWrap} pl={2}>\n                        <TextInput\n                            fullWidth\n                            name='query'\n                            value={inputQuery}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Details.ApiChat.components.ApiChatExecute.queryInput.placeholder',\n                                defaultMessage: 'Type the test scenario here...',\n                            })}\n                            onChange={handleQueryChange}\n                            testId='nl-query-input'\n                            disabled={isAgentRunning || isEnrichingSpec || specEnrichmentError !== ''\n                                || isExecuteDisabled}\n                            multiline\n                            sx={{\n                                '& .TextInput-textarea': {\n                                    resize: 'none',\n                                },\n                            }}\n                            resizeIndicator={false}\n                            onKeyPress={(event: { key: string; preventDefault: () => void; }) => {\n                                if (event.key === 'Enter') {\n                                    event.preventDefault();\n                                    handleExecute();\n                                }\n                            }}\n                            endAdornment={(\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={handleExecute}\n                                    id='run-agent-button'\n                                    startIcon={<ExecuteQuery />}\n                                    sx={{\n                                        marginLeft: 1,\n                                    }}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiChat.components.ApiChatExecute.executeButton.label'\n                                        defaultMessage='Execute'\n                                    />\n                                </Button>\n                            )}\n                            inputProps={{\n                                maxLength: QUERY_CHARACTER_LIMIT,\n                            }}\n                        />\n                        <Box display='flex' justifyContent='flex-end' mt={1} mr={2}>\n                            <Typography variant='caption'>\n                                {inputQuery.length}\n                                /\n                                {QUERY_CHARACTER_LIMIT}\n                            </Typography>\n                        </Box>\n                        <Box className={classes.disclaimerText}>\n                            <Typography variant='body2' color='textSecondary' component='p'>\n                                {intl.formatMessage({\n                                    id: 'Apis.Details.ApiChat.components.ApiChatExecute.disclaimer.label',\n                                    defaultMessage:\n                    'It is prudent to exercise a degree of caution and thoughtfulness, as language models'\n                    + ' may exhibit some degree of unpredictability at times.',\n                                })}\n                            </Typography>\n                        </Box>\n                    </Box>\n                </Box>\n            </Box>\n        </Root>\n    );\n};\n\nexport default ApiChatExecute;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useContext, useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Drawer from '@mui/material/Drawer';\nimport {\n    Box, Grid, Paper, Typography, Button,\n} from '@mui/material';\nimport { FormattedMessage } from 'react-intl';\nimport InfoIcon from '@mui/icons-material/Info';\nimport AuthManager from 'AppData/AuthManager';\nimport { ApiContext } from 'AppComponents/Apis/Details/ApiContext';\nimport Progress from 'AppComponents/Shared/Progress';\nimport TryOutController from 'AppComponents/Shared/ApiTryOut/TryOutController';\nimport Application from 'AppData/Application';\nimport IconButton from '@mui/material/IconButton';\nimport { Close } from '@mui/icons-material';\n\nconst ConfigureKeyDrawer = ({\n    isDrawerOpen,\n    updateDrawerOpen,\n    setTestAccessToken,\n    onConfigChange,\n}) => {\n    const [api, setApi] = useState(null);\n    const [securityScheme, setSecurityScheme] = useState('OAUTH');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [scopes, setScopes] = useState([]);\n    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n    const [keys, setKeys] = useState([]);\n    const [selectedEnvironment, setSelectedEnvironment] = useState('');\n    const [productionAccessToken, setProductionAccessToken] = useState('');\n    const [sandboxAccessToken, setSandboxAccessToken] = useState('');\n    const [environments, setEnvironments] = useState([]);\n    const [selectedKeyManager, setSelectedKeyManager] = useState('Resident Key Manager');\n    const [productionApiKey, setProductionApiKey] = useState('');\n    const [sandboxApiKey, setSandboxApiKey] = useState('');\n    const [advAuthHeader, setAdvAuthHeader] = useState('Authorization');\n    const [advAuthHeaderValue, setAdvAuthHeaderValue] = useState('');\n    const [selectedEndpoint, setSelectedEndpoint] = useState('PRODUCTION');\n\n    const user = AuthManager.getUser();\n    const { api: apiObj } = useContext(ApiContext);\n\n    useEffect(() => {\n        setApi(apiObj);\n    }, [apiObj]);\n\n    useEffect(() => {\n        if (api) {\n            if (api.endpointURLs) {\n                setEnvironments(\n                    api.endpointURLs.map((endpoint) => ({\n                        name: endpoint.environmentName,\n                        displayName: endpoint.environmentDisplayName,\n                    })),\n                );\n            }\n\n            if (api.scopes) {\n                const scopeList = api.scopes.map((scope) => scope.key);\n                setScopes(scopeList);\n            }\n\n            let defaultSecurityScheme = 'OAUTH';\n            if (!api.securityScheme.includes('oauth2')) {\n                defaultSecurityScheme = api.securityScheme.includes('api_key')\n                    ? 'API-KEY'\n                    : 'BASIC';\n            }\n\n            if (environments && environments.length > 0) {\n                setSelectedEnvironment(environments[0].name);\n            }\n\n            setProductionAccessToken(productionAccessToken);\n            setSandboxAccessToken(sandboxAccessToken);\n            setSecurityScheme(defaultSecurityScheme);\n        }\n    }, [api]);\n\n    useEffect(() => {\n        // Update selected environment only when environments change\n        if (api) {\n            if (environments && environments.length > 0) {\n                setSelectedEnvironment(environments[0].name);\n            }\n        }\n    }, [environments, api]);\n\n    useEffect(() => {\n        updateDrawerOpen(isDrawerOpen);\n    }, [isDrawerOpen]);\n\n    // Load the access token for the given key type\n    const updateAccessToken = (selectedApplication) => {\n        let accessToken;\n        if (keys.get(selectedKeyManager) && keys.get(selectedKeyManager).keyType === selectedKeyType) {\n            ({ accessToken } = keys.get(selectedKeyManager).token);\n            if (selectedKeyType === 'PRODUCTION') {\n                setProductionAccessToken(accessToken);\n            } else {\n                setSandboxAccessToken(accessToken);\n            }\n        } else {\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(selectedKeyType);\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(selectedKeyManager)\n                        && appKeys.get(selectedKeyManager).keyType === selectedKeyType) {\n                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                    }\n                    if (appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    setKeys(appKeys);\n                });\n        }\n    };\n\n    // Update the selected key manager\n    const updateSelectedKeyManager = (keyManager, isUpdateToken, selectedApplication) => {\n        if (isUpdateToken) {\n            setSelectedKeyManager(keyManager);\n            updateAccessToken(selectedApplication);\n        } else {\n            setSelectedKeyManager(keyManager);\n        }\n    };\n\n    if (api == null) {\n        return <Progress />;\n    }\n\n    return (\n        <>\n            <Drawer\n                title='Configure Key'\n                anchor='right'\n                open={isDrawerOpen}\n                onClose={() => updateDrawerOpen(false)}\n                id='api-chat-configure-key-drawer'\n                PaperProps={{\n                    sx: { width: '70%', borderRadius: 1 },\n                }}\n            >\n                <Box p={2}>\n                    <Grid container justifyContent='space-between' alignItems='center'>\n                        <Grid item xs={10}>\n                            <Typography variant='h6'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiChat.components.ConfigureKeyDrawer.title'\n                                    defaultMessage='Configure Key'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2} display='flex' justifyContent='flex-end'>\n                            <IconButton onClick={() => updateDrawerOpen(false)} size='large'>\n                                <Close />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Grid container padding={2}>\n                        {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                            <Paper sx={{ padding: 1 }}>\n                                <Typography variant='h5' component='h3'>\n                                    <InfoIcon sx={{ verticalAlign: 'middle', marginBottom: 0.5 }} />\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p' align='justify' sx={{ padding: 1 }}>\n                                    <FormattedMessage\n                                        id='api.console.require.access.token'\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        )}\n                    </Grid>\n                    <Grid container justifyContent='center' spacing={0}>\n                        <TryOutController\n                            setSecurityScheme={setSecurityScheme}\n                            securitySchemeType={securityScheme}\n                            setSelectedEnvironment={setSelectedEnvironment}\n                            selectedEnvironment={selectedEnvironment}\n                            productionAccessToken={productionAccessToken}\n                            setProductionAccessToken={setProductionAccessToken}\n                            sandboxAccessToken={sandboxAccessToken}\n                            setSandboxAccessToken={setSandboxAccessToken}\n                            environments={environments}\n                            scopes={scopes}\n                            setUsername={setUsername}\n                            setPassword={setPassword}\n                            username={username}\n                            password={password}\n                            setSelectedKeyType={setSelectedKeyType}\n                            selectedKeyType={selectedKeyType}\n                            setSelectedKeyManager={updateSelectedKeyManager}\n                            selectedKeyManager={selectedKeyManager}\n                            setKeys={setKeys}\n                            setProductionApiKey={setProductionApiKey}\n                            setSandboxApiKey={setSandboxApiKey}\n                            productionApiKey={productionApiKey}\n                            sandboxApiKey={sandboxApiKey}\n                            setAdvAuthHeader={setAdvAuthHeader}\n                            setAdvAuthHeaderValue={setAdvAuthHeaderValue}\n                            advAuthHeader={advAuthHeader}\n                            advAuthHeaderValue={advAuthHeaderValue}\n                            setSelectedEndpoint={setSelectedEndpoint}\n                            selectedEndpoint={selectedEndpoint}\n                            api={api}\n                            URLs={null}\n                            autoGenerateToken\n                            setTestAccessToken={setTestAccessToken}\n                            onConfigChange={onConfigChange}\n                        />\n                    </Grid>\n                    <Grid container justifyContent='right' pr={2}>\n                        <Button\n                            variant='outlined'\n                            type='submit'\n                            color='primary'\n                            data-testid='key-details-cancel'\n                            onClick={() => updateDrawerOpen(false)}\n                            sx={{\n                                marginRight: '1em',\n                            }}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.ApiChat.components.ConfigureKeyDrawer.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            variant='contained'\n                            type='submit'\n                            color='primary'\n                            data-testid='key-details-save'\n                            onClick={() => updateDrawerOpen(false)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.ApiChat.components.ConfigureKeyDrawer.done'\n                                defaultMessage='Done'\n                            />\n                        </Button>\n                    </Grid>\n                </Box>\n            </Drawer>\n        </>\n    );\n};\n\nConfigureKeyDrawer.propTypes = {\n    isDrawerOpen: PropTypes.bool.isRequired,\n    updateDrawerOpen: PropTypes.func.isRequired,\n    setTestAccessToken: PropTypes.func.isRequired,\n    onConfigChange: PropTypes.func.isRequired,\n};\n\nexport default ConfigureKeyDrawer;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { CardActionArea } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport { styled, alpha } from '@mui/material/styles';\n\nconst PREFIX = 'SampleQueryCard';\n\nconst classes = {\n    sampleQuery: `${PREFIX}-sampleQuery`,\n    sampleQueryCard: `${PREFIX}-SampleQueryCard`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.sampleQuery}`]: {\n        maxHeight: '25px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    [`& .${classes.sampleQueryCard}`]: {\n        '&:hover': {\n            backgroundColor: 'transparent',\n            border: `1px solid ${alpha(theme.palette.primary.main, 0.5)}`,\n        },\n    },\n}));\n\nexport interface SampleQuery {\n    scenario: string;\n    query: string;\n}\n\ninterface SampleQueryCardProps {\n  onExecuteClick: (query: string) => void;\n  queryData: SampleQuery;\n  onCopyClick: (query: string) => void;\n  disabled: boolean;\n}\n\nconst SampleQueryCard: React.FC<SampleQueryCardProps> = ({\n    onExecuteClick,\n    queryData,\n    onCopyClick,\n    disabled,\n}) => {\n    const intl = useIntl();\n\n    const copyText = intl.formatMessage({\n        id: 'Apis.Details.ApiChat.components.CopyToClipboard.copyText',\n        defaultMessage: 'Copy to Clipboard',\n    });\n    const copiedText = intl.formatMessage({\n        id: 'Apis.Details.ApiChat.components.CopyToClipboard.copiedText',\n        defaultMessage: 'Copied',\n    });\n\n    const [copyBtnText, setCopyBtnText] = useState(copyText);\n\n    const handleTooltipClose = () => {\n        setCopyBtnText(copyText);\n    };\n\n    const handleCopyClick = (query: string) => {\n        setCopyBtnText(copiedText);\n        onCopyClick(query);\n    };\n\n    return (\n        <Root>\n            <Card className={classes.sampleQueryCard}>\n                <CardActionArea\n                    disabled={disabled}\n                    onClick={() => onExecuteClick(queryData.query)}\n                >\n                    <CardContent>\n                        <Box display='flex' flexDirection='column' height={1}>\n                            <Box mb={2}>\n                                <Typography variant='body1'>\n                                    {queryData.scenario}\n                                </Typography>\n                                <Typography variant='body2' color='textSecondary' component='p' className={classes.sampleQuery}>\n                                    {queryData.query}\n                                </Typography>\n                            </Box>\n                            <Box mt='auto'>\n                                <Box>\n                                    <Button\n                                        size='small'\n                                        id='sample-query-execute'\n                                        variant='outlined'\n                                        disabled={disabled}\n                                        onClick={(e) => {\n                                            onExecuteClick(queryData.query);\n                                            e.stopPropagation();\n                                        }}\n                                    >\n                                        {intl.formatMessage({\n                                            id: 'Apis.Details.ApiChat.components.SampleQueryCard.executeButton',\n                                            defaultMessage: 'Execute',\n                                        })}\n                                    </Button>\n                                    <Tooltip\n                                        title={copyBtnText}\n                                        onClose={handleTooltipClose}\n                                        placement='top-end'\n                                    >\n                                        <IconButton\n                                            id='sample-query-copy'\n                                            size='small'\n                                            onClick={(e: any) => {\n                                                handleCopyClick(queryData.query);\n                                                e.stopPropagation();\n                                            }}\n                                            sx={{ ml: 1 }}\n                                        >\n                                            <ContentCopyIcon fontSize='inherit' />\n                                        </IconButton>\n                                    </Tooltip>\n                                </Box>\n                            </Box>\n                        </Box>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </Root>\n    );\n};\n\nexport default SampleQueryCard;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Tooltip from '@mui/material/Tooltip';\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport DangerousIcon from '@mui/icons-material/Dangerous';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { styled, alpha } from '@mui/material/styles';\nimport { CircularProgress, Typography } from '@mui/material';\nimport MonacoEditor from 'react-monaco-editor';\nimport xmlFormat from 'xml-formatter';\nimport Utils from 'AppData/Utils';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\n\nconst PREFIX = 'ApiChatResponse';\n\nconst classes = {\n    finalOutcomeContent: `${PREFIX}-finalOutcomeContent`,\n    lastQueryWrap: `${PREFIX}-lastQueryWrap`,\n    queryProcessLoader: `${PREFIX}-queryProcessLoader`,\n    responseBannerContentWrap: `${PREFIX}-responseBannerContentWrap`,\n    responseBannerContent: `${PREFIX}-responseBannerContent`,\n    responseBannerTriangle: `${PREFIX}-responseBannerTriangle`,\n    queryBannerTriangle: `${PREFIX}-queryBannerTriangle`,\n    queryBannerContent: `${PREFIX}-queryBannerContent`,\n    queryBannerContentWrap: `${PREFIX}-queryBannerContentWrap`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.finalOutcomeContent}`]: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        textAlign: 'justify',\n    },\n    [`& .${classes.lastQueryWrap}`]: {\n        margin: theme.spacing(1, 4),\n    },\n    [`& .${classes.queryProcessLoader}`]: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    [`& .${classes.responseBannerContentWrap}`]: {\n        flexGrow: 1,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    [`& .${classes.queryBannerContentWrap}`]: {\n        flexGrow: 1,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n    },\n    [`& .${classes.responseBannerContent}`]: {\n        width: '100%',\n        background: theme.palette.grey[100],\n        padding: theme.spacing(2),\n        borderRadius: theme.spacing(0, 2, 2, 2),\n        position: 'relative',\n    },\n    [`& .${classes.queryBannerContent}`]: {\n        background: `${alpha(theme.palette.primary.main, 0.1)}`,\n        padding: theme.spacing(2),\n        borderRadius: theme.spacing(2, 0, 2, 2),\n        position: 'relative',\n    },\n    [`& .${classes.queryBannerTriangle}`]: {\n        color: 'red',\n        position: 'absolute',\n        width: theme.spacing(33),\n        height: theme.spacing(33),\n        top: 0,\n        right: theme.spacing(-2),\n        overflow: 'hidden',\n        '&:before': {\n            content: '\"\"',\n            display: 'block',\n            width: '200%',\n            height: '200%',\n            position: 'absolute',\n            borderRadius: '50%',\n            top: 0,\n            left: 0,\n        },\n    },\n    [`& .${classes.responseBannerTriangle}`]: {\n        position: 'absolute',\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        top: 0,\n        left: theme.spacing(-2),\n        overflow: 'hidden',\n        '&:before': {\n            content: '\"\"',\n            display: 'block',\n            width: '200%',\n            height: '200%',\n            position: 'absolute',\n            borderRadius: '50%',\n            top: 0,\n            right: 0,\n        },\n    },\n}));\n\ninterface ApiChatResponseProps {\n    lastQuery: string;\n    executionResults: any;\n    finalOutcome: string;\n    isAgentRunning: boolean;\n    isAgentTerminating: boolean;\n    isExecutionError: boolean;\n}\n\n/**\n * Renders the API Chat results view.\n * @returns {TSX} API Chat results view to render.\n */\nconst ApiChatResponse: React.FC<ApiChatResponseProps> = ({\n    lastQuery,\n    executionResults,\n    finalOutcome,\n    isAgentRunning,\n    isAgentTerminating,\n    isExecutionError,\n}) => {\n    const [user, setUser] = useState('You');\n\n    useEffect(() => {\n        const loggedInUser = Utils.getUser();\n        if (loggedInUser) {\n            setUser(loggedInUser);\n        }\n    }, []);\n\n    /**\n     * Renders the execution result body.\n     *\n     * @param {any} executionResult Execution result to render.\n     * @returns {JSX.Element} Execution result body to render.\n     */\n    const renderExecutionResultBody = (executionResult: any) => {\n        const contentType = executionResult.headers.get('Content-Type');\n        if (contentType.includes('application/json') && executionResult.body !== '') {\n            return (\n                <MonacoEditor\n                    width='100%'\n                    height='200'\n                    language='json'\n                    value={JSON.stringify(executionResult.body, null, 2)}\n                    options={{\n                        readOnly: true,\n                        minimap: { enabled: false },\n                        scrollBeyondLastLine: false,\n                        wordWrap: 'on',\n                    }}\n                />\n            );\n        } else if (contentType.includes('application/xml') && executionResult.body !== '') {\n            const formattedMessage = xmlFormat(executionResult.body);\n            return (\n                <MonacoEditor\n                    width='100%'\n                    height='200'\n                    language='xml'\n                    value={formattedMessage}\n                    options={{\n                        readOnly: true,\n                        minimap: { enabled: false },\n                        scrollBeyondLastLine: false,\n                        wordWrap: 'on',\n                    }}\n                />\n            );\n        } else {\n            return (\n                <Typography variant='body1'>\n                    {executionResult.body}\n                </Typography>\n            );\n        }\n    };\n\n    return (\n        <Root>\n            <Box maxHeight='60%' overflow='auto' className={classes.lastQueryWrap}>\n                <Paper>\n                    <Grid justifyContent='flex-end' container>\n                        <Tooltip\n                            title={user.toUpperCase()}\n                            aria-label={user.toUpperCase()}\n                            placement='bottom'\n                        >\n                            <AccountCircleIcon fontSize='large' sx={{ color: '#10597f', marginRight: 2 }} />\n                        </Tooltip>\n                    </Grid>\n                    <Box className={classes.queryBannerContentWrap} ml={6} mr={6} mt={-1}>\n                        <Box className={classes.queryBannerContent}>\n                            <Box className={classes.queryBannerTriangle} />\n                            <Typography variant='body1' align='left'>\n                                {lastQuery}\n                            </Typography>\n                        </Box>\n                    </Box>\n                    <CustomIcon width={50} height={50} icon='api-chat' />\n                    <Box className={classes.responseBannerContentWrap} ml={6} mr={6} mt={-2.5}>\n                        <Box className={classes.responseBannerContent}>\n                            <Box className={classes.responseBannerTriangle} />\n                            {executionResults.length !== 0 && (\n                                <Typography variant='body1' mb={2}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiChat.components.ApiChatResponse.executionResults'\n                                        defaultMessage='Certainly! Here are the results of the API calls I executed on your behalf:'\n                                    />\n                                </Typography>\n                            )}\n                            {executionResults.map((executionResult: any) => {\n                                return (\n                                    <Accordion>\n                                        <AccordionSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                        >\n                                            <>\n                                                {(executionResult.code >= 200 && executionResult.code < 300) ? (\n                                                    <Chip\n                                                        icon={<CheckCircleIcon color='success' />}\n                                                        label={executionResult.code}\n                                                        color='success'\n                                                        variant='outlined'\n                                                        size='small'\n                                                    />\n                                                ) : (\n                                                    <Chip\n                                                        icon={<DangerousIcon color='error' />}\n                                                        label={executionResult.code}\n                                                        color='error'\n                                                        variant='outlined'\n                                                        size='small'\n                                                    />\n                                                )}\n                                                <Typography variant='body1' ml={2} sx={{ alignContent: 'center' }}>\n                                                    {'Executed ' + executionResult.method + ' ' + executionResult.path}\n                                                </Typography>\n                                            </>\n                                        </AccordionSummary>\n                                        <AccordionDetails>\n                                            <Typography variant='body1'>\n                                                {renderExecutionResultBody(executionResult)}\n                                            </Typography>\n                                        </AccordionDetails>\n                                    </Accordion>\n                                );\n                            })}\n                            {!isAgentRunning && lastQuery && finalOutcome && !isExecutionError && (\n                                <>\n                                    {executionResults.length === 0 ? (\n                                        <Box display='flex'>\n                                            <Typography variant='body1'>\n                                                {finalOutcome}\n                                            </Typography>\n                                        </Box>\n                                    ) : (\n                                        <Box display='flex' justifyContent='center' className={classes.finalOutcomeContent}>\n                                            <Typography variant='body1'>\n                                                {finalOutcome}\n                                            </Typography>\n                                        </Box>\n                                    )}\n                                </>\n                            )}\n                            {lastQuery && !finalOutcome && (\n                                <>\n                                    <Box className={classes.queryProcessLoader}>\n                                        {isAgentTerminating ? (\n                                            <>\n                                                <CircularProgress size={20} />\n                                                <Typography variant='body1' sx={{ paddingLeft: '5px' }}>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiChat.components.ApiChatResponse.terminatingMessage'\n                                                        defaultMessage='Execution is terminating...'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <CircularProgress size={20} />\n                                                <Typography variant='body1' sx={{ paddingLeft: '5px' }}>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiChat.components.ApiChatResponse.loadingMessage'\n                                                        defaultMessage='Loading next execution step...'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        )}\n                                    </Box>\n                                </>\n                            )}\n                        </Box>\n                    </Box>\n                </Paper>\n            </Box>\n        </Root>\n    );\n};\n\nexport default ApiChatResponse;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useEffect,\n    useState,\n    useContext,\n    useRef,\n} from 'react';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport { styled } from '@mui/material/styles';\nimport { ApiContext } from 'AppComponents/Apis/Details/ApiContext';\nimport { useSettingsContext } from 'AppComponents/Shared/SettingsContext';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport { Link } from 'react-router-dom';\nimport Alert from '@mui/material/Alert';\nimport Api from 'AppData/api';\nimport { CircularProgress, Typography } from '@mui/material';\nimport Utils from 'AppData/Utils';\nimport AuthManager from 'AppData/AuthManager';\nimport ApiChatPoweredBy from './components/ApiChatPoweredBy';\nimport ApiChatBanner from './components/ApiChatBanner';\nimport ApiChatExecute from './components/ApiChatExecute';\nimport ConfigureKeyDrawer from './components/ConfigureKeyDrawer';\nimport SampleQueryCard from './components/SampleQueryCard';\nimport ApiChatResponse from './components/ApiChatResponse';\n\nconst PREFIX = 'ApiChat';\n\nconst classes = {\n    tryWithAiMain: `${PREFIX}-tryWithAiMain`,\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.tryWithAiMain}`]: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '85vh',\n        marginRight: theme.spacing(6),\n        marginLeft: theme.spacing(2),\n    },\n}));\n\n/**\n * Renders the API Chat UI.\n * @returns {JSX} API Chat page to render.\n */\nconst ApiChat = () => {\n    const [configureKeyDrawerOpen, setConfigureKeyDrawerOpen] = useState(false);\n    const [isAgentRunning, setIsAgentRunning] = useState(false);\n    const [isEnrichingSpec, setIsEnrichingSpec] = useState(false);\n    const [specEnrichmentError, setSpecEnrichmentError] = useState('');\n    const [specEnrichmentErrorLevel, setSpecEnrichmentErrorLevel] = useState('');\n    const [enrichedSpec, setEnrichedSpec] = useState({});\n    const [sampleQueries, setSampleQueries] = useState([]);\n    const [inputQuery, setInputQuery] = useState('');\n    const [lastQuery, setLastQuery] = useState('');\n    const [finalOutcome, setFinalOutcome] = useState('');\n    const [executionResults, setExecutionResults] = useState([]);\n    const [isExecutionError, setIsExecutionError] = useState(false);\n    const [isAgentTerminating, setIsAgentTerminating] = useState(false);\n    const [accessToken, setAccessToken] = useState(null);\n    const [securityScheme, setSecurityScheme] = useState(null);\n    const [username, setUsername] = useState(null);\n    const [password, setPassword] = useState(null);\n    const [selectedEnvironment, setSelectedEnvironment] = useState(null);\n\n    const user = AuthManager.getUser();\n    const apiClient = new Api();\n    const { api } = useContext(ApiContext);\n    const { settings: { apiChatEnabled, aiAuthTokenProvided } } = useSettingsContext();\n    const abortControllerRef = useRef(new AbortController());\n    const intl = useIntl();\n\n    const setEnrichmentError = (errorCode) => {\n        switch (errorCode) {\n            case 'INVALID_SPECIFICATION':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.invalidSpecificationError',\n                        defaultMessage:\n                            'The OpenAPI specification could not be parsed. Ensure you are using a valid specification.',\n                    }),\n                );\n                break;\n            case 'INVALID_RESOURCE_PATH':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.invalidResourcePathError',\n                        defaultMessage:\n                            'The OpenAPI specification contain unsupported resource path definitions.',\n                    }),\n                );\n                break;\n            case 'UNSUPPORTED_MEDIA_TYPE':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.unsupportedMediaTypeError',\n                        defaultMessage:\n                            'The OpenAPI specification includes non-JSON input types which are not currently supported.',\n                    }),\n                );\n                break;\n            case 'UNSUPPORTED_SPECIFICATION':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.unsupportedSpecificationError',\n                        defaultMessage:\n                            'The OpenAPI specification includes components that are currently not supported.',\n                    }),\n                );\n                break;\n            case 'LLM':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.llmError',\n                        defaultMessage: 'Failed to load API Chat.',\n                    }),\n                );\n                break;\n            case 'TOKEN_LIMIT_EXCEEDED':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.tokenLimitExceededError',\n                        defaultMessage:\n                            'The OpenAPI specification exceeds the maximum limit.',\n                    }),\n                );\n                break;\n            case 'STACK_OVERFLOW':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.stackOverflowError',\n                        defaultMessage:\n                            'The OpenAPI specification could not be parsed due to a cyclic reference or the excessive length of the'\n                            + ' specification.',\n                    }),\n                );\n                break;\n            case 'CONTENT_POLICY_VIOLATION':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.contentViolationError',\n                        defaultMessage:\n                            'The content in the OpenAPI specification violates the Azure OpenAI content policy.',\n                    }),\n                );\n                break;\n            case 'LLM_CONNECTION':\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.llmConnectionError',\n                        defaultMessage: 'There was an error connecting to Azure OpenAI.',\n                    }),\n                );\n                break;\n            case 'GENERIC':\n            default:\n                setSpecEnrichmentError(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.specEnrichmentError.genericError',\n                        defaultMessage: 'An error occurred when loading API Chat.',\n                    }),\n                );\n                break;\n        }\n    };\n\n    const setExecutionErrorMessage = (errorCode) => {\n        switch (errorCode) {\n            case 'LLM':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.llmError',\n                        defaultMessage:\n                            'An error occurred during query execution. Try again.',\n                    }),\n                );\n                break;\n            case 'CACHING':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.cachingError',\n                        defaultMessage:\n                            'An error occurred during query execution. Try again later.',\n                    }),\n                );\n                break;\n            case 'RESPONSE_PARSING':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.responseParsingError',\n                        defaultMessage:\n                            'An error occurred while attempting to extract the API response.',\n                    }),\n                );\n                break;\n            case 'API_COMMUNICATION':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.apiCommunicationError',\n                        defaultMessage:\n                            'An error occurred while attempting to establish a connection with your API.',\n                    }),\n                );\n                break;\n            case 'TOKEN_LIMIT_EXCEEDED':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.tokenLimitExceededError',\n                        defaultMessage:\n                            'Execution has been terminated due to exceeding the token limit.',\n                    }),\n                );\n                break;\n            case 'INVALID_COMMAND':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.invalidCommandError',\n                        defaultMessage: 'An invalid query is provided.',\n                    }),\n                );\n                break;\n            case 'CONTENT_POLICY_VIOLATION':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.contentViolationError',\n                        defaultMessage:\n                            'Your query seems to contain inappropriate content. Please try again with a different query.',\n                    }),\n                );\n                break;\n            case 'LLM_CONNECTION':\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.llmConnectionError',\n                        defaultMessage: 'There was an error connecting to Azure OpenAI.',\n                    }),\n                );\n                break;\n            case 'GENERIC':\n            default:\n                setFinalOutcome(\n                    intl.formatMessage({\n                        id: 'Apis.Details.ApiChat.components.finalOutcome.genericError',\n                        defaultMessage: 'An error occurred during query execution.',\n                    }),\n                );\n                break;\n        }\n    };\n\n    useEffect(() => {\n        if (abortControllerRef.current.signal.aborted) {\n            setIsAgentTerminating(true);\n        }\n    }, [abortControllerRef.current.signal.aborted]);\n\n    useEffect(() => {\n        if (isAgentTerminating) {\n            setTimeout(() => {\n                setIsAgentTerminating(false);\n                setIsAgentRunning(false);\n            }, 2000);\n        }\n    }, [isAgentTerminating]);\n\n    const getUnauthorizedErrorMessage = () => {\n        return intl.formatMessage({\n            id: 'Apis.Details.ApiChat.components.onPremKeyInvalid.error',\n            defaultMessage: 'Provided token is invalid. Please use a valid token to start testing.',\n        });\n    };\n\n    const getTooManyRequestsErrorMessage = () => {\n        return intl.formatMessage({\n            id: 'Apis.Details.ApiChat.components.throttledOut.error',\n            defaultMessage: 'Your request has been throttled out. Please reach out to the administrator for assistance.',\n        });\n    };\n\n    const getGatewayTimeoutErrorMessage = () => {\n        return intl.formatMessage({\n            id: 'Apis.Details.ApiChat.components.gatewayTimeout.error',\n            defaultMessage: 'The request has timed out. Please try again later.',\n        });\n    };\n\n    useEffect(() => {\n        if (api && api.id && apiChatEnabled && aiAuthTokenProvided && user) {\n            setIsEnrichingSpec(true);\n            setSpecEnrichmentError('');\n            setSpecEnrichmentErrorLevel('');\n            const requestId = Utils.generateUUID();\n            const enrichSpecPromise = apiClient.enrichOpenApiSpecification(api.id, requestId);\n            enrichSpecPromise\n                .then((response) => {\n                    const { body, status } = response;\n                    if (status !== 201) {\n                        setIsEnrichingSpec(false);\n                        setEnrichmentError(body.code);\n                        setSpecEnrichmentErrorLevel('warning');\n                    } else {\n                        setEnrichedSpec(body.apiSpec);\n                        setSampleQueries(body.queries);\n                        setIsEnrichingSpec(false);\n                    }\n                }).catch((error) => {\n                    setIsEnrichingSpec(false);\n                    const statusCode = error?.response?.status;\n                    if (statusCode === 401) { // Hanlde on-prem key vaidation failed scenario\n                        setSpecEnrichmentError(getUnauthorizedErrorMessage());\n                        setSpecEnrichmentErrorLevel('error');\n                    } else if (statusCode === 429) { // Handle throttled out scenario\n                        setSpecEnrichmentError(getTooManyRequestsErrorMessage());\n                        setSpecEnrichmentErrorLevel('error');\n                    } else if (statusCode === 504) { // Handle gateway timeout scenario\n                        setSpecEnrichmentError(getGatewayTimeoutErrorMessage());\n                        setSpecEnrichmentErrorLevel('error');\n                    } else {\n                        setEnrichmentError(\n                            error?.response?.body?.code || 'GENERIC',\n                        );\n                        setSpecEnrichmentErrorLevel(error?.response?.body?.level === 'WARN' ? 'warning' : 'error');\n                    }\n                });\n        }\n    }, []);\n\n    const handleOpenConfigureKey = () => {\n        setConfigureKeyDrawerOpen(true);\n    };\n\n    const authTokenNotProvidedWarning = (\n        <FormattedMessage\n            id='Apis.Details.ApiChat.warning.authTokenMissing'\n            defaultMessage={'You must provide a token to start testing. To obtain one, '\n                + 'follow the steps provided under {apiChatDocLink} '}\n            values={{\n                apiChatDocLink: (\n                    <a\n                        id='api-chat-doc-link'\n                        href='https://apim.docs.wso2.com/en/4.3.0/consume/invoke-apis/invoke-apis-using-tools/test-apis-with-apichat/'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        Test APIs with API Chat\n                        <LaunchIcon\n                            style={{ marginLeft: '2px' }}\n                            fontSize='small'\n                        />\n                    </a>\n                ),\n            }}\n        />\n    );\n\n    const apiAccessTokenNotFoundWarning = (\n        <FormattedMessage\n            id='Apis.Details.ApiChat.warning.apiAccessTokenNotFound'\n            defaultMessage='You must provide an API access token. Configure one by navigating to {configureKeyLink}'\n            values={{\n                configureKeyLink: (\n                    <Link\n                        onClick={() => {\n                            setConfigureKeyDrawerOpen(true);\n                        }}\n                    >\n                        Configure Key\n                        <LaunchIcon\n                            style={{ marginLeft: '2px' }}\n                            fontSize='small'\n                        />\n                    </Link>\n                ),\n            }}\n        />\n    );\n\n    const handleGoBack = () => {\n        setLastQuery('');\n        setExecutionResults([]);\n        setFinalOutcome('');\n    };\n\n    const handleConfigChange = ({\n        newAccessToken, newSecurityScheme, newUsername, newPassword, newSelectedEnvironment,\n    }) => {\n        if (newAccessToken !== undefined) setAccessToken(newAccessToken);\n        if (newSecurityScheme !== undefined) setSecurityScheme(newSecurityScheme);\n        if (newUsername !== undefined) setUsername(newUsername);\n        if (newPassword !== undefined) setPassword(newPassword);\n        if (newSelectedEnvironment !== undefined) setSelectedEnvironment(newSelectedEnvironment);\n    };\n\n    const getEnvironmentURLs = (endpointURLs, environmentName) => {\n        const environment = endpointURLs.find((env) => env.environmentName === environmentName);\n        return environment ? environment.URLs : {};\n    };\n\n    const invokeAPI = async (generatedRequest) => {\n        const { method, path, inputs } = generatedRequest;\n        const { parameters, requestBody } = inputs || {};\n        const usedKeys = [];\n        const resolvedPath = Object.entries(parameters || {}).reduce((acc, [key, value]) => {\n            if (acc.includes(`{${key}}`)) {\n                usedKeys.push(key);\n                return acc.replace(`{${key}}`, encodeURIComponent(value));\n            }\n            return acc;\n        }, path);\n        const remainingParameters = Object.keys(parameters || {}).reduce((acc, key) => {\n            if (!usedKeys.includes(key)) {\n                acc[key] = parameters[key];\n            }\n            return acc;\n        }, {});\n\n        const queryString = new URLSearchParams(remainingParameters).toString();\n        const fullPath = queryString ? `${resolvedPath}?${queryString}` : resolvedPath;\n        const environmentURLs = getEnvironmentURLs(api.endpointURLs, selectedEnvironment);\n        const url = `${environmentURLs.https}${fullPath}`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        };\n\n        if (securityScheme === 'OAUTH') {\n            headers.Authorization = `Bearer ${accessToken}`;\n        } else if (securityScheme === 'BASIC') {\n            headers.Authorization = `Basic ${btoa(`${username}:${password}`)}`;\n        } else if (securityScheme === 'API-KEY') {\n            headers.ApiKey = accessToken;\n        }\n\n        const fetchOptions = {\n            method,\n            headers,\n            ...(method !== 'GET' && requestBody !== null && { body: JSON.stringify(requestBody) }),\n        };\n\n        try {\n            const response = await fetch(url, fetchOptions);\n            const contentType = response.headers.get('Content-Type');\n\n            // Check if response is JSON\n            if (contentType && contentType.includes('application/json')) {\n                const data = await response.json().catch(() => ({}));\n                return {\n                    code: response.status,\n                    path: fullPath,\n                    headers: response.headers,\n                    body: data, // Return the JSON data\n                };\n            }\n\n            // Check if response is XML\n            if (contentType && contentType.includes('application/xml')) {\n                const text = await response.text();\n                return {\n                    code: response.status,\n                    path: fullPath,\n                    headers: response.headers,\n                    body: text, // Return the XML data\n                };\n            }\n\n            // If response is neither JSON nor XML\n            const text = await response.text().catch(() => 'Unable to render this Content-Type');\n            return {\n                code: response.status,\n                path: fullPath,\n                headers: response.headers,\n                body: text,\n            };\n        } catch (error) {\n            return {\n                code: 500,\n                path: fullPath,\n                headers: {},\n                body: {\n                    description: 'API invocation failed',\n                    error: error.message,\n                },\n            };\n        }\n    };\n\n    const sendSubsequentRequest = async (requestId, resource) => {\n        const executionResponseForAiAgent = await invokeAPI(resource);\n        setExecutionResults((prevState) => {\n            return [\n                ...prevState,\n                {\n                    ...executionResponseForAiAgent,\n                    method: resource.method,\n                },\n            ];\n        });\n        const executePromise = apiClient.runAiAgentSubsequentIterations(\n            api.id,\n            requestId,\n            executionResponseForAiAgent,\n        );\n        executePromise.then((response) => {\n            const { data } = response;\n            if (response.status === 201) {\n                if (abortControllerRef.current.signal.aborted) {\n                    return;\n                }\n                if (data.code) {\n                    setIsExecutionError(true);\n                    setExecutionErrorMessage(data.code);\n                    setIsAgentRunning(false);\n                } else {\n                    const { body } = response;\n                    switch (body.taskStatus) {\n                        case 'IN_PROGRESS':\n                            sendSubsequentRequest(requestId, body.resource);\n                            break;\n                        case 'COMPLETED':\n                            if (body.result && body.result !== '') {\n                                setFinalOutcome(body.result);\n                            } else {\n                                setFinalOutcome(\n                                    intl.formatMessage({\n                                        id: 'Apis.Details.ApiChat.ApiChat.subsequentRequset.finalOutcome.taskCompleted',\n                                        defaultMessage: 'Task completed',\n                                    }),\n                                );\n                            }\n                            setIsAgentRunning(false);\n                            break;\n                        default:\n                            setIsExecutionError(true);\n                            setFinalOutcome(\n                                intl.formatMessage({\n                                    id: 'Apis.Details.ApiChat.components.finalOutcome.taskExecutionDefault',\n                                    defaultMessage: 'An error occurred during query execution.',\n                                }),\n                            );\n                            setIsAgentRunning(false);\n                    }\n                }\n            } else {\n                setIsExecutionError(true);\n                setExecutionErrorMessage(response?.data?.code);\n                setIsAgentRunning(false);\n            }\n        }).catch((error) => {\n            setIsExecutionError(true);\n            const statusCode = error?.response?.status;\n            if (statusCode === 401) { // Hanlde on-prem key vaidation failed scenario\n                setExecutionErrorMessage(getUnauthorizedErrorMessage());\n            } else if (statusCode === 429) { // Handle throttled out scenario\n                setExecutionErrorMessage(getTooManyRequestsErrorMessage());\n            } else if (statusCode === 504) { // Handle gateway timeout scenario\n                setExecutionErrorMessage(getGatewayTimeoutErrorMessage());\n            } else {\n                const errorMessage = error?.response?.data || 'An error occurred during query execution.';\n                setExecutionErrorMessage(errorMessage);\n            }\n            setIsAgentRunning(false);\n        });\n    };\n\n    const sendInitialRequest = (query) => {\n        setIsExecutionError(false);\n        setExecutionResults(() => {\n            return [];\n        });\n        if (query.length < 1) {\n            setFinalOutcome(\n                intl.formatMessage({\n                    id: 'Apis.Details.ApiChat.components.finalOutcome.noQuery',\n                    defaultMessage: 'An invalid query is provided.',\n                }),\n            );\n            return;\n        }\n        setIsAgentRunning(true);\n        setFinalOutcome('');\n        const requestId = Utils.generateUUID();\n        const executePromise = apiClient.runAiAgentInitialIteration(\n            api.id,\n            requestId,\n            query,\n            enrichedSpec,\n        );\n        executePromise.then((response) => {\n            const { data } = response;\n            if (response.status === 201) {\n                if (abortControllerRef.current.signal.aborted) {\n                    return;\n                }\n                if (data.code) {\n                    setIsExecutionError(true);\n                    setExecutionErrorMessage(data.code);\n                    setIsAgentRunning(false);\n                } else {\n                    const { body } = response;\n                    switch (body.taskStatus) {\n                        case 'IN_PROGRESS':\n                            sendSubsequentRequest(requestId, body.resource);\n                            break;\n                        case 'COMPLETED':\n                            if (body.result && body.result !== '') {\n                                setFinalOutcome(body.result);\n                            } else {\n                                setFinalOutcome(\n                                    intl.formatMessage({\n                                        id: 'Apis.Details.ApiChat.ApiChat.initialRequest.finalOutcome.taskCompletedOneItr',\n                                        defaultMessage: 'Task completed in 1 iteration.',\n                                    }),\n                                );\n                            }\n                            setIsAgentRunning(false);\n                            break;\n                        default:\n                            setIsExecutionError(true);\n                            setFinalOutcome(\n                                intl.formatMessage({\n                                    id: 'Apis.Details.ApiChat.components.finalOutcome.taskExecutionDefault',\n                                    defaultMessage: 'An error occurred during query execution.',\n                                }),\n                            );\n                            setIsAgentRunning(false);\n                    }\n                }\n            } else {\n                setIsExecutionError(true);\n                setExecutionErrorMessage(response?.data?.code);\n                setIsAgentRunning(false);\n            }\n        }).catch((error) => {\n            setIsExecutionError(true);\n            const statusCode = error?.response?.status;\n            if (statusCode === 401) { // Hanlde on-prem key vaidation failed scenario\n                setExecutionErrorMessage(getUnauthorizedErrorMessage());\n            } else if (statusCode === 429) { // Handle throttled out scenario\n                setExecutionErrorMessage(getTooManyRequestsErrorMessage());\n            } else if (statusCode === 504) { // Handle gateway timeout scenario\n                setExecutionErrorMessage(getGatewayTimeoutErrorMessage());\n            } else {\n                const errorMessage = error?.response?.data || 'An error occurred during query execution.';\n                setExecutionErrorMessage(errorMessage);\n            }\n            setIsAgentRunning(false);\n        });\n    };\n\n    const handleStopAndReExecute = () => {\n        if (isAgentRunning) {\n            abortControllerRef.current.abort();\n            setFinalOutcome(\n                intl.formatMessage({\n                    id: 'Apis.Details.ApiChat.components.finalOutcome.executionTerminated',\n                    defaultMessage: 'Execution was terminated.',\n                }),\n            );\n            setExecutionResults([]);\n            setIsAgentRunning(false);\n        } else {\n            abortControllerRef.current = new AbortController();\n            const query = lastQuery;\n            sendInitialRequest(query);\n        }\n    };\n\n    const handleCopyClick = (sampleQuery) => {\n        if (!isAgentRunning) {\n            setInputQuery(sampleQuery);\n        }\n        navigator.clipboard.writeText(sampleQuery);\n    };\n\n    const handleQueryChange = (event) => {\n        const { value } = event.target;\n        setInputQuery(value);\n    };\n\n    const handleExecute = async () => {\n        if (inputQuery.length !== 0) {\n            abortControllerRef.current = new AbortController();\n            const query = inputQuery;\n            setInputQuery('');\n            setLastQuery(inputQuery);\n            sendInitialRequest(query);\n        }\n    };\n\n    const handleExecuteSampleQuery = async (query) => {\n        if (!isAgentRunning) {\n            abortControllerRef.current = new AbortController();\n            setInputQuery('');\n            setLastQuery(query);\n            sendInitialRequest(query);\n        }\n    };\n\n    return (\n        <Root>\n            <Box className={classes.tryWithAiMain}>\n                <Box sx={{ flexGrow: 1 }}>\n                    {apiChatEnabled && aiAuthTokenProvided && (\n                        <ConfigureKeyDrawer\n                            isDrawerOpen={configureKeyDrawerOpen}\n                            updateDrawerOpen={setConfigureKeyDrawerOpen}\n                            onConfigChange={handleConfigChange}\n                        />\n                    )}\n                    <ApiChatPoweredBy\n                        openConfigureKey={handleOpenConfigureKey}\n                        goBack={handleGoBack}\n                        disableGoBack={isAgentRunning || lastQuery === ''}\n                        disableConfigureKey={!apiChatEnabled || !aiAuthTokenProvided || specEnrichmentError}\n                    />\n                    {(isAgentRunning || lastQuery || finalOutcome) && (\n                        <ApiChatResponse\n                            lastQuery={lastQuery}\n                            executionResults={executionResults}\n                            finalOutcome={finalOutcome}\n                            isAgentRunning={isAgentRunning}\n                            isAgentTerminating={isAgentTerminating}\n                            isExecutionErro={isExecutionError}\n                        />\n                    )}\n                    {!lastQuery && (\n                        <ApiChatBanner />\n                    )}\n                    {!isAgentRunning && !lastQuery && !finalOutcome && sampleQueries && sampleQueries.length > 0 && (\n                        <Box display='flex' ml={3} mt={3}>\n                            <Grid container direction='row' spacing={3}>\n                                {sampleQueries && sampleQueries.map((queryData) => {\n                                    const gridVal = sampleQueries.length === 2 ? 6 : 4;\n                                    return (\n                                        <Grid\n                                            key={queryData.scenario}\n                                            item\n                                            xs={12}\n                                            md={gridVal}\n                                        >\n                                            <SampleQueryCard\n                                                onExecuteClick={handleExecuteSampleQuery}\n                                                disabled={\n                                                    !apiChatEnabled\n                                            || !aiAuthTokenProvided\n                                            || !securityScheme\n                                            || !(securityScheme && (accessToken || password))\n                                                }\n                                                queryData={queryData}\n                                                onCopyClick={handleCopyClick}\n                                            />\n                                        </Grid>\n                                    );\n                                })}\n                            </Grid>\n                        </Box>\n                    )}\n                </Box>\n                <Box>\n                    <Box display='flex' alignItems='center' flexDirection='column' marginTop={1}>\n                        {/* Handle prepare call executing scenario */}\n                        {isEnrichingSpec && (\n                            <Box display='flex' justifyContent='center'>\n                                <CircularProgress size={20} />\n                                <Typography variant='body1' sx={{ paddingLeft: '5px' }}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiChat.ApiChat.loadingSpecEnrichmentMessage'\n                                        defaultMessage='We are in the process of preparing the API specification for API Chat.'\n                                    />\n                                </Typography>\n                            </Box>\n                        )}\n                        {/* Handle prepare call failed scenario */}\n                        {specEnrichmentError && specEnrichmentErrorLevel && (\n                            <Alert severity={specEnrichmentErrorLevel}>\n                                <Typography variant='body1'>\n                                    {specEnrichmentError}\n                                </Typography>\n                            </Alert>\n                        )}\n                        {/* Handle auth token not provided scenario */}\n                        {!aiAuthTokenProvided && (\n                            <Alert severity='warning'>\n                                <Typography variant='body1'>\n                                    {authTokenNotProvidedWarning}\n                                </Typography>\n                            </Alert>\n                        )}\n                        {/* Handle not logged in scenario */}\n                        {!user && (\n                            <Alert severity='info'>\n                                <Typography variant='body1'>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiChat.warning.notSignedIn'\n                                        defaultMessage='You must sign in if you wish to interact with API Chat bot.'\n                                    />\n                                </Typography>\n                            </Alert>\n                        )}\n                    </Box>\n                    <Box display='flex' alignItems='center' flexDirection='column' marginTop={1}>\n                        {(!securityScheme || !(securityScheme && (accessToken || password)))\n                        && aiAuthTokenProvided && user && !specEnrichmentError && !isEnrichingSpec && (\n                            <Alert severity='warning'>\n                                <Typography variant='body1'>\n                                    {apiAccessTokenNotFoundWarning}\n                                </Typography>\n                            </Alert>\n                        )}\n                    </Box>\n                    <Box sx={{ ml: 7, mr: 7 }}>\n                        <ApiChatExecute\n                            isAgentRunning={isAgentRunning}\n                            isAgentTerminating={isAgentTerminating}\n                            lastQuery={lastQuery}\n                            handleStopAndReExecute={handleStopAndReExecute}\n                            inputQuery={inputQuery}\n                            handleQueryChange={handleQueryChange}\n                            isEnrichingSpec={isEnrichingSpec}\n                            specEnrichmentError={specEnrichmentError}\n                            handleExecute={handleExecute}\n                            isExecuteDisabled={\n                                !apiChatEnabled\n                            || !aiAuthTokenProvided\n                            || !securityScheme\n                            || !(securityScheme && (accessToken || password))\n                            }\n                        />\n                    </Box>\n                </Box>\n            </Box>\n        </Root>\n    );\n};\n\nexport default ApiChat;\n"],"names":["openConfigureKey","goBack","disableGoBack","disableConfigureKey","Box","display","width","m","flexDirection","flexGrow","Typography","id","variant","component","defaultMessage","Chip","label","size","color","sx","ml","pr","mr","Button","startIcon","KeyboardBackspace","onClick","disabled","SettingsOutlined","PREFIX","classes","tryAiBannerCont","tryAiBannerImgWrap","tryAiBannerContentWrap","tryAiBannerContent","tryAiBannerTriangle","Root","styled","theme","paddingLeft","spacing","gridGap","maxWidth","flex","fontSize","alignItems","background","palette","grey","padding","borderRadius","position","height","top","left","overflow","content","right","boxShadow","intl","useIntl","className","alt","src","app","context","formatMessage","root","rootSmall","rootLarge","readOnlyDefault","readOnlyPlain","rounded","focused","error","textInput","textInputLarge","inputAdornedEnd","inputAdornedEndAlignTop","textarea","inputGroup","_ref","minHeight","backgroundColor","common","white","border","alpha","primary","main","resize","borderColor","black","secondary","light","paddingRight","borderWidth","typography","body1","fontWeight","lineHeight","overline","marginRight","alignSelf","marginBottom","TextInput","props","ref","readOnly","helperText","rows","multiline","optional","loading","tooltip","inputTooltip","info","actions","testId","resizeIndicator","rest","_objectWithoutProperties","_excluded","React","InputBase","_extends","clsx","multilineReadonly","multilineResizeIndicator","inputMultiline","input","adornedEnd","forwardRef","tryAiBottom","tryAiBottomInner","reExecuteWrap","tryAiBottomTextInputWrap","disclaimerText","marginLeft","marginTop","justifyContent","ExecuteQuery","transform","isAgentRunning","isAgentTerminating","lastQuery","handleStopAndReExecute","inputQuery","handleQueryChange","isEnrichingSpec","specEnrichmentError","handleExecute","isExecuteDisabled","pl","fullWidth","name","value","placeholder","onChange","onKeyPress","event","key","preventDefault","endAdornment","inputProps","maxLength","mt","length","ConfigureKeyDrawer","isDrawerOpen","updateDrawerOpen","setTestAccessToken","onConfigChange","api","setApi","useState","securityScheme","setSecurityScheme","username","setUsername","password","setPassword","scopes","setScopes","selectedKeyType","setSelectedKeyType","keys","setKeys","selectedEnvironment","setSelectedEnvironment","productionAccessToken","setProductionAccessToken","sandboxAccessToken","setSandboxAccessToken","environments","setEnvironments","selectedKeyManager","setSelectedKeyManager","productionApiKey","setProductionApiKey","sandboxApiKey","setSandboxApiKey","advAuthHeader","setAdvAuthHeader","advAuthHeaderValue","setAdvAuthHeaderValue","selectedEndpoint","setSelectedEndpoint","user","AuthManager","getUser","apiObj","useContext","ApiContext","useEffect","endpointURLs","map","endpoint","environmentName","displayName","environmentDisplayName","scopeList","scope","defaultSecurityScheme","includes","Progress","Drawer","title","anchor","open","onClose","PaperProps","p","Grid","container","item","xs","FormattedMessage","IconButton","Close","advertiseInfo","advertised","Paper","InfoIcon","verticalAlign","align","TryOutController","securitySchemeType","updateSelectedKeyManager","keyManager","isUpdateToken","selectedApplication","accessToken","get","keyType","token","Application","then","application","getKeys","appKeys","updateAccessToken","URLs","autoGenerateToken","type","propTypes","PropTypes","bool","isRequired","func","sampleQuery","sampleQueryCard","maxHeight","textOverflow","whiteSpace","onExecuteClick","queryData","onCopyClick","copyText","copiedText","copyBtnText","setCopyBtnText","Card","CardActionArea","query","CardContent","mb","scenario","e","stopPropagation","Tooltip","placement","ContentCopy","finalOutcomeContent","lastQueryWrap","queryProcessLoader","responseBannerContentWrap","responseBannerContent","responseBannerTriangle","queryBannerTriangle","queryBannerContent","queryBannerContentWrap","paddingTop","paddingBottom","textAlign","margin","executionResults","finalOutcome","isExecutionError","setUser","loggedInUser","Utils","renderExecutionResultBody","executionResult","contentType","headers","body","language","JSON","stringify","options","minimap","enabled","scrollBeyondLastLine","wordWrap","formattedMessage","toUpperCase","AccountCircle","CustomIcon","icon","Accordion","AccordionSummary","expandIcon","ExpandMore","code","CheckCircle","Dangerous","alignContent","method","path","AccordionDetails","CircularProgress","ApiChat","configureKeyDrawerOpen","setConfigureKeyDrawerOpen","setIsAgentRunning","setIsEnrichingSpec","setSpecEnrichmentError","specEnrichmentErrorLevel","setSpecEnrichmentErrorLevel","enrichedSpec","setEnrichedSpec","sampleQueries","setSampleQueries","setInputQuery","setLastQuery","setFinalOutcome","setExecutionResults","setIsExecutionError","setIsAgentTerminating","setAccessToken","apiClient","Api","settings","apiChatEnabled","aiAuthTokenProvided","useSettingsContext","abortControllerRef","useRef","AbortController","setEnrichmentError","errorCode","setExecutionErrorMessage","current","signal","aborted","setTimeout","getUnauthorizedErrorMessage","getTooManyRequestsErrorMessage","getGatewayTimeoutErrorMessage","requestId","generateUUID","enrichOpenApiSpecification","response","status","apiSpec","queries","catch","_error$response","statusCode","_error$response2","_error$response2$body","_error$response3","_error$response3$body","level","authTokenNotProvidedWarning","values","apiChatDocLink","href","target","rel","LaunchIcon","style","apiAccessTokenNotFoundWarning","configureKeyLink","Link","sendSubsequentRequest","async","resource","executionResponseForAiAgent","inputs","generatedRequest","parameters","requestBody","usedKeys","resolvedPath","Object","entries","reduce","acc","_ref3","push","replace","encodeURIComponent","remainingParameters","queryString","URLSearchParams","toString","fullPath","url","getEnvironmentURLs","environment","find","env","https","Authorization","btoa","ApiKey","fetchOptions","_objectSpread","fetch","data","json","text","description","message","invokeAPI","prevState","runAiAgentSubsequentIterations","taskStatus","result","_response$data","_error$response4","_error$response5","errorMessage","sendInitialRequest","runAiAgentInitialIteration","_response$data2","_error$response6","_error$response7","handleCopyClick","navigator","clipboard","writeText","handleExecuteSampleQuery","_ref2","newAccessToken","newSecurityScheme","newUsername","newPassword","newSelectedEnvironment","undefined","ApiChatPoweredBy","handleOpenConfigureKey","handleGoBack","ApiChatResponse","isExecutionErro","ApiChatBanner","direction","gridVal","md","SampleQueryCard","Alert","severity","ApiChatExecute","abort"],"sourceRoot":""}